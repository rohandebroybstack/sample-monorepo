
(function a11yFunction (window) {
  // a11y_engine object needs "global" access
  var global = window;
  var document = window.document;

var a11yEngine = a11yEngine || {};

if (typeof window.getComputedStyle === 'function') {
    window.a11yEngine = a11yEngine;
}

// local namespace for common functions
var commons;

// socket connection object used across multiple runs
var socket;

// abort controller & associated signal
var controller = new AbortController();
var signal = controller.signal;

var abortedChecks = new Map();

// unique identifier associated with each engine run
var runIdentifier;
var userId;
var scanId;

(() => {
  var __defProp = Object.defineProperty;
  var __export = (target, all2) => {
    for (var name2 in all2)
      __defProp(target, name2, {get: all2[name2], enumerable: true});
  };

  // node_modules/lodash-es/_listCacheClear.js
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  var listCacheClear_default = listCacheClear;

  // node_modules/lodash-es/eq.js
  function eq(value2, other) {
    return value2 === other || value2 !== value2 && other !== other;
  }
  var eq_default = eq;

  // node_modules/lodash-es/_assocIndexOf.js
  function assocIndexOf(array, key) {
    var length2 = array.length;
    while (length2--) {
      if (eq_default(array[length2][0], key)) {
        return length2;
      }
    }
    return -1;
  }
  var assocIndexOf_default = assocIndexOf;

  // node_modules/lodash-es/_listCacheDelete.js
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf_default(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }
  var listCacheDelete_default = listCacheDelete;

  // node_modules/lodash-es/_listCacheGet.js
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf_default(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  var listCacheGet_default = listCacheGet;

  // node_modules/lodash-es/_listCacheHas.js
  function listCacheHas(key) {
    return assocIndexOf_default(this.__data__, key) > -1;
  }
  var listCacheHas_default = listCacheHas;

  // node_modules/lodash-es/_listCacheSet.js
  function listCacheSet(key, value2) {
    var data = this.__data__, index = assocIndexOf_default(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value2]);
    } else {
      data[index][1] = value2;
    }
    return this;
  }
  var listCacheSet_default = listCacheSet;

  // node_modules/lodash-es/_ListCache.js
  function ListCache(entries) {
    var index = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length2) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  ListCache.prototype.clear = listCacheClear_default;
  ListCache.prototype["delete"] = listCacheDelete_default;
  ListCache.prototype.get = listCacheGet_default;
  ListCache.prototype.has = listCacheHas_default;
  ListCache.prototype.set = listCacheSet_default;
  var ListCache_default = ListCache;

  // node_modules/lodash-es/_stackClear.js
  function stackClear() {
    this.__data__ = new ListCache_default();
    this.size = 0;
  }
  var stackClear_default = stackClear;

  // node_modules/lodash-es/_stackDelete.js
  function stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
  }
  var stackDelete_default = stackDelete;

  // node_modules/lodash-es/_stackGet.js
  function stackGet(key) {
    return this.__data__.get(key);
  }
  var stackGet_default = stackGet;

  // node_modules/lodash-es/_stackHas.js
  function stackHas(key) {
    return this.__data__.has(key);
  }
  var stackHas_default = stackHas;

  // node_modules/lodash-es/_freeGlobal.js
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeGlobal_default = freeGlobal;

  // node_modules/lodash-es/_root.js
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal_default || freeSelf || Function("return this")();
  var root_default = root;

  // node_modules/lodash-es/_Symbol.js
  var Symbol2 = root_default.Symbol;
  var Symbol_default = Symbol2;

  // node_modules/lodash-es/_getRawTag.js
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
  function getRawTag(value2) {
    var isOwn = hasOwnProperty.call(value2, symToStringTag), tag = value2[symToStringTag];
    try {
      value2[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value2);
    if (unmasked) {
      if (isOwn) {
        value2[symToStringTag] = tag;
      } else {
        delete value2[symToStringTag];
      }
    }
    return result;
  }
  var getRawTag_default = getRawTag;

  // node_modules/lodash-es/_objectToString.js
  var objectProto2 = Object.prototype;
  var nativeObjectToString2 = objectProto2.toString;
  function objectToString(value2) {
    return nativeObjectToString2.call(value2);
  }
  var objectToString_default = objectToString;

  // node_modules/lodash-es/_baseGetTag.js
  var nullTag = "[object Null]";
  var undefinedTag = "[object Undefined]";
  var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
  function baseGetTag(value2) {
    if (value2 == null) {
      return value2 === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag2 && symToStringTag2 in Object(value2) ? getRawTag_default(value2) : objectToString_default(value2);
  }
  var baseGetTag_default = baseGetTag;

  // node_modules/lodash-es/isObject.js
  function isObject(value2) {
    var type = typeof value2;
    return value2 != null && (type == "object" || type == "function");
  }
  var isObject_default = isObject;

  // node_modules/lodash-es/isFunction.js
  var asyncTag = "[object AsyncFunction]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var proxyTag = "[object Proxy]";
  function isFunction(value2) {
    if (!isObject_default(value2)) {
      return false;
    }
    var tag = baseGetTag_default(value2);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  var isFunction_default = isFunction;

  // node_modules/lodash-es/_coreJsData.js
  var coreJsData = root_default["__core-js_shared__"];
  var coreJsData_default = coreJsData;

  // node_modules/lodash-es/_isMasked.js
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  var isMasked_default = isMasked;

  // node_modules/lodash-es/_toSource.js
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  var toSource_default = toSource;

  // node_modules/lodash-es/_baseIsNative.js
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto2 = Function.prototype;
  var objectProto3 = Object.prototype;
  var funcToString2 = funcProto2.toString;
  var hasOwnProperty2 = objectProto3.hasOwnProperty;
  var reIsNative = RegExp("^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  function baseIsNative(value2) {
    if (!isObject_default(value2) || isMasked_default(value2)) {
      return false;
    }
    var pattern = isFunction_default(value2) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource_default(value2));
  }
  var baseIsNative_default = baseIsNative;

  // node_modules/lodash-es/_getValue.js
  function getValue(object, key) {
    return object == null ? void 0 : object[key];
  }
  var getValue_default = getValue;

  // node_modules/lodash-es/_getNative.js
  function getNative(object, key) {
    var value2 = getValue_default(object, key);
    return baseIsNative_default(value2) ? value2 : void 0;
  }
  var getNative_default = getNative;

  // node_modules/lodash-es/_Map.js
  var Map2 = getNative_default(root_default, "Map");
  var Map_default = Map2;

  // node_modules/lodash-es/_nativeCreate.js
  var nativeCreate = getNative_default(Object, "create");
  var nativeCreate_default = nativeCreate;

  // node_modules/lodash-es/_hashClear.js
  function hashClear() {
    this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
    this.size = 0;
  }
  var hashClear_default = hashClear;

  // node_modules/lodash-es/_hashDelete.js
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  var hashDelete_default = hashDelete;

  // node_modules/lodash-es/_hashGet.js
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var objectProto4 = Object.prototype;
  var hasOwnProperty3 = objectProto4.hasOwnProperty;
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate_default) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty3.call(data, key) ? data[key] : void 0;
  }
  var hashGet_default = hashGet;

  // node_modules/lodash-es/_hashHas.js
  var objectProto5 = Object.prototype;
  var hasOwnProperty4 = objectProto5.hasOwnProperty;
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty4.call(data, key);
  }
  var hashHas_default = hashHas;

  // node_modules/lodash-es/_hashSet.js
  var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
  function hashSet(key, value2) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate_default && value2 === void 0 ? HASH_UNDEFINED2 : value2;
    return this;
  }
  var hashSet_default = hashSet;

  // node_modules/lodash-es/_Hash.js
  function Hash(entries) {
    var index = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length2) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  Hash.prototype.clear = hashClear_default;
  Hash.prototype["delete"] = hashDelete_default;
  Hash.prototype.get = hashGet_default;
  Hash.prototype.has = hashHas_default;
  Hash.prototype.set = hashSet_default;
  var Hash_default = Hash;

  // node_modules/lodash-es/_mapCacheClear.js
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      hash: new Hash_default(),
      map: new (Map_default || ListCache_default)(),
      string: new Hash_default()
    };
  }
  var mapCacheClear_default = mapCacheClear;

  // node_modules/lodash-es/_isKeyable.js
  function isKeyable(value2) {
    var type = typeof value2;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
  }
  var isKeyable_default = isKeyable;

  // node_modules/lodash-es/_getMapData.js
  function getMapData(map2, key) {
    var data = map2.__data__;
    return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  var getMapData_default = getMapData;

  // node_modules/lodash-es/_mapCacheDelete.js
  function mapCacheDelete(key) {
    var result = getMapData_default(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  var mapCacheDelete_default = mapCacheDelete;

  // node_modules/lodash-es/_mapCacheGet.js
  function mapCacheGet(key) {
    return getMapData_default(this, key).get(key);
  }
  var mapCacheGet_default = mapCacheGet;

  // node_modules/lodash-es/_mapCacheHas.js
  function mapCacheHas(key) {
    return getMapData_default(this, key).has(key);
  }
  var mapCacheHas_default = mapCacheHas;

  // node_modules/lodash-es/_mapCacheSet.js
  function mapCacheSet(key, value2) {
    var data = getMapData_default(this, key), size = data.size;
    data.set(key, value2);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  var mapCacheSet_default = mapCacheSet;

  // node_modules/lodash-es/_MapCache.js
  function MapCache(entries) {
    var index = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length2) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  MapCache.prototype.clear = mapCacheClear_default;
  MapCache.prototype["delete"] = mapCacheDelete_default;
  MapCache.prototype.get = mapCacheGet_default;
  MapCache.prototype.has = mapCacheHas_default;
  MapCache.prototype.set = mapCacheSet_default;
  var MapCache_default = MapCache;

  // node_modules/lodash-es/_stackSet.js
  var LARGE_ARRAY_SIZE = 200;
  function stackSet(key, value2) {
    var data = this.__data__;
    if (data instanceof ListCache_default) {
      var pairs = data.__data__;
      if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value2]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache_default(pairs);
    }
    data.set(key, value2);
    this.size = data.size;
    return this;
  }
  var stackSet_default = stackSet;

  // node_modules/lodash-es/_Stack.js
  function Stack(entries) {
    var data = this.__data__ = new ListCache_default(entries);
    this.size = data.size;
  }
  Stack.prototype.clear = stackClear_default;
  Stack.prototype["delete"] = stackDelete_default;
  Stack.prototype.get = stackGet_default;
  Stack.prototype.has = stackHas_default;
  Stack.prototype.set = stackSet_default;
  var Stack_default = Stack;

  // node_modules/lodash-es/_arrayEach.js
  function arrayEach(array, iteratee) {
    var index = -1, length2 = array == null ? 0 : array.length;
    while (++index < length2) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  var arrayEach_default = arrayEach;

  // node_modules/lodash-es/_defineProperty.js
  var defineProperty = function() {
    try {
      var func = getNative_default(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e) {
    }
  }();
  var defineProperty_default = defineProperty;

  // node_modules/lodash-es/_baseAssignValue.js
  function baseAssignValue(object, key, value2) {
    if (key == "__proto__" && defineProperty_default) {
      defineProperty_default(object, key, {
        configurable: true,
        enumerable: true,
        value: value2,
        writable: true
      });
    } else {
      object[key] = value2;
    }
  }
  var baseAssignValue_default = baseAssignValue;

  // node_modules/lodash-es/_assignValue.js
  var objectProto6 = Object.prototype;
  var hasOwnProperty5 = objectProto6.hasOwnProperty;
  function assignValue(object, key, value2) {
    var objValue = object[key];
    if (!(hasOwnProperty5.call(object, key) && eq_default(objValue, value2)) || value2 === void 0 && !(key in object)) {
      baseAssignValue_default(object, key, value2);
    }
  }
  var assignValue_default = assignValue;

  // node_modules/lodash-es/_copyObject.js
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length2 = props.length;
    while (++index < length2) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      if (newValue === void 0) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue_default(object, key, newValue);
      } else {
        assignValue_default(object, key, newValue);
      }
    }
    return object;
  }
  var copyObject_default = copyObject;

  // node_modules/lodash-es/_baseTimes.js
  function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  var baseTimes_default = baseTimes;

  // node_modules/lodash-es/isObjectLike.js
  function isObjectLike(value2) {
    return value2 != null && typeof value2 == "object";
  }
  var isObjectLike_default = isObjectLike;

  // node_modules/lodash-es/_baseIsArguments.js
  var argsTag = "[object Arguments]";
  function baseIsArguments(value2) {
    return isObjectLike_default(value2) && baseGetTag_default(value2) == argsTag;
  }
  var baseIsArguments_default = baseIsArguments;

  // node_modules/lodash-es/isArguments.js
  var objectProto7 = Object.prototype;
  var hasOwnProperty6 = objectProto7.hasOwnProperty;
  var propertyIsEnumerable = objectProto7.propertyIsEnumerable;
  var isArguments = baseIsArguments_default(function() {
    return arguments;
  }()) ? baseIsArguments_default : function(value2) {
    return isObjectLike_default(value2) && hasOwnProperty6.call(value2, "callee") && !propertyIsEnumerable.call(value2, "callee");
  };
  var isArguments_default = isArguments;

  // node_modules/lodash-es/isArray.js
  var isArray = Array.isArray;
  var isArray_default = isArray;

  // node_modules/lodash-es/stubFalse.js
  function stubFalse() {
    return false;
  }
  var stubFalse_default = stubFalse;

  // node_modules/lodash-es/isBuffer.js
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer2 = moduleExports ? root_default.Buffer : void 0;
  var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
  var isBuffer = nativeIsBuffer || stubFalse_default;
  var isBuffer_default = isBuffer;

  // node_modules/lodash-es/_isIndex.js
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex(value2, length2) {
    var type = typeof value2;
    length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
    return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length2);
  }
  var isIndex_default = isIndex;

  // node_modules/lodash-es/isLength.js
  var MAX_SAFE_INTEGER2 = 9007199254740991;
  function isLength(value2) {
    return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER2;
  }
  var isLength_default = isLength;

  // node_modules/lodash-es/_baseIsTypedArray.js
  var argsTag2 = "[object Arguments]";
  var arrayTag = "[object Array]";
  var boolTag = "[object Boolean]";
  var dateTag = "[object Date]";
  var errorTag = "[object Error]";
  var funcTag2 = "[object Function]";
  var mapTag = "[object Map]";
  var numberTag = "[object Number]";
  var objectTag = "[object Object]";
  var regexpTag = "[object RegExp]";
  var setTag = "[object Set]";
  var stringTag = "[object String]";
  var weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]";
  var dataViewTag = "[object DataView]";
  var float32Tag = "[object Float32Array]";
  var float64Tag = "[object Float64Array]";
  var int8Tag = "[object Int8Array]";
  var int16Tag = "[object Int16Array]";
  var int32Tag = "[object Int32Array]";
  var uint8Tag = "[object Uint8Array]";
  var uint8ClampedTag = "[object Uint8ClampedArray]";
  var uint16Tag = "[object Uint16Array]";
  var uint32Tag = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  function baseIsTypedArray(value2) {
    return isObjectLike_default(value2) && isLength_default(value2.length) && !!typedArrayTags[baseGetTag_default(value2)];
  }
  var baseIsTypedArray_default = baseIsTypedArray;

  // node_modules/lodash-es/_baseUnary.js
  function baseUnary(func) {
    return function(value2) {
      return func(value2);
    };
  }
  var baseUnary_default = baseUnary;

  // node_modules/lodash-es/_nodeUtil.js
  var freeExports2 = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule2 = freeExports2 && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
  var freeProcess = moduleExports2 && freeGlobal_default.process;
  var nodeUtil = function() {
    try {
      var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  var nodeUtil_default = nodeUtil;

  // node_modules/lodash-es/isTypedArray.js
  var nodeIsTypedArray = nodeUtil_default && nodeUtil_default.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default;
  var isTypedArray_default = isTypedArray;

  // node_modules/lodash-es/_arrayLikeKeys.js
  var objectProto8 = Object.prototype;
  var hasOwnProperty7 = objectProto8.hasOwnProperty;
  function arrayLikeKeys(value2, inherited) {
    var isArr = isArray_default(value2), isArg = !isArr && isArguments_default(value2), isBuff = !isArr && !isArg && isBuffer_default(value2), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value2), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value2.length, String) : [], length2 = result.length;
    for (var key in value2) {
      if ((inherited || hasOwnProperty7.call(value2, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex_default(key, length2)))) {
        result.push(key);
      }
    }
    return result;
  }
  var arrayLikeKeys_default = arrayLikeKeys;

  // node_modules/lodash-es/_isPrototype.js
  var objectProto9 = Object.prototype;
  function isPrototype(value2) {
    var Ctor = value2 && value2.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto9;
    return value2 === proto;
  }
  var isPrototype_default = isPrototype;

  // node_modules/lodash-es/_overArg.js
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  var overArg_default = overArg;

  // node_modules/lodash-es/_nativeKeys.js
  var nativeKeys = overArg_default(Object.keys, Object);
  var nativeKeys_default = nativeKeys;

  // node_modules/lodash-es/_baseKeys.js
  var objectProto10 = Object.prototype;
  var hasOwnProperty8 = objectProto10.hasOwnProperty;
  function baseKeys(object) {
    if (!isPrototype_default(object)) {
      return nativeKeys_default(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty8.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  var baseKeys_default = baseKeys;

  // node_modules/lodash-es/isArrayLike.js
  function isArrayLike(value2) {
    return value2 != null && isLength_default(value2.length) && !isFunction_default(value2);
  }
  var isArrayLike_default = isArrayLike;

  // node_modules/lodash-es/keys.js
  function keys(object) {
    return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
  }
  var keys_default = keys;

  // node_modules/lodash-es/_baseAssign.js
  function baseAssign(object, source) {
    return object && copyObject_default(source, keys_default(source), object);
  }
  var baseAssign_default = baseAssign;

  // node_modules/lodash-es/_nativeKeysIn.js
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }
  var nativeKeysIn_default = nativeKeysIn;

  // node_modules/lodash-es/_baseKeysIn.js
  var objectProto11 = Object.prototype;
  var hasOwnProperty9 = objectProto11.hasOwnProperty;
  function baseKeysIn(object) {
    if (!isObject_default(object)) {
      return nativeKeysIn_default(object);
    }
    var isProto = isPrototype_default(object), result = [];
    for (var key in object) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty9.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  var baseKeysIn_default = baseKeysIn;

  // node_modules/lodash-es/keysIn.js
  function keysIn(object) {
    return isArrayLike_default(object) ? arrayLikeKeys_default(object, true) : baseKeysIn_default(object);
  }
  var keysIn_default = keysIn;

  // node_modules/lodash-es/_baseAssignIn.js
  function baseAssignIn(object, source) {
    return object && copyObject_default(source, keysIn_default(source), object);
  }
  var baseAssignIn_default = baseAssignIn;

  // node_modules/lodash-es/_cloneBuffer.js
  var freeExports3 = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule3 = freeExports3 && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports3 = freeModule3 && freeModule3.exports === freeExports3;
  var Buffer3 = moduleExports3 ? root_default.Buffer : void 0;
  var allocUnsafe = Buffer3 ? Buffer3.allocUnsafe : void 0;
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length2 = buffer.length, result = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
    buffer.copy(result);
    return result;
  }
  var cloneBuffer_default = cloneBuffer;

  // node_modules/lodash-es/_copyArray.js
  function copyArray(source, array) {
    var index = -1, length2 = source.length;
    array || (array = Array(length2));
    while (++index < length2) {
      array[index] = source[index];
    }
    return array;
  }
  var copyArray_default = copyArray;

  // node_modules/lodash-es/_arrayFilter.js
  function arrayFilter(array, predicate) {
    var index = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result = [];
    while (++index < length2) {
      var value2 = array[index];
      if (predicate(value2, index, array)) {
        result[resIndex++] = value2;
      }
    }
    return result;
  }
  var arrayFilter_default = arrayFilter;

  // node_modules/lodash-es/stubArray.js
  function stubArray() {
    return [];
  }
  var stubArray_default = stubArray;

  // node_modules/lodash-es/_getSymbols.js
  var objectProto12 = Object.prototype;
  var propertyIsEnumerable2 = objectProto12.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray_default : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter_default(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable2.call(object, symbol);
    });
  };
  var getSymbols_default = getSymbols;

  // node_modules/lodash-es/_copySymbols.js
  function copySymbols(source, object) {
    return copyObject_default(source, getSymbols_default(source), object);
  }
  var copySymbols_default = copySymbols;

  // node_modules/lodash-es/_arrayPush.js
  function arrayPush(array, values) {
    var index = -1, length2 = values.length, offset = array.length;
    while (++index < length2) {
      array[offset + index] = values[index];
    }
    return array;
  }
  var arrayPush_default = arrayPush;

  // node_modules/lodash-es/_getPrototype.js
  var getPrototype = overArg_default(Object.getPrototypeOf, Object);
  var getPrototype_default = getPrototype;

  // node_modules/lodash-es/_getSymbolsIn.js
  var nativeGetSymbols2 = Object.getOwnPropertySymbols;
  var getSymbolsIn = !nativeGetSymbols2 ? stubArray_default : function(object) {
    var result = [];
    while (object) {
      arrayPush_default(result, getSymbols_default(object));
      object = getPrototype_default(object);
    }
    return result;
  };
  var getSymbolsIn_default = getSymbolsIn;

  // node_modules/lodash-es/_copySymbolsIn.js
  function copySymbolsIn(source, object) {
    return copyObject_default(source, getSymbolsIn_default(source), object);
  }
  var copySymbolsIn_default = copySymbolsIn;

  // node_modules/lodash-es/_baseGetAllKeys.js
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_default(object) ? result : arrayPush_default(result, symbolsFunc(object));
  }
  var baseGetAllKeys_default = baseGetAllKeys;

  // node_modules/lodash-es/_getAllKeys.js
  function getAllKeys(object) {
    return baseGetAllKeys_default(object, keys_default, getSymbols_default);
  }
  var getAllKeys_default = getAllKeys;

  // node_modules/lodash-es/_getAllKeysIn.js
  function getAllKeysIn(object) {
    return baseGetAllKeys_default(object, keysIn_default, getSymbolsIn_default);
  }
  var getAllKeysIn_default = getAllKeysIn;

  // node_modules/lodash-es/_DataView.js
  var DataView2 = getNative_default(root_default, "DataView");
  var DataView_default = DataView2;

  // node_modules/lodash-es/_Promise.js
  var Promise2 = getNative_default(root_default, "Promise");
  var Promise_default = Promise2;

  // node_modules/lodash-es/_Set.js
  var Set2 = getNative_default(root_default, "Set");
  var Set_default = Set2;

  // node_modules/lodash-es/_WeakMap.js
  var WeakMap = getNative_default(root_default, "WeakMap");
  var WeakMap_default = WeakMap;

  // node_modules/lodash-es/_getTag.js
  var mapTag2 = "[object Map]";
  var objectTag2 = "[object Object]";
  var promiseTag = "[object Promise]";
  var setTag2 = "[object Set]";
  var weakMapTag2 = "[object WeakMap]";
  var dataViewTag2 = "[object DataView]";
  var dataViewCtorString = toSource_default(DataView_default);
  var mapCtorString = toSource_default(Map_default);
  var promiseCtorString = toSource_default(Promise_default);
  var setCtorString = toSource_default(Set_default);
  var weakMapCtorString = toSource_default(WeakMap_default);
  var getTag = baseGetTag_default;
  if (DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag2 || Map_default && getTag(new Map_default()) != mapTag2 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag2 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) {
    getTag = function(value2) {
      var result = baseGetTag_default(value2), Ctor = result == objectTag2 ? value2.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag2;
          case mapCtorString:
            return mapTag2;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag2;
          case weakMapCtorString:
            return weakMapTag2;
        }
      }
      return result;
    };
  }
  var getTag_default = getTag;

  // node_modules/lodash-es/_initCloneArray.js
  var objectProto13 = Object.prototype;
  var hasOwnProperty10 = objectProto13.hasOwnProperty;
  function initCloneArray(array) {
    var length2 = array.length, result = new array.constructor(length2);
    if (length2 && typeof array[0] == "string" && hasOwnProperty10.call(array, "index")) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }
  var initCloneArray_default = initCloneArray;

  // node_modules/lodash-es/_Uint8Array.js
  var Uint8Array2 = root_default.Uint8Array;
  var Uint8Array_default = Uint8Array2;

  // node_modules/lodash-es/_cloneArrayBuffer.js
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array_default(result).set(new Uint8Array_default(arrayBuffer));
    return result;
  }
  var cloneArrayBuffer_default = cloneArrayBuffer;

  // node_modules/lodash-es/_cloneDataView.js
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer_default(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  var cloneDataView_default = cloneDataView;

  // node_modules/lodash-es/_cloneRegExp.js
  var reFlags = /\w*$/;
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }
  var cloneRegExp_default = cloneRegExp;

  // node_modules/lodash-es/_cloneSymbol.js
  var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }
  var cloneSymbol_default = cloneSymbol;

  // node_modules/lodash-es/_cloneTypedArray.js
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  var cloneTypedArray_default = cloneTypedArray;

  // node_modules/lodash-es/_initCloneByTag.js
  var boolTag2 = "[object Boolean]";
  var dateTag2 = "[object Date]";
  var mapTag3 = "[object Map]";
  var numberTag2 = "[object Number]";
  var regexpTag2 = "[object RegExp]";
  var setTag3 = "[object Set]";
  var stringTag2 = "[object String]";
  var symbolTag = "[object Symbol]";
  var arrayBufferTag2 = "[object ArrayBuffer]";
  var dataViewTag3 = "[object DataView]";
  var float32Tag2 = "[object Float32Array]";
  var float64Tag2 = "[object Float64Array]";
  var int8Tag2 = "[object Int8Array]";
  var int16Tag2 = "[object Int16Array]";
  var int32Tag2 = "[object Int32Array]";
  var uint8Tag2 = "[object Uint8Array]";
  var uint8ClampedTag2 = "[object Uint8ClampedArray]";
  var uint16Tag2 = "[object Uint16Array]";
  var uint32Tag2 = "[object Uint32Array]";
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag2:
        return cloneArrayBuffer_default(object);
      case boolTag2:
      case dateTag2:
        return new Ctor(+object);
      case dataViewTag3:
        return cloneDataView_default(object, isDeep);
      case float32Tag2:
      case float64Tag2:
      case int8Tag2:
      case int16Tag2:
      case int32Tag2:
      case uint8Tag2:
      case uint8ClampedTag2:
      case uint16Tag2:
      case uint32Tag2:
        return cloneTypedArray_default(object, isDeep);
      case mapTag3:
        return new Ctor();
      case numberTag2:
      case stringTag2:
        return new Ctor(object);
      case regexpTag2:
        return cloneRegExp_default(object);
      case setTag3:
        return new Ctor();
      case symbolTag:
        return cloneSymbol_default(object);
    }
  }
  var initCloneByTag_default = initCloneByTag;

  // node_modules/lodash-es/_baseCreate.js
  var objectCreate = Object.create;
  var baseCreate = function() {
    function object() {
    }
    return function(proto) {
      if (!isObject_default(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = void 0;
      return result;
    };
  }();
  var baseCreate_default = baseCreate;

  // node_modules/lodash-es/_initCloneObject.js
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype_default(object) ? baseCreate_default(getPrototype_default(object)) : {};
  }
  var initCloneObject_default = initCloneObject;

  // node_modules/lodash-es/_baseIsMap.js
  var mapTag4 = "[object Map]";
  function baseIsMap(value2) {
    return isObjectLike_default(value2) && getTag_default(value2) == mapTag4;
  }
  var baseIsMap_default = baseIsMap;

  // node_modules/lodash-es/isMap.js
  var nodeIsMap = nodeUtil_default && nodeUtil_default.isMap;
  var isMap = nodeIsMap ? baseUnary_default(nodeIsMap) : baseIsMap_default;
  var isMap_default = isMap;

  // node_modules/lodash-es/_baseIsSet.js
  var setTag4 = "[object Set]";
  function baseIsSet(value2) {
    return isObjectLike_default(value2) && getTag_default(value2) == setTag4;
  }
  var baseIsSet_default = baseIsSet;

  // node_modules/lodash-es/isSet.js
  var nodeIsSet = nodeUtil_default && nodeUtil_default.isSet;
  var isSet = nodeIsSet ? baseUnary_default(nodeIsSet) : baseIsSet_default;
  var isSet_default = isSet;

  // node_modules/lodash-es/_baseClone.js
  var CLONE_DEEP_FLAG = 1;
  var CLONE_FLAT_FLAG = 2;
  var CLONE_SYMBOLS_FLAG = 4;
  var argsTag3 = "[object Arguments]";
  var arrayTag2 = "[object Array]";
  var boolTag3 = "[object Boolean]";
  var dateTag3 = "[object Date]";
  var errorTag2 = "[object Error]";
  var funcTag3 = "[object Function]";
  var genTag2 = "[object GeneratorFunction]";
  var mapTag5 = "[object Map]";
  var numberTag3 = "[object Number]";
  var objectTag3 = "[object Object]";
  var regexpTag3 = "[object RegExp]";
  var setTag5 = "[object Set]";
  var stringTag3 = "[object String]";
  var symbolTag2 = "[object Symbol]";
  var weakMapTag3 = "[object WeakMap]";
  var arrayBufferTag3 = "[object ArrayBuffer]";
  var dataViewTag4 = "[object DataView]";
  var float32Tag3 = "[object Float32Array]";
  var float64Tag3 = "[object Float64Array]";
  var int8Tag3 = "[object Int8Array]";
  var int16Tag3 = "[object Int16Array]";
  var int32Tag3 = "[object Int32Array]";
  var uint8Tag3 = "[object Uint8Array]";
  var uint8ClampedTag3 = "[object Uint8ClampedArray]";
  var uint16Tag3 = "[object Uint16Array]";
  var uint32Tag3 = "[object Uint32Array]";
  var cloneableTags = {};
  cloneableTags[argsTag3] = cloneableTags[arrayTag2] = cloneableTags[arrayBufferTag3] = cloneableTags[dataViewTag4] = cloneableTags[boolTag3] = cloneableTags[dateTag3] = cloneableTags[float32Tag3] = cloneableTags[float64Tag3] = cloneableTags[int8Tag3] = cloneableTags[int16Tag3] = cloneableTags[int32Tag3] = cloneableTags[mapTag5] = cloneableTags[numberTag3] = cloneableTags[objectTag3] = cloneableTags[regexpTag3] = cloneableTags[setTag5] = cloneableTags[stringTag3] = cloneableTags[symbolTag2] = cloneableTags[uint8Tag3] = cloneableTags[uint8ClampedTag3] = cloneableTags[uint16Tag3] = cloneableTags[uint32Tag3] = true;
  cloneableTags[errorTag2] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = false;
  function baseClone(value2, bitmask, customizer, key, object, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
    if (customizer) {
      result = object ? customizer(value2, key, object, stack) : customizer(value2);
    }
    if (result !== void 0) {
      return result;
    }
    if (!isObject_default(value2)) {
      return value2;
    }
    var isArr = isArray_default(value2);
    if (isArr) {
      result = initCloneArray_default(value2);
      if (!isDeep) {
        return copyArray_default(value2, result);
      }
    } else {
      var tag = getTag_default(value2), isFunc = tag == funcTag3 || tag == genTag2;
      if (isBuffer_default(value2)) {
        return cloneBuffer_default(value2, isDeep);
      }
      if (tag == objectTag3 || tag == argsTag3 || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject_default(value2);
        if (!isDeep) {
          return isFlat ? copySymbolsIn_default(value2, baseAssignIn_default(result, value2)) : copySymbols_default(value2, baseAssign_default(result, value2));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value2 : {};
        }
        result = initCloneByTag_default(value2, tag, isDeep);
      }
    }
    stack || (stack = new Stack_default());
    var stacked = stack.get(value2);
    if (stacked) {
      return stacked;
    }
    stack.set(value2, result);
    if (isSet_default(value2)) {
      value2.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value2, stack));
      });
    } else if (isMap_default(value2)) {
      value2.forEach(function(subValue, key2) {
        result.set(key2, baseClone(subValue, bitmask, customizer, key2, value2, stack));
      });
    }
    var keysFunc = isFull ? isFlat ? getAllKeysIn_default : getAllKeys_default : isFlat ? keysIn_default : keys_default;
    var props = isArr ? void 0 : keysFunc(value2);
    arrayEach_default(props || value2, function(subValue, key2) {
      if (props) {
        key2 = subValue;
        subValue = value2[key2];
      }
      assignValue_default(result, key2, baseClone(subValue, bitmask, customizer, key2, value2, stack));
    });
    return result;
  }
  var baseClone_default = baseClone;

  // node_modules/lodash-es/cloneDeep.js
  var CLONE_DEEP_FLAG2 = 1;
  var CLONE_SYMBOLS_FLAG2 = 4;
  function cloneDeep(value2) {
    return baseClone_default(value2, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG2);
  }
  var cloneDeep_default = cloneDeep;

  // lib/core/errors/a11y-engine-error.js
  var A11yEngineError = class {
    constructor(message, error) {
      this.message = message;
      this.error = error;
    }
  };
  var a11y_engine_error_default = A11yEngineError;

  // lib/core/errors/error-types.js
  var ErrorTypes = Object.freeze({
    CHECK_ERROR: "check_errors",
    RUNTIME_ERROR: "runtime_errors",
    CONFIGURATION_ERROR: "configuration_errors",
    METADATA_ERROR: "metadata_errors",
    INSTRUMENTATION_ERROR: "instrumentation_errors",
    SERVER_ERROR: "server_errors",
    ABORT_ERROR: "abort_errors"
  });
  var error_types_default = ErrorTypes;

  // lib/core/errors/error-handler.js
  var ErrorHandler = {
    errors: {},
    addCheckError(checkName = "anonymous", err) {
      try {
        let error = this.errors[error_types_default.CHECK_ERROR] ? this.errors[error_types_default.CHECK_ERROR] : {};
        let check_error = error[checkName] ? error[checkName] : [];
        if (err) {
          check_error.push(new a11y_engine_error_default(err.message, err.stack));
        }
        error[checkName] = check_error;
        this.errors[error_types_default.CHECK_ERROR] = error;
      } catch (e) {
        console.error("A11y Engine Error - Error in addCheckError", e);
      }
    },
    getCheckErrors() {
      return this.errors[error_types_default.CHECK_ERROR];
    },
    clearErrors() {
      try {
        this.errors = {};
      } catch (err) {
        console.error("A11y Engine Error - Error in clearErrors", err);
      }
    },
    addNonCheckError(type, message, err) {
      try {
        let error = this.errors[type] ? this.errors[type] : [];
        if (err) {
          error.push(new a11y_engine_error_default(message, err.stack));
        } else {
          error.push(new a11y_engine_error_default(message));
        }
        this.errors[type] = error;
      } catch (e) {
        console.error("A11y Engine Error - Error in addNonCheckError", e);
      }
    },
    addCustomError(type, err) {
      try {
        this.errors[type] = this.errors[type] || [];
        this.errors[type].push(err);
      } catch (e) {
        console.error("A11y Engine Error - Error in addCustomError", e);
      }
    }
  };
  var error_handler_default = ErrorHandler;

  // lib/core/base/constants.js
  var CONSTANTS = {
    A11Y_ENGINE: "a11y_engine",
    A11Y_ENGINE_TAG: "a11y-engine",
    A11Y_ENGINE_STATS: "a11y_engine_stats",
    A11Y_ENGINE_SCAN: "a11y_engine_scan",
    MARK_A11Y_ENGINE_START: "mark_a11y_engine_start",
    MARK_A11Y_ENGINE_END: "mark_a11y_engine_end",
    A11Y_ENGINE_EXPERIMENTAL: "a11y-engine-experimental",
    EXPERIMENTAL: "experimental",
    EDS_BATCH_SIZE: 10,
    ADVANCE_RULE_TAG: "advanced",
    ABORT: "abort",
    WEBSITE_SCANNER: "WEBSITE_SCANNER"
  };
  var constants_default = CONSTANTS;

  // lib/core/base/performance-metrics.js
  var PerformanceMetrics = {
    metric: {},
    start() {
      try {
        this.mark(constants_default.MARK_A11Y_ENGINE_START);
      } catch (err) {
        error_handler_default.addNonCheckError(error_types_default.INSTRUMENTATION_ERROR, "Error in PerformanceMetrics start", err);
      }
    },
    end() {
      try {
        this.mark(constants_default.MARK_A11Y_ENGINE_END);
        this.measure(constants_default.A11Y_ENGINE_SCAN, {
          detail: {
            type: "scan"
          },
          start: constants_default.MARK_A11Y_ENGINE_START,
          end: constants_default.MARK_A11Y_ENGINE_END
        });
      } catch (err) {
        error_handler_default.addNonCheckError(error_types_default.INSTRUMENTATION_ERROR, "Error in PerformanceMetrics end", err);
      }
    },
    computePerformanceMetrics() {
      try {
        if (window.performance && window.performance.getEntriesByType !== void 0) {
          var a11yStart = window.performance.getEntriesByName(constants_default.MARK_A11Y_ENGINE_START)[0];
          var measures = window.performance.getEntriesByType("measure").filter((measure) => measure.startTime >= a11yStart.startTime);
          for (let i2 = 0; i2 < measures.length; i2++) {
            this.addRuleMetric(measures[i2]);
          }
          this.metric[constants_default.A11Y_ENGINE_SCAN] = window.performance.getEntriesByName(constants_default.A11Y_ENGINE_SCAN)[0].duration.toFixed(2);
        }
      } catch (err) {
        error_handler_default.addNonCheckError(error_types_default.INSTRUMENTATION_ERROR, "Error in PerformanceMetrics computePerformanceMetrics", err);
      }
    },
    addRuleMetric(measure) {
      try {
        if (measure.detail && measure.detail.rule && measure.detail.type === "rule") {
          let ruleMetrics = this.metric["rules"] || {};
          ruleMetrics[measure.detail.rule] = ruleMetrics[measure.detail.rule] || {};
          ruleMetrics[measure.detail.rule][measure.name] = measure.duration.toFixed(2);
          this.metric["rules"] = ruleMetrics;
        }
      } catch (err) {
        error_handler_default.addNonCheckError(error_types_default.INSTRUMENTATION_ERROR, "Error in PerformanceMetrics addRuleMetric", err);
      }
    },
    mark(markName) {
      try {
        if (window.performance && window.performance.mark !== void 0) {
          window.performance.mark(markName);
        }
      } catch (err) {
        error_handler_default.addNonCheckError(error_types_default.INSTRUMENTATION_ERROR, "Error in PerformanceMetrics mark", err);
      }
    },
    measure(measureName, detailsObj) {
      try {
        if (window.performance && window.performance.measure !== void 0) {
          window.performance.measure(measureName, detailsObj);
        }
      } catch (err) {
        error_handler_default.addNonCheckError(error_types_default.INSTRUMENTATION_ERROR, "Error in PerformanceMetrics measure", err);
      }
    },
    getMetrics() {
      try {
        return this.metric;
      } catch (err) {
        error_handler_default.addNonCheckError(error_types_default.INSTRUMENTATION_ERROR, "Error in PerformanceMetrics getMetrics", err);
      }
    },
    clear() {
      try {
        this.metric = {};
        window.performance.clearMarks();
        window.performance.clearMeasures();
      } catch (err) {
        error_handler_default.addNonCheckError(error_types_default.INSTRUMENTATION_ERROR, "Error in PerformanceMetrics clear", err);
      }
    }
  };
  var performance_metrics_default = PerformanceMetrics;

  // lib/core/base/report-result-status.js
  var ReportResultStatus = Object.freeze({
    SUCCESS: "SUCCESS",
    FAILURE: "FAILURE",
    PARTIAL_SUCCESS: "PARTIAL_SUCCESS",
    SUCCESS_WITH_WARNING: "SUCCESS_WITH_WARNING"
  });
  var report_result_status_default = ReportResultStatus;

  // node_modules/axios/lib/helpers/bind.js
  "use strict";
  function bind(fn, thisArg) {
    return function wrap() {
      return fn.apply(thisArg, arguments);
    };
  }

  // node_modules/axios/lib/utils.js
  "use strict";
  var {toString} = Object.prototype;
  var {getPrototypeOf} = Object;
  var kindOf = ((cache2) => (thing) => {
    const str = toString.call(thing);
    return cache2[str] || (cache2[str] = str.slice(8, -1).toLowerCase());
  })(Object.create(null));
  var kindOfTest = (type) => {
    type = type.toLowerCase();
    return (thing) => kindOf(thing) === type;
  };
  var typeOfTest = (type) => (thing) => typeof thing === type;
  var {isArray: isArray2} = Array;
  var isUndefined = typeOfTest("undefined");
  function isBuffer2(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction2(val.constructor.isBuffer) && val.constructor.isBuffer(val);
  }
  var isArrayBuffer = kindOfTest("ArrayBuffer");
  function isArrayBufferView(val) {
    let result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && isArrayBuffer(val.buffer);
    }
    return result;
  }
  var isString = typeOfTest("string");
  var isFunction2 = typeOfTest("function");
  var isNumber = typeOfTest("number");
  var isObject2 = (thing) => thing !== null && typeof thing === "object";
  var isBoolean = (thing) => thing === true || thing === false;
  var isPlainObject = (val) => {
    if (kindOf(val) !== "object") {
      return false;
    }
    const prototype3 = getPrototypeOf(val);
    return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
  };
  var isDate = kindOfTest("Date");
  var isFile = kindOfTest("File");
  var isBlob = kindOfTest("Blob");
  var isFileList = kindOfTest("FileList");
  var isStream = (val) => isObject2(val) && isFunction2(val.pipe);
  var isFormData = (thing) => {
    let kind;
    return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction2(thing.append) && ((kind = kindOf(thing)) === "formdata" || kind === "object" && isFunction2(thing.toString) && thing.toString() === "[object FormData]"));
  };
  var isURLSearchParams = kindOfTest("URLSearchParams");
  var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
  var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  function forEach(obj, fn, {allOwnKeys = false} = {}) {
    if (obj === null || typeof obj === "undefined") {
      return;
    }
    let i2;
    let l;
    if (typeof obj !== "object") {
      obj = [obj];
    }
    if (isArray2(obj)) {
      for (i2 = 0, l = obj.length; i2 < l; i2++) {
        fn.call(null, obj[i2], i2, obj);
      }
    } else {
      const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
      const len = keys2.length;
      let key;
      for (i2 = 0; i2 < len; i2++) {
        key = keys2[i2];
        fn.call(null, obj[key], key, obj);
      }
    }
  }
  function findKey(obj, key) {
    key = key.toLowerCase();
    const keys2 = Object.keys(obj);
    let i2 = keys2.length;
    let _key;
    while (i2-- > 0) {
      _key = keys2[i2];
      if (key === _key.toLowerCase()) {
        return _key;
      }
    }
    return null;
  }
  var _global = (() => {
    if (typeof globalThis !== "undefined")
      return globalThis;
    return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
  })();
  var isContextDefined = (context) => !isUndefined(context) && context !== _global;
  function merge() {
    const {caseless} = isContextDefined(this) && this || {};
    const result = {};
    const assignValue2 = (val, key) => {
      const targetKey = caseless && findKey(result, key) || key;
      if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
        result[targetKey] = merge(result[targetKey], val);
      } else if (isPlainObject(val)) {
        result[targetKey] = merge({}, val);
      } else if (isArray2(val)) {
        result[targetKey] = val.slice();
      } else {
        result[targetKey] = val;
      }
    };
    for (let i2 = 0, l = arguments.length; i2 < l; i2++) {
      arguments[i2] && forEach(arguments[i2], assignValue2);
    }
    return result;
  }
  var extend = (a, b, thisArg, {allOwnKeys} = {}) => {
    forEach(b, (val, key) => {
      if (thisArg && isFunction2(val)) {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    }, {allOwnKeys});
    return a;
  };
  var stripBOM = (content) => {
    if (content.charCodeAt(0) === 65279) {
      content = content.slice(1);
    }
    return content;
  };
  var inherits = (constructor, superConstructor, props, descriptors2) => {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, "super", {
      value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
  };
  var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
    let props;
    let i2;
    let prop;
    const merged = {};
    destObj = destObj || {};
    if (sourceObj == null)
      return destObj;
    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i2 = props.length;
      while (i2-- > 0) {
        prop = props[i2];
        if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
    } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
  };
  var endsWith = (str, searchString, position) => {
    str = String(str);
    if (position === void 0 || position > str.length) {
      position = str.length;
    }
    position -= searchString.length;
    const lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };
  var toArray = (thing) => {
    if (!thing)
      return null;
    if (isArray2(thing))
      return thing;
    let i2 = thing.length;
    if (!isNumber(i2))
      return null;
    const arr = new Array(i2);
    while (i2-- > 0) {
      arr[i2] = thing[i2];
    }
    return arr;
  };
  var isTypedArray2 = ((TypedArray) => {
    return (thing) => {
      return TypedArray && thing instanceof TypedArray;
    };
  })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
  var forEachEntry = (obj, fn) => {
    const generator = obj && obj[Symbol.iterator];
    const iterator = generator.call(obj);
    let result;
    while ((result = iterator.next()) && !result.done) {
      const pair = result.value;
      fn.call(obj, pair[0], pair[1]);
    }
  };
  var matchAll = (regExp, str) => {
    let matches;
    const arr = [];
    while ((matches = regExp.exec(str)) !== null) {
      arr.push(matches);
    }
    return arr;
  };
  var isHTMLForm = kindOfTest("HTMLFormElement");
  var toCamelCase = (str) => {
    return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    });
  };
  var hasOwnProperty11 = (({hasOwnProperty: hasOwnProperty12}) => (obj, prop) => hasOwnProperty12.call(obj, prop))(Object.prototype);
  var isRegExp = kindOfTest("RegExp");
  var reduceDescriptors = (obj, reducer) => {
    const descriptors2 = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};
    forEach(descriptors2, (descriptor, name2) => {
      let ret;
      if ((ret = reducer(descriptor, name2, obj)) !== false) {
        reducedDescriptors[name2] = ret || descriptor;
      }
    });
    Object.defineProperties(obj, reducedDescriptors);
  };
  var freezeMethods = (obj) => {
    reduceDescriptors(obj, (descriptor, name2) => {
      if (isFunction2(obj) && ["arguments", "caller", "callee"].indexOf(name2) !== -1) {
        return false;
      }
      const value2 = obj[name2];
      if (!isFunction2(value2))
        return;
      descriptor.enumerable = false;
      if ("writable" in descriptor) {
        descriptor.writable = false;
        return;
      }
      if (!descriptor.set) {
        descriptor.set = () => {
          throw Error("Can not rewrite read-only method '" + name2 + "'");
        };
      }
    });
  };
  var toObjectSet = (arrayOrString, delimiter) => {
    const obj = {};
    const define = (arr) => {
      arr.forEach((value2) => {
        obj[value2] = true;
      });
    };
    isArray2(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
    return obj;
  };
  var noop = () => {
  };
  var toFiniteNumber = (value2, defaultValue) => {
    return value2 != null && Number.isFinite(value2 = +value2) ? value2 : defaultValue;
  };
  var ALPHA = "abcdefghijklmnopqrstuvwxyz";
  var DIGIT = "0123456789";
  var ALPHABET = {
    DIGIT,
    ALPHA,
    ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
  };
  var generateString = (size = 16, alphabet2 = ALPHABET.ALPHA_DIGIT) => {
    let str = "";
    const {length: length2} = alphabet2;
    while (size--) {
      str += alphabet2[Math.random() * length2 | 0];
    }
    return str;
  };
  function isSpecCompliantForm(thing) {
    return !!(thing && isFunction2(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
  }
  var toJSONObject = (obj) => {
    const stack = new Array(10);
    const visit = (source, i2) => {
      if (isObject2(source)) {
        if (stack.indexOf(source) >= 0) {
          return;
        }
        if (!("toJSON" in source)) {
          stack[i2] = source;
          const target = isArray2(source) ? [] : {};
          forEach(source, (value2, key) => {
            const reducedValue = visit(value2, i2 + 1);
            !isUndefined(reducedValue) && (target[key] = reducedValue);
          });
          stack[i2] = void 0;
          return target;
        }
      }
      return source;
    };
    return visit(obj, 0);
  };
  var isAsyncFn = kindOfTest("AsyncFunction");
  var isThenable = (thing) => thing && (isObject2(thing) || isFunction2(thing)) && isFunction2(thing.then) && isFunction2(thing.catch);
  var utils_default = {
    isArray: isArray2,
    isArrayBuffer,
    isBuffer: isBuffer2,
    isFormData,
    isArrayBufferView,
    isString,
    isNumber,
    isBoolean,
    isObject: isObject2,
    isPlainObject,
    isReadableStream,
    isRequest,
    isResponse,
    isHeaders,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isRegExp,
    isFunction: isFunction2,
    isStream,
    isURLSearchParams,
    isTypedArray: isTypedArray2,
    isFileList,
    forEach,
    merge,
    extend,
    trim,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty: hasOwnProperty11,
    hasOwnProp: hasOwnProperty11,
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop,
    toFiniteNumber,
    findKey,
    global: _global,
    isContextDefined,
    ALPHABET,
    generateString,
    isSpecCompliantForm,
    toJSONObject,
    isAsyncFn,
    isThenable
  };

  // node_modules/axios/lib/core/AxiosError.js
  "use strict";
  function AxiosError(message, code, config, request, response) {
    Error.call(this);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error().stack;
    }
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    response && (this.response = response);
  }
  utils_default.inherits(AxiosError, Error, {
    toJSON: function toJSON() {
      return {
        message: this.message,
        name: this.name,
        description: this.description,
        number: this.number,
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        config: utils_default.toJSONObject(this.config),
        code: this.code,
        status: this.response && this.response.status ? this.response.status : null
      };
    }
  });
  var prototype = AxiosError.prototype;
  var descriptors = {};
  [
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED",
    "ERR_NOT_SUPPORT",
    "ERR_INVALID_URL"
  ].forEach((code) => {
    descriptors[code] = {value: code};
  });
  Object.defineProperties(AxiosError, descriptors);
  Object.defineProperty(prototype, "isAxiosError", {value: true});
  AxiosError.from = (error, code, config, request, response, customProps) => {
    const axiosError = Object.create(prototype);
    utils_default.toFlatObject(error, axiosError, function filter2(obj) {
      return obj !== Error.prototype;
    }, (prop) => {
      return prop !== "isAxiosError";
    });
    AxiosError.call(axiosError, error.message, code, config, request, response);
    axiosError.cause = error;
    axiosError.name = error.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
  };
  var AxiosError_default = AxiosError;

  // node_modules/axios/lib/helpers/null.js
  var null_default = null;

  // node_modules/axios/lib/helpers/toFormData.js
  "use strict";
  function isVisitable(thing) {
    return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
  }
  function removeBrackets(key) {
    return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
  }
  function renderKey(path, key, dots) {
    if (!path)
      return key;
    return path.concat(key).map(function each(token, i2) {
      token = removeBrackets(token);
      return !dots && i2 ? "[" + token + "]" : token;
    }).join(dots ? "." : "");
  }
  function isFlatArray(arr) {
    return utils_default.isArray(arr) && !arr.some(isVisitable);
  }
  var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
    return /^is[A-Z]/.test(prop);
  });
  function toFormData(obj, formData, options) {
    if (!utils_default.isObject(obj)) {
      throw new TypeError("target must be an object");
    }
    formData = formData || new (null_default || FormData)();
    options = utils_default.toFlatObject(options, {
      metaTokens: true,
      dots: false,
      indexes: false
    }, false, function defined(option, source) {
      return !utils_default.isUndefined(source[option]);
    });
    const metaTokens = options.metaTokens;
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
    const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
    if (!utils_default.isFunction(visitor)) {
      throw new TypeError("visitor must be a function");
    }
    function convertValue(value2) {
      if (value2 === null)
        return "";
      if (utils_default.isDate(value2)) {
        return value2.toISOString();
      }
      if (!useBlob && utils_default.isBlob(value2)) {
        throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
      }
      if (utils_default.isArrayBuffer(value2) || utils_default.isTypedArray(value2)) {
        return useBlob && typeof Blob === "function" ? new Blob([value2]) : Buffer.from(value2);
      }
      return value2;
    }
    function defaultVisitor(value2, key, path) {
      let arr = value2;
      if (value2 && !path && typeof value2 === "object") {
        if (utils_default.endsWith(key, "{}")) {
          key = metaTokens ? key : key.slice(0, -2);
          value2 = JSON.stringify(value2);
        } else if (utils_default.isArray(value2) && isFlatArray(value2) || (utils_default.isFileList(value2) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value2))) {
          key = removeBrackets(key);
          arr.forEach(function each(el, index) {
            !(utils_default.isUndefined(el) || el === null) && formData.append(indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]", convertValue(el));
          });
          return false;
        }
      }
      if (isVisitable(value2)) {
        return true;
      }
      formData.append(renderKey(path, key, dots), convertValue(value2));
      return false;
    }
    const stack = [];
    const exposedHelpers = Object.assign(predicates, {
      defaultVisitor,
      convertValue,
      isVisitable
    });
    function build(value2, path) {
      if (utils_default.isUndefined(value2))
        return;
      if (stack.indexOf(value2) !== -1) {
        throw Error("Circular reference detected in " + path.join("."));
      }
      stack.push(value2);
      utils_default.forEach(value2, function each(el, key) {
        const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(formData, el, utils_default.isString(key) ? key.trim() : key, path, exposedHelpers);
        if (result === true) {
          build(el, path ? path.concat(key) : [key]);
        }
      });
      stack.pop();
    }
    if (!utils_default.isObject(obj)) {
      throw new TypeError("data must be an object");
    }
    build(obj);
    return formData;
  }
  var toFormData_default = toFormData;

  // node_modules/axios/lib/helpers/AxiosURLSearchParams.js
  "use strict";
  function encode(str) {
    const charMap = {
      "!": "%21",
      "'": "%27",
      "(": "%28",
      ")": "%29",
      "~": "%7E",
      "%20": "+",
      "%00": "\0"
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
      return charMap[match];
    });
  }
  function AxiosURLSearchParams(params, options) {
    this._pairs = [];
    params && toFormData_default(params, this, options);
  }
  var prototype2 = AxiosURLSearchParams.prototype;
  prototype2.append = function append(name2, value2) {
    this._pairs.push([name2, value2]);
  };
  prototype2.toString = function toString2(encoder) {
    const _encode = encoder ? function(value2) {
      return encoder.call(this, value2, encode);
    } : encode;
    return this._pairs.map(function each(pair) {
      return _encode(pair[0]) + "=" + _encode(pair[1]);
    }, "").join("&");
  };
  var AxiosURLSearchParams_default = AxiosURLSearchParams;

  // node_modules/axios/lib/helpers/buildURL.js
  "use strict";
  function encode2(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  }
  function buildURL(url2, params, options) {
    if (!params) {
      return url2;
    }
    const _encode = options && options.encode || encode2;
    const serializeFn = options && options.serialize;
    let serializedParams;
    if (serializeFn) {
      serializedParams = serializeFn(params, options);
    } else {
      serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
    }
    if (serializedParams) {
      const hashmarkIndex = url2.indexOf("#");
      if (hashmarkIndex !== -1) {
        url2 = url2.slice(0, hashmarkIndex);
      }
      url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url2;
  }

  // node_modules/axios/lib/core/InterceptorManager.js
  "use strict";
  var InterceptorManager = class {
    constructor() {
      this.handlers = [];
    }
    use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    }
    eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    }
    clear() {
      if (this.handlers) {
        this.handlers = [];
      }
    }
    forEach(fn) {
      utils_default.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    }
  };
  var InterceptorManager_default = InterceptorManager;

  // node_modules/axios/lib/defaults/transitional.js
  "use strict";
  var transitional_default = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };

  // node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
  "use strict";
  var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

  // node_modules/axios/lib/platform/browser/classes/FormData.js
  "use strict";
  var FormData_default = typeof FormData !== "undefined" ? FormData : null;

  // node_modules/axios/lib/platform/browser/classes/Blob.js
  "use strict";
  var Blob_default = typeof Blob !== "undefined" ? Blob : null;

  // node_modules/axios/lib/platform/browser/index.js
  var browser_default = {
    isBrowser: true,
    classes: {
      URLSearchParams: URLSearchParams_default,
      FormData: FormData_default,
      Blob: Blob_default
    },
    protocols: ["http", "https", "file", "blob", "url", "data"]
  };

  // node_modules/axios/lib/platform/common/utils.js
  var utils_exports = {};
  __export(utils_exports, {
    hasBrowserEnv: () => hasBrowserEnv,
    hasStandardBrowserEnv: () => hasStandardBrowserEnv,
    hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
    origin: () => origin
  });
  var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
  var hasStandardBrowserEnv = ((product) => {
    return hasBrowserEnv && ["ReactNative", "NativeScript", "NS"].indexOf(product) < 0;
  })(typeof navigator !== "undefined" && navigator.product);
  var hasStandardBrowserWebWorkerEnv = (() => {
    return typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
  })();
  var origin = hasBrowserEnv && window.location.href || "http://localhost";

  // node_modules/axios/lib/platform/index.js
  var platform_default = {
    ...utils_exports,
    ...browser_default
  };

  // node_modules/axios/lib/helpers/toURLEncodedForm.js
  "use strict";
  function toURLEncodedForm(data, options) {
    return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({
      visitor: function(value2, key, path, helpers) {
        if (platform_default.isNode && utils_default.isBuffer(value2)) {
          this.append(key, value2.toString("base64"));
          return false;
        }
        return helpers.defaultVisitor.apply(this, arguments);
      }
    }, options));
  }

  // node_modules/axios/lib/helpers/formDataToJSON.js
  "use strict";
  function parsePropPath(name2) {
    return utils_default.matchAll(/\w+|\[(\w*)]/g, name2).map((match) => {
      return match[0] === "[]" ? "" : match[1] || match[0];
    });
  }
  function arrayToObject(arr) {
    const obj = {};
    const keys2 = Object.keys(arr);
    let i2;
    const len = keys2.length;
    let key;
    for (i2 = 0; i2 < len; i2++) {
      key = keys2[i2];
      obj[key] = arr[key];
    }
    return obj;
  }
  function formDataToJSON(formData) {
    function buildPath(path, value2, target, index) {
      let name2 = path[index++];
      if (name2 === "__proto__")
        return true;
      const isNumericKey = Number.isFinite(+name2);
      const isLast = index >= path.length;
      name2 = !name2 && utils_default.isArray(target) ? target.length : name2;
      if (isLast) {
        if (utils_default.hasOwnProp(target, name2)) {
          target[name2] = [target[name2], value2];
        } else {
          target[name2] = value2;
        }
        return !isNumericKey;
      }
      if (!target[name2] || !utils_default.isObject(target[name2])) {
        target[name2] = [];
      }
      const result = buildPath(path, value2, target[name2], index);
      if (result && utils_default.isArray(target[name2])) {
        target[name2] = arrayToObject(target[name2]);
      }
      return !isNumericKey;
    }
    if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
      const obj = {};
      utils_default.forEachEntry(formData, (name2, value2) => {
        buildPath(parsePropPath(name2), value2, obj, 0);
      });
      return obj;
    }
    return null;
  }
  var formDataToJSON_default = formDataToJSON;

  // node_modules/axios/lib/defaults/index.js
  "use strict";
  function stringifySafely(rawValue, parser, encoder) {
    if (utils_default.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils_default.trim(rawValue);
      } catch (e) {
        if (e.name !== "SyntaxError") {
          throw e;
        }
      }
    }
    return (encoder || JSON.stringify)(rawValue);
  }
  var defaults = {
    transitional: transitional_default,
    adapter: ["xhr", "http", "fetch"],
    transformRequest: [function transformRequest(data, headers) {
      const contentType = headers.getContentType() || "";
      const hasJSONContentType = contentType.indexOf("application/json") > -1;
      const isObjectPayload = utils_default.isObject(data);
      if (isObjectPayload && utils_default.isHTMLForm(data)) {
        data = new FormData(data);
      }
      const isFormData2 = utils_default.isFormData(data);
      if (isFormData2) {
        return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
      }
      if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {
        return data;
      }
      if (utils_default.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils_default.isURLSearchParams(data)) {
        headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
        return data.toString();
      }
      let isFileList2;
      if (isObjectPayload) {
        if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
          return toURLEncodedForm(data, this.formSerializer).toString();
        }
        if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
          const _FormData = this.env && this.env.FormData;
          return toFormData_default(isFileList2 ? {"files[]": data} : data, _FormData && new _FormData(), this.formSerializer);
        }
      }
      if (isObjectPayload || hasJSONContentType) {
        headers.setContentType("application/json", false);
        return stringifySafely(data);
      }
      return data;
    }],
    transformResponse: [function transformResponse(data) {
      const transitional2 = this.transitional || defaults.transitional;
      const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
      const JSONRequested = this.responseType === "json";
      if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {
        return data;
      }
      if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
        const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
        const strictJSONParsing = !silentJSONParsing && JSONRequested;
        try {
          return JSON.parse(data);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === "SyntaxError") {
              throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e;
          }
        }
      }
      return data;
    }],
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: platform_default.classes.FormData,
      Blob: platform_default.classes.Blob
    },
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
    headers: {
      common: {
        Accept: "application/json, text/plain, */*",
        "Content-Type": void 0
      }
    }
  };
  utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
    defaults.headers[method] = {};
  });
  var defaults_default = defaults;

  // node_modules/axios/lib/helpers/parseHeaders.js
  "use strict";
  var ignoreDuplicateOf = utils_default.toObjectSet([
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ]);
  var parseHeaders_default = (rawHeaders) => {
    const parsed = {};
    let key;
    let val;
    let i2;
    rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
      i2 = line.indexOf(":");
      key = line.substring(0, i2).trim().toLowerCase();
      val = line.substring(i2 + 1).trim();
      if (!key || parsed[key] && ignoreDuplicateOf[key]) {
        return;
      }
      if (key === "set-cookie") {
        if (parsed[key]) {
          parsed[key].push(val);
        } else {
          parsed[key] = [val];
        }
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
      }
    });
    return parsed;
  };

  // node_modules/axios/lib/core/AxiosHeaders.js
  "use strict";
  var $internals = Symbol("internals");
  function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
  }
  function normalizeValue(value2) {
    if (value2 === false || value2 == null) {
      return value2;
    }
    return utils_default.isArray(value2) ? value2.map(normalizeValue) : String(value2);
  }
  function parseTokens(str) {
    const tokens = Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match;
    while (match = tokensRE.exec(str)) {
      tokens[match[1]] = match[2];
    }
    return tokens;
  }
  var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
  function matchHeaderValue(context, value2, header, filter2, isHeaderNameFilter) {
    if (utils_default.isFunction(filter2)) {
      return filter2.call(this, value2, header);
    }
    if (isHeaderNameFilter) {
      value2 = header;
    }
    if (!utils_default.isString(value2))
      return;
    if (utils_default.isString(filter2)) {
      return value2.indexOf(filter2) !== -1;
    }
    if (utils_default.isRegExp(filter2)) {
      return filter2.test(value2);
    }
  }
  function formatHeader(header) {
    return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
  }
  function buildAccessors(obj, header) {
    const accessorName = utils_default.toCamelCase(" " + header);
    ["get", "set", "has"].forEach((methodName) => {
      Object.defineProperty(obj, methodName + accessorName, {
        value: function(arg1, arg2, arg3) {
          return this[methodName].call(this, header, arg1, arg2, arg3);
        },
        configurable: true
      });
    });
  }
  var AxiosHeaders = class {
    constructor(headers) {
      headers && this.set(headers);
    }
    set(header, valueOrRewrite, rewrite) {
      const self2 = this;
      function setHeader(_value, _header, _rewrite) {
        const lHeader = normalizeHeader(_header);
        if (!lHeader) {
          throw new Error("header name must be a non-empty string");
        }
        const key = utils_default.findKey(self2, lHeader);
        if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
          self2[key || _header] = normalizeValue(_value);
        }
      }
      const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
      if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
        setHeaders(header, valueOrRewrite);
      } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
        setHeaders(parseHeaders_default(header), valueOrRewrite);
      } else if (utils_default.isHeaders(header)) {
        for (const [key, value2] of header.entries()) {
          setHeader(value2, key, rewrite);
        }
      } else {
        header != null && setHeader(valueOrRewrite, header, rewrite);
      }
      return this;
    }
    get(header, parser) {
      header = normalizeHeader(header);
      if (header) {
        const key = utils_default.findKey(this, header);
        if (key) {
          const value2 = this[key];
          if (!parser) {
            return value2;
          }
          if (parser === true) {
            return parseTokens(value2);
          }
          if (utils_default.isFunction(parser)) {
            return parser.call(this, value2, key);
          }
          if (utils_default.isRegExp(parser)) {
            return parser.exec(value2);
          }
          throw new TypeError("parser must be boolean|regexp|function");
        }
      }
    }
    has(header, matcher) {
      header = normalizeHeader(header);
      if (header) {
        const key = utils_default.findKey(this, header);
        return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
      }
      return false;
    }
    delete(header, matcher) {
      const self2 = this;
      let deleted = false;
      function deleteHeader(_header) {
        _header = normalizeHeader(_header);
        if (_header) {
          const key = utils_default.findKey(self2, _header);
          if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
            delete self2[key];
            deleted = true;
          }
        }
      }
      if (utils_default.isArray(header)) {
        header.forEach(deleteHeader);
      } else {
        deleteHeader(header);
      }
      return deleted;
    }
    clear(matcher) {
      const keys2 = Object.keys(this);
      let i2 = keys2.length;
      let deleted = false;
      while (i2--) {
        const key = keys2[i2];
        if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
          delete this[key];
          deleted = true;
        }
      }
      return deleted;
    }
    normalize(format) {
      const self2 = this;
      const headers = {};
      utils_default.forEach(this, (value2, header) => {
        const key = utils_default.findKey(headers, header);
        if (key) {
          self2[key] = normalizeValue(value2);
          delete self2[header];
          return;
        }
        const normalized = format ? formatHeader(header) : String(header).trim();
        if (normalized !== header) {
          delete self2[header];
        }
        self2[normalized] = normalizeValue(value2);
        headers[normalized] = true;
      });
      return this;
    }
    concat(...targets) {
      return this.constructor.concat(this, ...targets);
    }
    toJSON(asStrings) {
      const obj = Object.create(null);
      utils_default.forEach(this, (value2, header) => {
        value2 != null && value2 !== false && (obj[header] = asStrings && utils_default.isArray(value2) ? value2.join(", ") : value2);
      });
      return obj;
    }
    [Symbol.iterator]() {
      return Object.entries(this.toJSON())[Symbol.iterator]();
    }
    toString() {
      return Object.entries(this.toJSON()).map(([header, value2]) => header + ": " + value2).join("\n");
    }
    get [Symbol.toStringTag]() {
      return "AxiosHeaders";
    }
    static from(thing) {
      return thing instanceof this ? thing : new this(thing);
    }
    static concat(first, ...targets) {
      const computed = new this(first);
      targets.forEach((target) => computed.set(target));
      return computed;
    }
    static accessor(header) {
      const internals = this[$internals] = this[$internals] = {
        accessors: {}
      };
      const accessors = internals.accessors;
      const prototype3 = this.prototype;
      function defineAccessor(_header) {
        const lHeader = normalizeHeader(_header);
        if (!accessors[lHeader]) {
          buildAccessors(prototype3, _header);
          accessors[lHeader] = true;
        }
      }
      utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
      return this;
    }
  };
  AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
  utils_default.reduceDescriptors(AxiosHeaders.prototype, ({value: value2}, key) => {
    let mapped = key[0].toUpperCase() + key.slice(1);
    return {
      get: () => value2,
      set(headerValue) {
        this[mapped] = headerValue;
      }
    };
  });
  utils_default.freezeMethods(AxiosHeaders);
  var AxiosHeaders_default = AxiosHeaders;

  // node_modules/axios/lib/core/transformData.js
  "use strict";
  function transformData(fns, response) {
    const config = this || defaults_default;
    const context = response || config;
    const headers = AxiosHeaders_default.from(context.headers);
    let data = context.data;
    utils_default.forEach(fns, function transform(fn) {
      data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
    });
    headers.normalize();
    return data;
  }

  // node_modules/axios/lib/cancel/isCancel.js
  "use strict";
  function isCancel(value2) {
    return !!(value2 && value2.__CANCEL__);
  }

  // node_modules/axios/lib/cancel/CanceledError.js
  "use strict";
  function CanceledError(message, config, request) {
    AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
    this.name = "CanceledError";
  }
  utils_default.inherits(CanceledError, AxiosError_default, {
    __CANCEL__: true
  });
  var CanceledError_default = CanceledError;

  // node_modules/axios/lib/core/settle.js
  "use strict";
  function settle(resolve, reject, response) {
    const validateStatus2 = response.config.validateStatus;
    if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
      resolve(response);
    } else {
      reject(new AxiosError_default("Request failed with status code " + response.status, [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));
    }
  }

  // node_modules/axios/lib/helpers/parseProtocol.js
  "use strict";
  function parseProtocol(url2) {
    const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
    return match && match[1] || "";
  }

  // node_modules/axios/lib/helpers/speedometer.js
  "use strict";
  function speedometer(samplesCount, min) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;
    min = min !== void 0 ? min : 1e3;
    return function push(chunkLength) {
      const now = Date.now();
      const startedAt = timestamps[tail];
      if (!firstSampleTS) {
        firstSampleTS = now;
      }
      bytes[head] = chunkLength;
      timestamps[head] = now;
      let i2 = tail;
      let bytesCount = 0;
      while (i2 !== head) {
        bytesCount += bytes[i2++];
        i2 = i2 % samplesCount;
      }
      head = (head + 1) % samplesCount;
      if (head === tail) {
        tail = (tail + 1) % samplesCount;
      }
      if (now - firstSampleTS < min) {
        return;
      }
      const passed = startedAt && now - startedAt;
      return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
    };
  }
  var speedometer_default = speedometer;

  // node_modules/axios/lib/helpers/throttle.js
  "use strict";
  function throttle(fn, freq) {
    let timestamp = 0;
    const threshold = 1e3 / freq;
    let timer = null;
    return function throttled() {
      const force = this === true;
      const now = Date.now();
      if (force || now - timestamp > threshold) {
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
        timestamp = now;
        return fn.apply(null, arguments);
      }
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          timestamp = Date.now();
          return fn.apply(null, arguments);
        }, threshold - (now - timestamp));
      }
    };
  }
  var throttle_default = throttle;

  // node_modules/axios/lib/helpers/progressEventReducer.js
  var progressEventReducer_default = (listener, isDownloadStream, freq = 3) => {
    let bytesNotified = 0;
    const _speedometer = speedometer_default(50, 250);
    return throttle_default((e) => {
      const loaded = e.loaded;
      const total = e.lengthComputable ? e.total : void 0;
      const progressBytes = loaded - bytesNotified;
      const rate = _speedometer(progressBytes);
      const inRange = loaded <= total;
      bytesNotified = loaded;
      const data = {
        loaded,
        total,
        progress: total ? loaded / total : void 0,
        bytes: progressBytes,
        rate: rate ? rate : void 0,
        estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
        event: e,
        lengthComputable: total != null
      };
      data[isDownloadStream ? "download" : "upload"] = true;
      listener(data);
    }, freq);
  };

  // node_modules/axios/lib/helpers/isURLSameOrigin.js
  "use strict";
  var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement("a");
    let originURL;
    function resolveURL(url2) {
      let href = url2;
      if (msie) {
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute("href", href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
      };
    }
    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin(requestURL) {
      const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }() : function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  }();

  // node_modules/axios/lib/helpers/cookies.js
  var cookies_default = platform_default.hasStandardBrowserEnv ? {
    write(name2, value2, expires, path, domain, secure) {
      const cookie = [name2 + "=" + encodeURIComponent(value2)];
      utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils_default.isString(path) && cookie.push("path=" + path);
      utils_default.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name2) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name2 + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name2) {
      this.write(name2, "", Date.now() - 864e5);
    }
  } : {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  };

  // node_modules/axios/lib/helpers/isAbsoluteURL.js
  "use strict";
  function isAbsoluteURL(url2) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
  }

  // node_modules/axios/lib/helpers/combineURLs.js
  "use strict";
  function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  }

  // node_modules/axios/lib/core/buildFullPath.js
  "use strict";
  function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }

  // node_modules/axios/lib/core/mergeConfig.js
  "use strict";
  var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? {...thing} : thing;
  function mergeConfig(config1, config2) {
    config2 = config2 || {};
    const config = {};
    function getMergedValue(target, source, caseless) {
      if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
        return utils_default.merge.call({caseless}, target, source);
      } else if (utils_default.isPlainObject(source)) {
        return utils_default.merge({}, source);
      } else if (utils_default.isArray(source)) {
        return source.slice();
      }
      return source;
    }
    function mergeDeepProperties(a, b, caseless) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(a, b, caseless);
      } else if (!utils_default.isUndefined(a)) {
        return getMergedValue(void 0, a, caseless);
      }
    }
    function valueFromConfig2(a, b) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(void 0, b);
      }
    }
    function defaultToConfig2(a, b) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(void 0, b);
      } else if (!utils_default.isUndefined(a)) {
        return getMergedValue(void 0, a);
      }
    }
    function mergeDirectKeys(a, b, prop) {
      if (prop in config2) {
        return getMergedValue(a, b);
      } else if (prop in config1) {
        return getMergedValue(void 0, a);
      }
    }
    const mergeMap = {
      url: valueFromConfig2,
      method: valueFromConfig2,
      data: valueFromConfig2,
      baseURL: defaultToConfig2,
      transformRequest: defaultToConfig2,
      transformResponse: defaultToConfig2,
      paramsSerializer: defaultToConfig2,
      timeout: defaultToConfig2,
      timeoutMessage: defaultToConfig2,
      withCredentials: defaultToConfig2,
      withXSRFToken: defaultToConfig2,
      adapter: defaultToConfig2,
      responseType: defaultToConfig2,
      xsrfCookieName: defaultToConfig2,
      xsrfHeaderName: defaultToConfig2,
      onUploadProgress: defaultToConfig2,
      onDownloadProgress: defaultToConfig2,
      decompress: defaultToConfig2,
      maxContentLength: defaultToConfig2,
      maxBodyLength: defaultToConfig2,
      beforeRedirect: defaultToConfig2,
      transport: defaultToConfig2,
      httpAgent: defaultToConfig2,
      httpsAgent: defaultToConfig2,
      cancelToken: defaultToConfig2,
      socketPath: defaultToConfig2,
      responseEncoding: defaultToConfig2,
      validateStatus: mergeDirectKeys,
      headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
    };
    utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
      const merge2 = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge2(config1[prop], config2[prop], prop);
      utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
  }

  // node_modules/axios/lib/helpers/resolveConfig.js
  var resolveConfig_default = (config) => {
    const newConfig = mergeConfig({}, config);
    let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;
    newConfig.headers = headers = AxiosHeaders_default.from(headers);
    newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
    if (auth) {
      headers.set("Authorization", "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : "")));
    }
    let contentType;
    if (utils_default.isFormData(data)) {
      if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
        headers.setContentType(void 0);
      } else if ((contentType = headers.getContentType()) !== false) {
        const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
        headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
      }
    }
    if (platform_default.hasStandardBrowserEnv) {
      withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
      if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
        const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
        if (xsrfValue) {
          headers.set(xsrfHeaderName, xsrfValue);
        }
      }
    }
    return newConfig;
  };

  // node_modules/axios/lib/adapters/xhr.js
  var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
  var xhr_default = isXHRAdapterSupported && function(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      const _config = resolveConfig_default(config);
      let requestData = _config.data;
      const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
      let {responseType} = _config;
      let onCanceled;
      function done() {
        if (_config.cancelToken) {
          _config.cancelToken.unsubscribe(onCanceled);
        }
        if (_config.signal) {
          _config.signal.removeEventListener("abort", onCanceled);
        }
      }
      let request = new XMLHttpRequest();
      request.open(_config.method.toUpperCase(), _config.url, true);
      request.timeout = _config.timeout;
      function onloadend() {
        if (!request) {
          return;
        }
        const responseHeaders = AxiosHeaders_default.from("getAllResponseHeaders" in request && request.getAllResponseHeaders());
        const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
        const response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config,
          request
        };
        settle(function _resolve(value2) {
          resolve(value2);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);
        request = null;
      }
      if ("onloadend" in request) {
        request.onloadend = onloadend;
      } else {
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
            return;
          }
          setTimeout(onloadend);
        };
      }
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }
        reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, _config, request));
        request = null;
      };
      request.onerror = function handleError() {
        reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, _config, request));
        request = null;
      };
      request.ontimeout = function handleTimeout() {
        let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
        const transitional2 = _config.transitional || transitional_default;
        if (_config.timeoutErrorMessage) {
          timeoutErrorMessage = _config.timeoutErrorMessage;
        }
        reject(new AxiosError_default(timeoutErrorMessage, transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED, _config, request));
        request = null;
      };
      requestData === void 0 && requestHeaders.setContentType(null);
      if ("setRequestHeader" in request) {
        utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
          request.setRequestHeader(key, val);
        });
      }
      if (!utils_default.isUndefined(_config.withCredentials)) {
        request.withCredentials = !!_config.withCredentials;
      }
      if (responseType && responseType !== "json") {
        request.responseType = _config.responseType;
      }
      if (typeof _config.onDownloadProgress === "function") {
        request.addEventListener("progress", progressEventReducer_default(_config.onDownloadProgress, true));
      }
      if (typeof _config.onUploadProgress === "function" && request.upload) {
        request.upload.addEventListener("progress", progressEventReducer_default(_config.onUploadProgress));
      }
      if (_config.cancelToken || _config.signal) {
        onCanceled = (cancel) => {
          if (!request) {
            return;
          }
          reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
          request.abort();
          request = null;
        };
        _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
        if (_config.signal) {
          _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
        }
      }
      const protocol4 = parseProtocol(_config.url);
      if (protocol4 && platform_default.protocols.indexOf(protocol4) === -1) {
        reject(new AxiosError_default("Unsupported protocol " + protocol4 + ":", AxiosError_default.ERR_BAD_REQUEST, config));
        return;
      }
      request.send(requestData || null);
    });
  };

  // node_modules/axios/lib/helpers/composeSignals.js
  var composeSignals = (signals, timeout) => {
    let controller2 = new AbortController();
    let aborted;
    const onabort = function(cancel) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = cancel instanceof Error ? cancel : this.reason;
        controller2.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
      }
    };
    let timer = timeout && setTimeout(() => {
      onabort(new AxiosError_default(`timeout ${timeout} of ms exceeded`, AxiosError_default.ETIMEDOUT));
    }, timeout);
    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach((signal3) => {
          signal3 && (signal3.removeEventListener ? signal3.removeEventListener("abort", onabort) : signal3.unsubscribe(onabort));
        });
        signals = null;
      }
    };
    signals.forEach((signal3) => signal3 && signal3.addEventListener && signal3.addEventListener("abort", onabort));
    const {signal: signal2} = controller2;
    signal2.unsubscribe = unsubscribe;
    return [signal2, () => {
      timer && clearTimeout(timer);
      timer = null;
    }];
  };
  var composeSignals_default = composeSignals;

  // node_modules/axios/lib/helpers/trackStream.js
  var streamChunk = function* (chunk, chunkSize) {
    let len = chunk.byteLength;
    if (!chunkSize || len < chunkSize) {
      yield chunk;
      return;
    }
    let pos = 0;
    let end;
    while (pos < len) {
      end = pos + chunkSize;
      yield chunk.slice(pos, end);
      pos = end;
    }
  };
  var readBytes = async function* (iterable, chunkSize, encode5) {
    for await (const chunk of iterable) {
      yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : await encode5(String(chunk)), chunkSize);
    }
  };
  var trackStream = (stream, chunkSize, onProgress, onFinish, encode5) => {
    const iterator = readBytes(stream, chunkSize, encode5);
    let bytes = 0;
    return new ReadableStream({
      type: "bytes",
      async pull(controller2) {
        const {done, value: value2} = await iterator.next();
        if (done) {
          controller2.close();
          onFinish();
          return;
        }
        let len = value2.byteLength;
        onProgress && onProgress(bytes += len);
        controller2.enqueue(new Uint8Array(value2));
      },
      cancel(reason) {
        onFinish(reason);
        return iterator.return();
      }
    }, {
      highWaterMark: 2
    });
  };

  // node_modules/axios/lib/adapters/fetch.js
  var fetchProgressDecorator = (total, fn) => {
    const lengthComputable = total != null;
    return (loaded) => setTimeout(() => fn({
      lengthComputable,
      total,
      loaded
    }));
  };
  var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
  var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
  var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
  var supportsRequestStream = isReadableStreamSupported && (() => {
    let duplexAccessed = false;
    const hasContentType = new Request(platform_default.origin, {
      body: new ReadableStream(),
      method: "POST",
      get duplex() {
        duplexAccessed = true;
        return "half";
      }
    }).headers.has("Content-Type");
    return duplexAccessed && !hasContentType;
  })();
  var DEFAULT_CHUNK_SIZE = 64 * 1024;
  var supportsResponseStream = isReadableStreamSupported && !!(() => {
    try {
      return utils_default.isReadableStream(new Response("").body);
    } catch (err) {
    }
  })();
  var resolvers = {
    stream: supportsResponseStream && ((res) => res.body)
  };
  isFetchSupported && ((res) => {
    ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
      !resolvers[type] && (resolvers[type] = utils_default.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
        throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
      });
    });
  })(new Response());
  var getBodyLength = async (body) => {
    if (body == null) {
      return 0;
    }
    if (utils_default.isBlob(body)) {
      return body.size;
    }
    if (utils_default.isSpecCompliantForm(body)) {
      return (await new Request(body).arrayBuffer()).byteLength;
    }
    if (utils_default.isArrayBufferView(body)) {
      return body.byteLength;
    }
    if (utils_default.isURLSearchParams(body)) {
      body = body + "";
    }
    if (utils_default.isString(body)) {
      return (await encodeText(body)).byteLength;
    }
  };
  var resolveBodyLength = async (headers, body) => {
    const length2 = utils_default.toFiniteNumber(headers.getContentLength());
    return length2 == null ? getBodyLength(body) : length2;
  };
  var fetch_default = isFetchSupported && (async (config) => {
    let {
      url: url2,
      method,
      data,
      signal: signal2,
      cancelToken,
      timeout,
      onDownloadProgress,
      onUploadProgress,
      responseType,
      headers,
      withCredentials = "same-origin",
      fetchOptions
    } = resolveConfig_default(config);
    responseType = responseType ? (responseType + "").toLowerCase() : "text";
    let [composedSignal, stopTimeout] = signal2 || cancelToken || timeout ? composeSignals_default([signal2, cancelToken], timeout) : [];
    let finished, request;
    const onFinish = () => {
      !finished && setTimeout(() => {
        composedSignal && composedSignal.unsubscribe();
      });
      finished = true;
    };
    let requestContentLength;
    try {
      if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
        let _request = new Request(url2, {
          method: "POST",
          body: data,
          duplex: "half"
        });
        let contentTypeHeader;
        if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
          headers.setContentType(contentTypeHeader);
        }
        if (_request.body) {
          data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, fetchProgressDecorator(requestContentLength, progressEventReducer_default(onUploadProgress)), null, encodeText);
        }
      }
      if (!utils_default.isString(withCredentials)) {
        withCredentials = withCredentials ? "cors" : "omit";
      }
      request = new Request(url2, {
        ...fetchOptions,
        signal: composedSignal,
        method: method.toUpperCase(),
        headers: headers.normalize().toJSON(),
        body: data,
        duplex: "half",
        withCredentials
      });
      let response = await fetch(request);
      const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
      if (supportsResponseStream && (onDownloadProgress || isStreamResponse)) {
        const options = {};
        ["status", "statusText", "headers"].forEach((prop) => {
          options[prop] = response[prop];
        });
        const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
        response = new Response(trackStream(response.body, DEFAULT_CHUNK_SIZE, onDownloadProgress && fetchProgressDecorator(responseContentLength, progressEventReducer_default(onDownloadProgress, true)), isStreamResponse && onFinish, encodeText), options);
      }
      responseType = responseType || "text";
      let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
      !isStreamResponse && onFinish();
      stopTimeout && stopTimeout();
      return await new Promise((resolve, reject) => {
        settle(resolve, reject, {
          data: responseData,
          headers: AxiosHeaders_default.from(response.headers),
          status: response.status,
          statusText: response.statusText,
          config,
          request
        });
      });
    } catch (err) {
      onFinish();
      if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
        throw Object.assign(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request), {
          cause: err.cause || err
        });
      }
      throw AxiosError_default.from(err, err && err.code, config, request);
    }
  });

  // node_modules/axios/lib/adapters/adapters.js
  var knownAdapters = {
    http: null_default,
    xhr: xhr_default,
    fetch: fetch_default
  };
  utils_default.forEach(knownAdapters, (fn, value2) => {
    if (fn) {
      try {
        Object.defineProperty(fn, "name", {value: value2});
      } catch (e) {
      }
      Object.defineProperty(fn, "adapterName", {value: value2});
    }
  });
  var renderReason = (reason) => `- ${reason}`;
  var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
  var adapters_default = {
    getAdapter: (adapters) => {
      adapters = utils_default.isArray(adapters) ? adapters : [adapters];
      const {length: length2} = adapters;
      let nameOrAdapter;
      let adapter;
      const rejectedReasons = {};
      for (let i2 = 0; i2 < length2; i2++) {
        nameOrAdapter = adapters[i2];
        let id;
        adapter = nameOrAdapter;
        if (!isResolvedHandle(nameOrAdapter)) {
          adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
          if (adapter === void 0) {
            throw new AxiosError_default(`Unknown adapter '${id}'`);
          }
        }
        if (adapter) {
          break;
        }
        rejectedReasons[id || "#" + i2] = adapter;
      }
      if (!adapter) {
        const reasons = Object.entries(rejectedReasons).map(([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build"));
        let s = length2 ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
        throw new AxiosError_default(`There is no suitable adapter to dispatch the request ` + s, "ERR_NOT_SUPPORT");
      }
      return adapter;
    },
    adapters: knownAdapters
  };

  // node_modules/axios/lib/core/dispatchRequest.js
  "use strict";
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
    if (config.signal && config.signal.aborted) {
      throw new CanceledError_default(null, config);
    }
  }
  function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    config.headers = AxiosHeaders_default.from(config.headers);
    config.data = transformData.call(config, config.transformRequest);
    if (["post", "put", "patch"].indexOf(config.method) !== -1) {
      config.headers.setContentType("application/x-www-form-urlencoded", false);
    }
    const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);
      response.data = transformData.call(config, config.transformResponse, response);
      response.headers = AxiosHeaders_default.from(response.headers);
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);
        if (reason && reason.response) {
          reason.response.data = transformData.call(config, config.transformResponse, reason.response);
          reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
        }
      }
      return Promise.reject(reason);
    });
  }

  // node_modules/axios/lib/env/data.js
  var VERSION = "1.7.2";

  // node_modules/axios/lib/helpers/validator.js
  "use strict";
  var validators = {};
  ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i2) => {
    validators[type] = function validator(thing) {
      return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
    };
  });
  var deprecatedWarnings = {};
  validators.transitional = function transitional(validator, version2, message) {
    function formatMessage(opt, desc) {
      return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    return (value2, opt, opts) => {
      if (validator === false) {
        throw new AxiosError_default(formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")), AxiosError_default.ERR_DEPRECATED);
      }
      if (version2 && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        console.warn(formatMessage(opt, " has been deprecated since v" + version2 + " and will be removed in the near future"));
      }
      return validator ? validator(value2, opt, opts) : true;
    };
  };
  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") {
      throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
    }
    const keys2 = Object.keys(options);
    let i2 = keys2.length;
    while (i2-- > 0) {
      const opt = keys2[i2];
      const validator = schema[opt];
      if (validator) {
        const value2 = options[opt];
        const result = value2 === void 0 || validator(value2, opt, options);
        if (result !== true) {
          throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
      }
    }
  }
  var validator_default = {
    assertOptions,
    validators
  };

  // node_modules/axios/lib/core/Axios.js
  "use strict";
  var validators2 = validator_default.validators;
  var Axios = class {
    constructor(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_default(),
        response: new InterceptorManager_default()
      };
    }
    async request(configOrUrl, config) {
      try {
        return await this._request(configOrUrl, config);
      } catch (err) {
        if (err instanceof Error) {
          let dummy;
          Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
          const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
          try {
            if (!err.stack) {
              err.stack = stack;
            } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
              err.stack += "\n" + stack;
            }
          } catch (e) {
          }
        }
        throw err;
      }
    }
    _request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      const {transitional: transitional2, paramsSerializer, headers} = config;
      if (transitional2 !== void 0) {
        validator_default.assertOptions(transitional2, {
          silentJSONParsing: validators2.transitional(validators2.boolean),
          forcedJSONParsing: validators2.transitional(validators2.boolean),
          clarifyTimeoutError: validators2.transitional(validators2.boolean)
        }, false);
      }
      if (paramsSerializer != null) {
        if (utils_default.isFunction(paramsSerializer)) {
          config.paramsSerializer = {
            serialize: paramsSerializer
          };
        } else {
          validator_default.assertOptions(paramsSerializer, {
            encode: validators2.function,
            serialize: validators2.function
          }, true);
        }
      }
      config.method = (config.method || this.defaults.method || "get").toLowerCase();
      let contextHeaders = headers && utils_default.merge(headers.common, headers[config.method]);
      headers && utils_default.forEach(["delete", "get", "head", "post", "put", "patch", "common"], (method) => {
        delete headers[method];
      });
      config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
      const requestInterceptorChain = [];
      let synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      const responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      let promise;
      let i2 = 0;
      let len;
      if (!synchronousRequestInterceptors) {
        const chain = [dispatchRequest.bind(this), void 0];
        chain.unshift.apply(chain, requestInterceptorChain);
        chain.push.apply(chain, responseInterceptorChain);
        len = chain.length;
        promise = Promise.resolve(config);
        while (i2 < len) {
          promise = promise.then(chain[i2++], chain[i2++]);
        }
        return promise;
      }
      len = requestInterceptorChain.length;
      let newConfig = config;
      i2 = 0;
      while (i2 < len) {
        const onFulfilled = requestInterceptorChain[i2++];
        const onRejected = requestInterceptorChain[i2++];
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected.call(this, error);
          break;
        }
      }
      try {
        promise = dispatchRequest.call(this, newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      i2 = 0;
      len = responseInterceptorChain.length;
      while (i2 < len) {
        promise = promise.then(responseInterceptorChain[i2++], responseInterceptorChain[i2++]);
      }
      return promise;
    }
    getUri(config) {
      config = mergeConfig(this.defaults, config);
      const fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    }
  };
  utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
    Axios.prototype[method] = function(url2, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        url: url2,
        data: (config || {}).data
      }));
    };
  });
  utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
    function generateHTTPMethod(isForm) {
      return function httpMethod(url2, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          headers: isForm ? {
            "Content-Type": "multipart/form-data"
          } : {},
          url: url2,
          data
        }));
      };
    }
    Axios.prototype[method] = generateHTTPMethod();
    Axios.prototype[method + "Form"] = generateHTTPMethod(true);
  });
  var Axios_default = Axios;

  // node_modules/axios/lib/cancel/CancelToken.js
  "use strict";
  var CancelToken = class {
    constructor(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      let resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      const token = this;
      this.promise.then((cancel) => {
        if (!token._listeners)
          return;
        let i2 = token._listeners.length;
        while (i2-- > 0) {
          token._listeners[i2](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = (onfulfilled) => {
        let _resolve;
        const promise = new Promise((resolve) => {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message, config, request) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError_default(message, config, request);
        resolvePromise(token.reason);
      });
    }
    throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }
    subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    }
    unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      const index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    }
    static source() {
      let cancel;
      const token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    }
  };
  var CancelToken_default = CancelToken;

  // node_modules/axios/lib/helpers/spread.js
  "use strict";
  function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  }

  // node_modules/axios/lib/helpers/isAxiosError.js
  "use strict";
  function isAxiosError(payload) {
    return utils_default.isObject(payload) && payload.isAxiosError === true;
  }

  // node_modules/axios/lib/helpers/HttpStatusCode.js
  var HttpStatusCode = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511
  };
  Object.entries(HttpStatusCode).forEach(([key, value2]) => {
    HttpStatusCode[value2] = key;
  });
  var HttpStatusCode_default = HttpStatusCode;

  // node_modules/axios/lib/axios.js
  "use strict";
  function createInstance(defaultConfig) {
    const context = new Axios_default(defaultConfig);
    const instance = bind(Axios_default.prototype.request, context);
    utils_default.extend(instance, Axios_default.prototype, context, {allOwnKeys: true});
    utils_default.extend(instance, context, null, {allOwnKeys: true});
    instance.create = function create(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
  }
  var axios = createInstance(defaults_default);
  axios.Axios = Axios_default;
  axios.CanceledError = CanceledError_default;
  axios.CancelToken = CancelToken_default;
  axios.isCancel = isCancel;
  axios.VERSION = VERSION;
  axios.toFormData = toFormData_default;
  axios.AxiosError = AxiosError_default;
  axios.Cancel = axios.CanceledError;
  axios.all = function all(promises) {
    return Promise.all(promises);
  };
  axios.spread = spread;
  axios.isAxiosError = isAxiosError;
  axios.mergeConfig = mergeConfig;
  axios.AxiosHeaders = AxiosHeaders_default;
  axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
  axios.getAdapter = adapters_default.getAdapter;
  axios.HttpStatusCode = HttpStatusCode_default;
  axios.default = axios;
  var axios_default = axios;

  // lib/core/utils/eds-utils.js
  var EDSUtils = {
    a11yEngineResult: {},
    edsConfig: {},
    customRuleData: {},
    setA11yEngineResult(a11yEngineResult) {
      try {
        this.a11yEngineResult = a11yEngineResult;
      } catch (err) {
        console.error("A11y Engine EDS Error - Failed in setA11yEngineResult ", err);
      }
    },
    setEDSConfig(config) {
      try {
        if (config && config.metadata && config.metadata.edsConfig) {
          this.edsConfig.apiKey = config.metadata.edsConfig.apiKey;
          this.edsConfig.hostname = config.metadata.edsConfig.hostname;
        }
      } catch (err) {
        console.error("A11y Engine EDS Error - Failed in setEDSConfig", err);
      }
    },
    appendCustomRuleData(ruleName, data) {
      let ruleData = this.customRuleData[ruleName] || [];
      ruleData.push(data);
      this.customRuleData[ruleName] = ruleData;
    },
    updateCustomRuleData(edsEvent) {
      let data = edsEvent.data || {};
      data.customRuleData = this.customRuleData;
      edsEvent.data = data;
    },
    createEDSEvent(config) {
      try {
        let edsEvent = {};
        edsEvent.kind = {
          type: a11yEngine._advanceRun ? "ADVANCE_SCAN_RUN" : "SCAN_RUN",
          uuid: runIdentifier
        };
        edsEvent.latency = performance_metrics_default.getMetrics();
        let edsConfigData = this.getEDSConfigData(config);
        Object.assign(edsEvent, edsConfigData);
        if (Object.keys(this.a11yEngineResult).length > 0) {
          let edsScanResultData = this.getEDSDataFromScanResult(this.a11yEngineResult);
          Object.assign(edsEvent, edsScanResultData);
        }
        delete edsEvent.engine_run_config.edsConfig;
        edsEvent.data = edsEvent.data || {};
        this.updateCustomRuleData(edsEvent);
        edsEvent.data.status = edsEvent.data.status || report_result_status_default.FAILURE;
        edsEvent.errors = error_handler_default.errors;
        return edsEvent;
      } catch (err) {
        console.error("A11y Engine EDS Error - Failed in createEDSEvent", err);
      }
    },
    getEDSConfigData(config) {
      try {
        let edsConfigData = {};
        if (!config)
          return config;
        edsConfigData.engine_run_config = config;
        delete edsConfigData.engine_run_config.metadata.productMetadata.authToken;
        if (config.metadata) {
          if (config.metadata.product) {
            edsConfigData.product = config.metadata.product;
          }
          if (config.metadata.userId) {
            edsConfigData.user = {};
            edsConfigData.user.user_id = config.metadata.userId;
          }
        }
        edsConfigData.product_metadata = config.metadata.productMetadata;
        delete edsConfigData.product_metadata.authToken;
        return edsConfigData;
      } catch (err) {
        console.error("A11y Engine EDS Error - Failed in getEDSConfigData", err);
      }
    },
    getEDSDataFromScanResult(result) {
      try {
        let edsScanData = {};
        if (!result)
          return edsScanData;
        if (result.data) {
          if (result.data.url) {
            edsScanData.url = result.data.url;
          }
          if (result.data.testEngine) {
            edsScanData.engine_data = result.data.testEngine;
          }
          if (result.data.testEnvironment) {
            edsScanData.user_agent = result.data.testEnvironment.userAgent;
          }
          if (result.data.testEnvironment) {
            edsScanData.device_run_config = {
              viewport: {
                windowHeight: result.data.testEnvironment.windowHeight,
                windowWidth: result.data.testEnvironment.windowWidth
              },
              orientation: {
                orientationAngle: result.data.testEnvironment.orientationAngle,
                orientationType: result.data.testEnvironment.orientationType
              }
            };
          }
          edsScanData.data = {};
          if (result.status)
            edsScanData.data.status = result.status;
          let resultEDS = structuredClone(result);
          resultEDS = this.removeNodes(resultEDS);
          if (resultEDS.data.violations) {
            edsScanData.data.violations = resultEDS.data.violations;
          }
          if (resultEDS.data.incomplete) {
            edsScanData.data.incomplete = resultEDS.data.incomplete;
          }
          if (resultEDS.data.aborted) {
            edsScanData.data.aborted = resultEDS.data.aborted;
          }
        }
        return edsScanData;
      } catch (err) {
        console.error("A11y Engine EDS Error - Failed in getEDSDataFromScanResult", err);
      }
    },
    removeNodes(result) {
      try {
        for (let key in result.data) {
          if (["violations", "incomplete", "passes", "inapplicable"].includes(key)) {
            result.data[key].forEach((record) => {
              record.count = record?.nodes?.length ?? 0;
              delete record.nodes;
            });
          }
        }
        return result;
      } catch (err) {
        console.error("A11y Engine EDS Error - removeNodes");
      }
    },
    async sendBatchedData(eventData) {
      try {
        let edsApiKey;
        let hostname;
        if (this.edsConfig.apiKey && this.edsConfig.hostname) {
          edsApiKey = this.edsConfig.apiKey;
          hostname = this.edsConfig.hostname;
        } else {
          throw new Error("EDS API Key or hostname not present");
        }
        eventData.api_key = edsApiKey;
        await axios_default.post(`https://${hostname}/send_event`, eventData, {
          headers: {
            "Content-Type": "application/json"
          }
        }).catch((error) => {
          console.error(error);
        });
      } catch (err) {
        console.error("A11y Engine EDS Error - Failed in sendData", err);
      }
    },
    createRuntimeEvent(finalResult, configuration) {
      try {
        let edsEvent = {
          kind: {type: "SCAN_RUN", uuid: axe.utils.uuid.v4()},
          latency: {[constants_default.A11Y_ENGINE_SCAN]: 0}
        };
        Object.assign(edsEvent, this.getEDSConfigData(configuration));
        Object.assign(edsEvent, this.getEDSDataFromScanResult(finalResult));
        edsEvent.data.customRuleData = {};
        edsEvent.data.violations = [];
        edsEvent.data.incomplete = [];
        edsEvent.errors = finalResult.errors;
        delete edsEvent.engine_run_config.edsConfig;
        return edsEvent;
      } catch (err) {
        console.error("A11y Engine EDS Error - Failed in createRuntimeEvent", err);
      }
    },
    clearEDSData() {
      try {
        this.a11yEngineResult = {};
        this.edsConfig = {};
        this.customRuleData = {};
      } catch (err) {
        console.error("A11y Engine Error - Error in clearEDSData", err);
      }
    }
  };
  var eds_utils_default = EDSUtils;

  // lib/core/base/report-consolidation.js
  var ReportConsolidation = {
    getReport(scanResult = void 0) {
      try {
        let a11yEngineResult = {};
        a11yEngineResult.status = this.computeResultStatus();
        a11yEngineResult.errors = this.getErrorResult();
        if (scanResult) {
          this.removeFailedChecks(scanResult);
          this.removeAbortedResults(scanResult);
          this.updateExperimentalTags(scanResult);
          a11yEngineResult.data = scanResult;
          if (a11yEngineResult.data && a11yEngineResult.data.testEngine) {
            a11yEngineResult.data.testEngine.name = constants_default.A11Y_ENGINE;
            a11yEngineResult.data.testEngine.version = a11yEngine.version;
            a11yEngineResult.data.testRunner = constants_default.A11Y_ENGINE;
          }
        }
        return a11yEngineResult;
      } catch (error) {
        return this.getErrorReport(scanResult, error);
      }
    },
    appendEDSResult(a11yEngineResult, configuration) {
      a11yEngineResult.edsEvent = eds_utils_default.createEDSEvent(configuration);
      return a11yEngineResult;
    },
    updateExperimentalTags(result) {
      for (let key in result) {
        if (["violations", "incomplete", "passes", "inapplicable"].includes(key)) {
          result[key].forEach((rule) => {
            if (rule.tags && rule.tags.includes(constants_default.A11Y_ENGINE_EXPERIMENTAL)) {
              rule.tags = rule.tags.filter((tag) => tag != constants_default.A11Y_ENGINE_EXPERIMENTAL);
              rule.tags.push(constants_default.EXPERIMENTAL);
            }
          });
        }
      }
    },
    removeFailedChecks(result) {
      if (!result)
        return;
      let incomplete = [];
      let checkErrors = error_handler_default.errors[error_types_default.CHECK_ERROR];
      if (!checkErrors)
        return;
      let checksFailed = Object.keys(checkErrors);
      result.incomplete.forEach((rule) => {
        let isNodeIncomplete = true;
        let nodes = [];
        for (let i2 = 0; i2 < rule.nodes.length; i2++) {
          isNodeIncomplete = true;
          let node = rule.nodes[i2];
          let all2 = node.all;
          let any = node.any;
          let none = node.none;
          let checks2 = [].concat(all2).concat(any).concat(none);
          if (checks2.every((check) => checksFailed.includes(check.id))) {
            isNodeIncomplete = false;
          }
          if (isNodeIncomplete) {
            nodes.push(rule.nodes[i2]);
          }
        }
        rule.nodes = nodes;
        if (rule.nodes.length > 0) {
          incomplete.push(rule);
        }
      });
      result.incomplete = incomplete;
    },
    getErrorReport(result = void 0, error) {
      let a11yEngineErrorResult = {};
      a11yEngineErrorResult.data = result;
      a11yEngineErrorResult.status = ReportConsolidation.FAILURE;
      a11yEngineErrorResult.errors = {
        runtime_errors: [new a11y_engine_error_default(`Unable to consolidate A11y Engine Report.`, error)]
      };
      return a11yEngineErrorResult;
    },
    getErrorResult() {
      if (signal.aborted && a11yEngine.socketError) {
        error_handler_default.addCustomError(error_types_default.SERVER_ERROR, {
          message: a11yEngine.socketError,
          details: Array.from(abortedChecks.keys()).map((checkId) => ({
            id: checkId,
            nodes_count: abortedChecks.get(checkId)
          }))
        });
        abortedChecks.clear();
      } else if (signal.aborted && !a11yEngine.socketError) {
        error_handler_default.addCustomError(error_types_default.ABORT_ERROR, {
          message: signal.reason,
          details: Array.from(abortedChecks.keys()).map((checkId) => ({
            id: checkId,
            nodes_count: abortedChecks.get(checkId)
          }))
        });
        abortedChecks.clear();
      }
      let errors = structuredClone(error_handler_default.errors);
      delete errors[error_types_default.INSTRUMENTATION_ERROR];
      if (errors[error_types_default.CHECK_ERROR] && Object.keys(errors[error_types_default.CHECK_ERROR])) {
        let check_errors = Object.keys(errors[error_types_default.CHECK_ERROR]);
        if (check_errors.length > 0)
          errors[error_types_default.CHECK_ERROR] = check_errors;
      }
      return errors;
    },
    computeResultStatus() {
      let errorKeys = Object.keys(error_handler_default.errors);
      if (signal.aborted && !errorKeys.includes(error_types_default.SERVER_ERROR)) {
        return report_result_status_default.PARTIAL_SUCCESS;
      } else if (errorKeys.length <= 0) {
        return report_result_status_default.SUCCESS;
      } else if (errorKeys.includes(error_types_default.CONFIGURATION_ERROR) || errorKeys.includes(error_types_default.RUNTIME_ERROR)) {
        return report_result_status_default.FAILURE;
      } else if (errorKeys.includes(error_types_default.CHECK_ERROR)) {
        return report_result_status_default.PARTIAL_SUCCESS;
      } else if (errorKeys.includes(error_types_default.METADATA_ERROR)) {
        return report_result_status_default.SUCCESS_WITH_WARNING;
      } else if (errorKeys.includes(error_types_default.SERVER_ERROR)) {
        return report_result_status_default.FAILURE;
      }
      return report_result_status_default.FAILURE;
    },
    removeAbortedResults(result) {
      if (!result)
        return;
      const incomplete = [];
      result.incomplete.forEach((rule) => {
        let nodes = [];
        for (let i2 = 0; i2 < rule.nodes.length; i2++) {
          let node = rule.nodes[i2];
          const {all: all2, any, none} = node;
          const checks2 = [].concat(all2).concat(any).concat(none);
          if (checks2.every((check) => check.data !== constants_default.ABORT)) {
            nodes.push(rule.nodes[i2]);
          }
        }
        rule.nodes = nodes;
        if (rule.nodes.length > 0) {
          incomplete.push(rule);
        }
      });
      result.incomplete = incomplete;
    }
  };
  var report_consolidation_default = ReportConsolidation;

  // lib/core/public/eds-event-consolidator.js
  function edsEventConsolidator(edsEvents) {
    let combinedEvents = [];
    const skipFields = ["user"];
    try {
      const edsEventsUserIdMap = new Map();
      edsEvents.forEach((event) => {
        const userId2 = event?.user?.user_id;
        const userEvents = edsEventsUserIdMap.get(userId2) || [];
        userEvents.push(event);
        edsEventsUserIdMap.set(userId2, userEvents);
      });
      combinedEvents = Array.from(edsEventsUserIdMap.values()).map((userEvents) => {
        const eventResult = {};
        let edsData = consolidate(userEvents, skipFields);
        if (Object.keys(edsData).length > 0) {
          eventResult.event_type = constants_default.A11Y_ENGINE_STATS;
          eventResult.data = edsData;
        }
        return eventResult;
      });
    } catch (error) {
      console.error(`Failed to consolidate the EDS events : ${error}`);
    }
    return combinedEvents;
  }
  function consolidate(events, skipFields) {
    let nonObjectFields = new Set();
    let result = {};
    try {
      events.forEach((event) => {
        const uuid = event.kind.uuid;
        delete event.kind.uuid;
        for (let key of Object.keys(event)) {
          let value2 = event[key];
          if (!value2 || typeof value2 === "string" && value2.trim() === "" || typeof value2 === "object" && Object.keys(value2).length === 0) {
            continue;
          }
          if (skipFields.includes(key)) {
            result[key] = event[key];
            continue;
          }
          if (!result[key]) {
            result[key] = {arr: []};
          }
          let row = {};
          if (event[key] && typeof event[key] === "object") {
            row = {
              ...event[key],
              uuid
            };
          } else if (event[key] && typeof event[key] !== "object") {
            nonObjectFields.add(key);
            row[key] = event[key];
            row["uuid"] = uuid;
          }
          if (row.length !== 0) {
            result[key]["arr"].push(row);
          }
        }
      });
      Object.keys(result).filter((key) => nonObjectFields.has(key)).forEach((key) => {
        result[key] = JSON.stringify(result[key]);
      });
    } catch (error) {
      console.error(`Failed to consolidate the EDS events : ${error}`);
    }
    return result;
  }

  // lib/core/public/ruleMapping.js
  var ruleMap = {
    "skip-link": "bypass-blocks-skip-links",
    "link-in-text-block": "distinguishable-link",
    "empty-table-header": "meaningful-sequence"
  };
  var ruleMapping_default = ruleMap;

  // lib/core/public/configureRules.js
  function configureRules(config) {
    for (const [axeCoreRule, a11yEngineRule] of Object.entries(ruleMapping_default)) {
      if (isRuleExcludedFromAxeCore(axeCoreRule, config)) {
        excludeRule(a11yEngineRule, config);
      } else if (!isRuleExcludedFromAxeCore(a11yEngineRule, config)) {
        excludeRule(axeCoreRule, config);
      }
    }
  }
  function isRuleExcludedFromAxeCore(rule, config) {
    if (config.axeCoreConfig && config.axeCoreConfig.rules && config.axeCoreConfig.rules.hasOwnProperty(rule)) {
      return !config.axeCoreConfig.rules[rule].enabled;
    }
    return false;
  }
  function excludeRule(rule, config) {
    if (!config.axeCoreConfig.rules) {
      config.axeCoreConfig.rules = {};
    }
    if (!config.axeCoreConfig.rules[rule]) {
      config.axeCoreConfig.rules[rule] = {enabled: false};
    }
  }
  var configureRules_default = configureRules;

  // node_modules/engine.io-parser/build/esm/commons.js
  var PACKET_TYPES = Object.create(null);
  PACKET_TYPES["open"] = "0";
  PACKET_TYPES["close"] = "1";
  PACKET_TYPES["ping"] = "2";
  PACKET_TYPES["pong"] = "3";
  PACKET_TYPES["message"] = "4";
  PACKET_TYPES["upgrade"] = "5";
  PACKET_TYPES["noop"] = "6";
  var PACKET_TYPES_REVERSE = Object.create(null);
  Object.keys(PACKET_TYPES).forEach((key) => {
    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
  });
  var ERROR_PACKET = {type: "error", data: "parser error"};

  // node_modules/engine.io-parser/build/esm/encodePacket.browser.js
  var withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
  var withNativeArrayBuffer = typeof ArrayBuffer === "function";
  var isView = (obj) => {
    return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
  };
  var encodePacket = ({type, data}, supportsBinary, callback) => {
    if (withNativeBlob && data instanceof Blob) {
      if (supportsBinary) {
        return callback(data);
      } else {
        return encodeBlobAsBase64(data, callback);
      }
    } else if (withNativeArrayBuffer && (data instanceof ArrayBuffer || isView(data))) {
      if (supportsBinary) {
        return callback(data);
      } else {
        return encodeBlobAsBase64(new Blob([data]), callback);
      }
    }
    return callback(PACKET_TYPES[type] + (data || ""));
  };
  var encodeBlobAsBase64 = (data, callback) => {
    const fileReader = new FileReader();
    fileReader.onload = function() {
      const content = fileReader.result.split(",")[1];
      callback("b" + (content || ""));
    };
    return fileReader.readAsDataURL(data);
  };
  function toArray2(data) {
    if (data instanceof Uint8Array) {
      return data;
    } else if (data instanceof ArrayBuffer) {
      return new Uint8Array(data);
    } else {
      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
    }
  }
  var TEXT_ENCODER;
  function encodePacketToBinary(packet, callback) {
    if (withNativeBlob && packet.data instanceof Blob) {
      return packet.data.arrayBuffer().then(toArray2).then(callback);
    } else if (withNativeArrayBuffer && (packet.data instanceof ArrayBuffer || isView(packet.data))) {
      return callback(toArray2(packet.data));
    }
    encodePacket(packet, false, (encoded) => {
      if (!TEXT_ENCODER) {
        TEXT_ENCODER = new TextEncoder();
      }
      callback(TEXT_ENCODER.encode(encoded));
    });
  }

  // node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js
  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var lookup = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
  for (let i2 = 0; i2 < chars.length; i2++) {
    lookup[chars.charCodeAt(i2)] = i2;
  }
  var decode = (base64) => {
    let bufferLength = base64.length * 0.75, len = base64.length, i2, p = 0, encoded1, encoded2, encoded3, encoded4;
    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }
    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
    for (i2 = 0; i2 < len; i2 += 4) {
      encoded1 = lookup[base64.charCodeAt(i2)];
      encoded2 = lookup[base64.charCodeAt(i2 + 1)];
      encoded3 = lookup[base64.charCodeAt(i2 + 2)];
      encoded4 = lookup[base64.charCodeAt(i2 + 3)];
      bytes[p++] = encoded1 << 2 | encoded2 >> 4;
      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return arraybuffer;
  };

  // node_modules/engine.io-parser/build/esm/decodePacket.browser.js
  var withNativeArrayBuffer2 = typeof ArrayBuffer === "function";
  var decodePacket = (encodedPacket, binaryType) => {
    if (typeof encodedPacket !== "string") {
      return {
        type: "message",
        data: mapBinary(encodedPacket, binaryType)
      };
    }
    const type = encodedPacket.charAt(0);
    if (type === "b") {
      return {
        type: "message",
        data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
      };
    }
    const packetType = PACKET_TYPES_REVERSE[type];
    if (!packetType) {
      return ERROR_PACKET;
    }
    return encodedPacket.length > 1 ? {
      type: PACKET_TYPES_REVERSE[type],
      data: encodedPacket.substring(1)
    } : {
      type: PACKET_TYPES_REVERSE[type]
    };
  };
  var decodeBase64Packet = (data, binaryType) => {
    if (withNativeArrayBuffer2) {
      const decoded = decode(data);
      return mapBinary(decoded, binaryType);
    } else {
      return {base64: true, data};
    }
  };
  var mapBinary = (data, binaryType) => {
    switch (binaryType) {
      case "blob":
        if (data instanceof Blob) {
          return data;
        } else {
          return new Blob([data]);
        }
      case "arraybuffer":
      default:
        if (data instanceof ArrayBuffer) {
          return data;
        } else {
          return data.buffer;
        }
    }
  };

  // node_modules/engine.io-parser/build/esm/index.js
  var SEPARATOR = String.fromCharCode(30);
  var encodePayload = (packets, callback) => {
    const length2 = packets.length;
    const encodedPackets = new Array(length2);
    let count = 0;
    packets.forEach((packet, i2) => {
      encodePacket(packet, false, (encodedPacket) => {
        encodedPackets[i2] = encodedPacket;
        if (++count === length2) {
          callback(encodedPackets.join(SEPARATOR));
        }
      });
    });
  };
  var decodePayload = (encodedPayload, binaryType) => {
    const encodedPackets = encodedPayload.split(SEPARATOR);
    const packets = [];
    for (let i2 = 0; i2 < encodedPackets.length; i2++) {
      const decodedPacket = decodePacket(encodedPackets[i2], binaryType);
      packets.push(decodedPacket);
      if (decodedPacket.type === "error") {
        break;
      }
    }
    return packets;
  };
  function createPacketEncoderStream() {
    return new TransformStream({
      transform(packet, controller2) {
        encodePacketToBinary(packet, (encodedPacket) => {
          const payloadLength = encodedPacket.length;
          let header;
          if (payloadLength < 126) {
            header = new Uint8Array(1);
            new DataView(header.buffer).setUint8(0, payloadLength);
          } else if (payloadLength < 65536) {
            header = new Uint8Array(3);
            const view = new DataView(header.buffer);
            view.setUint8(0, 126);
            view.setUint16(1, payloadLength);
          } else {
            header = new Uint8Array(9);
            const view = new DataView(header.buffer);
            view.setUint8(0, 127);
            view.setBigUint64(1, BigInt(payloadLength));
          }
          if (packet.data && typeof packet.data !== "string") {
            header[0] |= 128;
          }
          controller2.enqueue(header);
          controller2.enqueue(encodedPacket);
        });
      }
    });
  }
  var TEXT_DECODER;
  function totalLength(chunks) {
    return chunks.reduce((acc, chunk) => acc + chunk.length, 0);
  }
  function concatChunks(chunks, size) {
    if (chunks[0].length === size) {
      return chunks.shift();
    }
    const buffer = new Uint8Array(size);
    let j = 0;
    for (let i2 = 0; i2 < size; i2++) {
      buffer[i2] = chunks[0][j++];
      if (j === chunks[0].length) {
        chunks.shift();
        j = 0;
      }
    }
    if (chunks.length && j < chunks[0].length) {
      chunks[0] = chunks[0].slice(j);
    }
    return buffer;
  }
  function createPacketDecoderStream(maxPayload, binaryType) {
    if (!TEXT_DECODER) {
      TEXT_DECODER = new TextDecoder();
    }
    const chunks = [];
    let state = 0;
    let expectedLength = -1;
    let isBinary2 = false;
    return new TransformStream({
      transform(chunk, controller2) {
        chunks.push(chunk);
        while (true) {
          if (state === 0) {
            if (totalLength(chunks) < 1) {
              break;
            }
            const header = concatChunks(chunks, 1);
            isBinary2 = (header[0] & 128) === 128;
            expectedLength = header[0] & 127;
            if (expectedLength < 126) {
              state = 3;
            } else if (expectedLength === 126) {
              state = 1;
            } else {
              state = 2;
            }
          } else if (state === 1) {
            if (totalLength(chunks) < 2) {
              break;
            }
            const headerArray = concatChunks(chunks, 2);
            expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);
            state = 3;
          } else if (state === 2) {
            if (totalLength(chunks) < 8) {
              break;
            }
            const headerArray = concatChunks(chunks, 8);
            const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);
            const n = view.getUint32(0);
            if (n > Math.pow(2, 53 - 32) - 1) {
              controller2.enqueue(ERROR_PACKET);
              break;
            }
            expectedLength = n * Math.pow(2, 32) + view.getUint32(4);
            state = 3;
          } else {
            if (totalLength(chunks) < expectedLength) {
              break;
            }
            const data = concatChunks(chunks, expectedLength);
            controller2.enqueue(decodePacket(isBinary2 ? data : TEXT_DECODER.decode(data), binaryType));
            state = 0;
          }
          if (expectedLength === 0 || expectedLength > maxPayload) {
            controller2.enqueue(ERROR_PACKET);
            break;
          }
        }
      }
    });
  }
  var protocol = 4;

  // node_modules/@socket.io/component-emitter/lib/esm/index.js
  function Emitter(obj) {
    if (obj)
      return mixin(obj);
  }
  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }
    return obj;
  }
  Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {};
    (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
    return this;
  };
  Emitter.prototype.once = function(event, fn) {
    function on2() {
      this.off(event, on2);
      fn.apply(this, arguments);
    }
    on2.fn = fn;
    this.on(event, on2);
    return this;
  };
  Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {};
    if (arguments.length == 0) {
      this._callbacks = {};
      return this;
    }
    var callbacks = this._callbacks["$" + event];
    if (!callbacks)
      return this;
    if (arguments.length == 1) {
      delete this._callbacks["$" + event];
      return this;
    }
    var cb;
    for (var i2 = 0; i2 < callbacks.length; i2++) {
      cb = callbacks[i2];
      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i2, 1);
        break;
      }
    }
    if (callbacks.length === 0) {
      delete this._callbacks["$" + event];
    }
    return this;
  };
  Emitter.prototype.emit = function(event) {
    this._callbacks = this._callbacks || {};
    var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
    for (var i2 = 1; i2 < arguments.length; i2++) {
      args[i2 - 1] = arguments[i2];
    }
    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i2 = 0, len = callbacks.length; i2 < len; ++i2) {
        callbacks[i2].apply(this, args);
      }
    }
    return this;
  };
  Emitter.prototype.emitReserved = Emitter.prototype.emit;
  Emitter.prototype.listeners = function(event) {
    this._callbacks = this._callbacks || {};
    return this._callbacks["$" + event] || [];
  };
  Emitter.prototype.hasListeners = function(event) {
    return !!this.listeners(event).length;
  };

  // node_modules/engine.io-client/build/esm/globalThis.browser.js
  var globalThisShim = (() => {
    if (typeof self !== "undefined") {
      return self;
    } else if (typeof window !== "undefined") {
      return window;
    } else {
      return Function("return this")();
    }
  })();

  // node_modules/engine.io-client/build/esm/util.js
  function pick(obj, ...attr) {
    return attr.reduce((acc, k) => {
      if (obj.hasOwnProperty(k)) {
        acc[k] = obj[k];
      }
      return acc;
    }, {});
  }
  var NATIVE_SET_TIMEOUT = globalThisShim.setTimeout;
  var NATIVE_CLEAR_TIMEOUT = globalThisShim.clearTimeout;
  function installTimerFunctions(obj, opts) {
    if (opts.useNativeTimers) {
      obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThisShim);
      obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThisShim);
    } else {
      obj.setTimeoutFn = globalThisShim.setTimeout.bind(globalThisShim);
      obj.clearTimeoutFn = globalThisShim.clearTimeout.bind(globalThisShim);
    }
  }
  var BASE64_OVERHEAD = 1.33;
  function byteLength(obj) {
    if (typeof obj === "string") {
      return utf8Length(obj);
    }
    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
  }
  function utf8Length(str) {
    let c = 0, length2 = 0;
    for (let i2 = 0, l = str.length; i2 < l; i2++) {
      c = str.charCodeAt(i2);
      if (c < 128) {
        length2 += 1;
      } else if (c < 2048) {
        length2 += 2;
      } else if (c < 55296 || c >= 57344) {
        length2 += 3;
      } else {
        i2++;
        length2 += 4;
      }
    }
    return length2;
  }

  // node_modules/engine.io-client/build/esm/contrib/parseqs.js
  function encode3(obj) {
    let str = "";
    for (let i2 in obj) {
      if (obj.hasOwnProperty(i2)) {
        if (str.length)
          str += "&";
        str += encodeURIComponent(i2) + "=" + encodeURIComponent(obj[i2]);
      }
    }
    return str;
  }
  function decode2(qs) {
    let qry = {};
    let pairs = qs.split("&");
    for (let i2 = 0, l = pairs.length; i2 < l; i2++) {
      let pair = pairs[i2].split("=");
      qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
    }
    return qry;
  }

  // node_modules/engine.io-client/build/esm/transport.js
  var TransportError = class extends Error {
    constructor(reason, description2, context) {
      super(reason);
      this.description = description2;
      this.context = context;
      this.type = "TransportError";
    }
  };
  var Transport = class extends Emitter {
    constructor(opts) {
      super();
      this.writable = false;
      installTimerFunctions(this, opts);
      this.opts = opts;
      this.query = opts.query;
      this.socket = opts.socket;
    }
    onError(reason, description2, context) {
      super.emitReserved("error", new TransportError(reason, description2, context));
      return this;
    }
    open() {
      this.readyState = "opening";
      this.doOpen();
      return this;
    }
    close() {
      if (this.readyState === "opening" || this.readyState === "open") {
        this.doClose();
        this.onClose();
      }
      return this;
    }
    send(packets) {
      if (this.readyState === "open") {
        this.write(packets);
      } else {
      }
    }
    onOpen() {
      this.readyState = "open";
      this.writable = true;
      super.emitReserved("open");
    }
    onData(data) {
      const packet = decodePacket(data, this.socket.binaryType);
      this.onPacket(packet);
    }
    onPacket(packet) {
      super.emitReserved("packet", packet);
    }
    onClose(details) {
      this.readyState = "closed";
      super.emitReserved("close", details);
    }
    pause(onPause) {
    }
    createUri(schema, query = {}) {
      return schema + "://" + this._hostname() + this._port() + this.opts.path + this._query(query);
    }
    _hostname() {
      const hostname = this.opts.hostname;
      return hostname.indexOf(":") === -1 ? hostname : "[" + hostname + "]";
    }
    _port() {
      if (this.opts.port && (this.opts.secure && Number(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80)) {
        return ":" + this.opts.port;
      } else {
        return "";
      }
    }
    _query(query) {
      const encodedQuery = encode3(query);
      return encodedQuery.length ? "?" + encodedQuery : "";
    }
  };

  // node_modules/engine.io-client/build/esm/contrib/yeast.js
  "use strict";
  var alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split("");
  var length = 64;
  var map = {};
  var seed = 0;
  var i = 0;
  var prev;
  function encode4(num) {
    let encoded = "";
    do {
      encoded = alphabet[num % length] + encoded;
      num = Math.floor(num / length);
    } while (num > 0);
    return encoded;
  }
  function yeast() {
    const now = encode4(+new Date());
    if (now !== prev)
      return seed = 0, prev = now;
    return now + "." + encode4(seed++);
  }
  for (; i < length; i++)
    map[alphabet[i]] = i;

  // node_modules/engine.io-client/build/esm/contrib/has-cors.js
  var value = false;
  try {
    value = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
  } catch (err) {
  }
  var hasCORS = value;

  // node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js
  function XHR(opts) {
    const xdomain = opts.xdomain;
    try {
      if (typeof XMLHttpRequest !== "undefined" && (!xdomain || hasCORS)) {
        return new XMLHttpRequest();
      }
    } catch (e) {
    }
    if (!xdomain) {
      try {
        return new globalThisShim[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
      } catch (e) {
      }
    }
  }
  function createCookieJar() {
  }

  // node_modules/engine.io-client/build/esm/transports/polling.js
  function empty() {
  }
  var hasXHR2 = function() {
    const xhr = new XHR({
      xdomain: false
    });
    return xhr.responseType != null;
  }();
  var Polling = class extends Transport {
    constructor(opts) {
      super(opts);
      this.polling = false;
      if (typeof location !== "undefined") {
        const isSSL = location.protocol === "https:";
        let port = location.port;
        if (!port) {
          port = isSSL ? "443" : "80";
        }
        this.xd = typeof location !== "undefined" && opts.hostname !== location.hostname || port !== opts.port;
      }
      const forceBase64 = opts && opts.forceBase64;
      this.supportsBinary = hasXHR2 && !forceBase64;
      if (this.opts.withCredentials) {
        this.cookieJar = createCookieJar();
      }
    }
    get name() {
      return "polling";
    }
    doOpen() {
      this.poll();
    }
    pause(onPause) {
      this.readyState = "pausing";
      const pause = () => {
        this.readyState = "paused";
        onPause();
      };
      if (this.polling || !this.writable) {
        let total = 0;
        if (this.polling) {
          total++;
          this.once("pollComplete", function() {
            --total || pause();
          });
        }
        if (!this.writable) {
          total++;
          this.once("drain", function() {
            --total || pause();
          });
        }
      } else {
        pause();
      }
    }
    poll() {
      this.polling = true;
      this.doPoll();
      this.emitReserved("poll");
    }
    onData(data) {
      const callback = (packet) => {
        if (this.readyState === "opening" && packet.type === "open") {
          this.onOpen();
        }
        if (packet.type === "close") {
          this.onClose({description: "transport closed by the server"});
          return false;
        }
        this.onPacket(packet);
      };
      decodePayload(data, this.socket.binaryType).forEach(callback);
      if (this.readyState !== "closed") {
        this.polling = false;
        this.emitReserved("pollComplete");
        if (this.readyState === "open") {
          this.poll();
        } else {
        }
      }
    }
    doClose() {
      const close = () => {
        this.write([{type: "close"}]);
      };
      if (this.readyState === "open") {
        close();
      } else {
        this.once("open", close);
      }
    }
    write(packets) {
      this.writable = false;
      encodePayload(packets, (data) => {
        this.doWrite(data, () => {
          this.writable = true;
          this.emitReserved("drain");
        });
      });
    }
    uri() {
      const schema = this.opts.secure ? "https" : "http";
      const query = this.query || {};
      if (this.opts.timestampRequests !== false) {
        query[this.opts.timestampParam] = yeast();
      }
      if (!this.supportsBinary && !query.sid) {
        query.b64 = 1;
      }
      return this.createUri(schema, query);
    }
    request(opts = {}) {
      Object.assign(opts, {xd: this.xd, cookieJar: this.cookieJar}, this.opts);
      return new Request2(this.uri(), opts);
    }
    doWrite(data, fn) {
      const req = this.request({
        method: "POST",
        data
      });
      req.on("success", fn);
      req.on("error", (xhrStatus, context) => {
        this.onError("xhr post error", xhrStatus, context);
      });
    }
    doPoll() {
      const req = this.request();
      req.on("data", this.onData.bind(this));
      req.on("error", (xhrStatus, context) => {
        this.onError("xhr poll error", xhrStatus, context);
      });
      this.pollXhr = req;
    }
  };
  var Request2 = class extends Emitter {
    constructor(uri, opts) {
      super();
      installTimerFunctions(this, opts);
      this.opts = opts;
      this.method = opts.method || "GET";
      this.uri = uri;
      this.data = opts.data !== void 0 ? opts.data : null;
      this.create();
    }
    create() {
      var _a;
      const opts = pick(this.opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
      opts.xdomain = !!this.opts.xd;
      const xhr = this.xhr = new XHR(opts);
      try {
        xhr.open(this.method, this.uri, true);
        try {
          if (this.opts.extraHeaders) {
            xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
            for (let i2 in this.opts.extraHeaders) {
              if (this.opts.extraHeaders.hasOwnProperty(i2)) {
                xhr.setRequestHeader(i2, this.opts.extraHeaders[i2]);
              }
            }
          }
        } catch (e) {
        }
        if (this.method === "POST") {
          try {
            xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
          } catch (e) {
          }
        }
        try {
          xhr.setRequestHeader("Accept", "*/*");
        } catch (e) {
        }
        (_a = this.opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);
        if ("withCredentials" in xhr) {
          xhr.withCredentials = this.opts.withCredentials;
        }
        if (this.opts.requestTimeout) {
          xhr.timeout = this.opts.requestTimeout;
        }
        xhr.onreadystatechange = () => {
          var _a2;
          if (xhr.readyState === 3) {
            (_a2 = this.opts.cookieJar) === null || _a2 === void 0 ? void 0 : _a2.parseCookies(xhr);
          }
          if (xhr.readyState !== 4)
            return;
          if (xhr.status === 200 || xhr.status === 1223) {
            this.onLoad();
          } else {
            this.setTimeoutFn(() => {
              this.onError(typeof xhr.status === "number" ? xhr.status : 0);
            }, 0);
          }
        };
        xhr.send(this.data);
      } catch (e) {
        this.setTimeoutFn(() => {
          this.onError(e);
        }, 0);
        return;
      }
      if (typeof document !== "undefined") {
        this.index = Request2.requestsCount++;
        Request2.requests[this.index] = this;
      }
    }
    onError(err) {
      this.emitReserved("error", err, this.xhr);
      this.cleanup(true);
    }
    cleanup(fromError) {
      if (typeof this.xhr === "undefined" || this.xhr === null) {
        return;
      }
      this.xhr.onreadystatechange = empty;
      if (fromError) {
        try {
          this.xhr.abort();
        } catch (e) {
        }
      }
      if (typeof document !== "undefined") {
        delete Request2.requests[this.index];
      }
      this.xhr = null;
    }
    onLoad() {
      const data = this.xhr.responseText;
      if (data !== null) {
        this.emitReserved("data", data);
        this.emitReserved("success");
        this.cleanup();
      }
    }
    abort() {
      this.cleanup();
    }
  };
  Request2.requestsCount = 0;
  Request2.requests = {};
  if (typeof document !== "undefined") {
    if (typeof attachEvent === "function") {
      attachEvent("onunload", unloadHandler);
    } else if (typeof addEventListener === "function") {
      const terminationEvent = "onpagehide" in globalThisShim ? "pagehide" : "unload";
      addEventListener(terminationEvent, unloadHandler, false);
    }
  }
  function unloadHandler() {
    for (let i2 in Request2.requests) {
      if (Request2.requests.hasOwnProperty(i2)) {
        Request2.requests[i2].abort();
      }
    }
  }

  // node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js
  var nextTick = (() => {
    const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
    if (isPromiseAvailable) {
      return (cb) => Promise.resolve().then(cb);
    } else {
      return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);
    }
  })();
  var WebSocket = globalThisShim.WebSocket || globalThisShim.MozWebSocket;
  var usingBrowserWebSocket = true;
  var defaultBinaryType = "arraybuffer";

  // node_modules/engine.io-client/build/esm/transports/websocket.js
  var isReactNative = typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
  var WS = class extends Transport {
    constructor(opts) {
      super(opts);
      this.supportsBinary = !opts.forceBase64;
    }
    get name() {
      return "websocket";
    }
    doOpen() {
      if (!this.check()) {
        return;
      }
      const uri = this.uri();
      const protocols = this.opts.protocols;
      const opts = isReactNative ? {} : pick(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
      if (this.opts.extraHeaders) {
        opts.headers = this.opts.extraHeaders;
      }
      try {
        this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);
      } catch (err) {
        return this.emitReserved("error", err);
      }
      this.ws.binaryType = this.socket.binaryType;
      this.addEventListeners();
    }
    addEventListeners() {
      this.ws.onopen = () => {
        if (this.opts.autoUnref) {
          this.ws._socket.unref();
        }
        this.onOpen();
      };
      this.ws.onclose = (closeEvent) => this.onClose({
        description: "websocket connection closed",
        context: closeEvent
      });
      this.ws.onmessage = (ev) => this.onData(ev.data);
      this.ws.onerror = (e) => this.onError("websocket error", e);
    }
    write(packets) {
      this.writable = false;
      for (let i2 = 0; i2 < packets.length; i2++) {
        const packet = packets[i2];
        const lastPacket = i2 === packets.length - 1;
        encodePacket(packet, this.supportsBinary, (data) => {
          const opts = {};
          if (!usingBrowserWebSocket) {
            if (packet.options) {
              opts.compress = packet.options.compress;
            }
            if (this.opts.perMessageDeflate) {
              const len = typeof data === "string" ? Buffer.byteLength(data) : data.length;
              if (len < this.opts.perMessageDeflate.threshold) {
                opts.compress = false;
              }
            }
          }
          try {
            if (usingBrowserWebSocket) {
              this.ws.send(data);
            } else {
              this.ws.send(data, opts);
            }
          } catch (e) {
          }
          if (lastPacket) {
            nextTick(() => {
              this.writable = true;
              this.emitReserved("drain");
            }, this.setTimeoutFn);
          }
        });
      }
    }
    doClose() {
      if (typeof this.ws !== "undefined") {
        this.ws.close();
        this.ws = null;
      }
    }
    uri() {
      const schema = this.opts.secure ? "wss" : "ws";
      const query = this.query || {};
      if (this.opts.timestampRequests) {
        query[this.opts.timestampParam] = yeast();
      }
      if (!this.supportsBinary) {
        query.b64 = 1;
      }
      return this.createUri(schema, query);
    }
    check() {
      return !!WebSocket;
    }
  };

  // node_modules/engine.io-client/build/esm/transports/webtransport.js
  var WT = class extends Transport {
    get name() {
      return "webtransport";
    }
    doOpen() {
      if (typeof WebTransport !== "function") {
        return;
      }
      this.transport = new WebTransport(this.createUri("https"), this.opts.transportOptions[this.name]);
      this.transport.closed.then(() => {
        this.onClose();
      }).catch((err) => {
        this.onError("webtransport error", err);
      });
      this.transport.ready.then(() => {
        this.transport.createBidirectionalStream().then((stream) => {
          const decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, this.socket.binaryType);
          const reader = stream.readable.pipeThrough(decoderStream).getReader();
          const encoderStream = createPacketEncoderStream();
          encoderStream.readable.pipeTo(stream.writable);
          this.writer = encoderStream.writable.getWriter();
          const read = () => {
            reader.read().then(({done, value: value2}) => {
              if (done) {
                return;
              }
              this.onPacket(value2);
              read();
            }).catch((err) => {
            });
          };
          read();
          const packet = {type: "open"};
          if (this.query.sid) {
            packet.data = `{"sid":"${this.query.sid}"}`;
          }
          this.writer.write(packet).then(() => this.onOpen());
        });
      });
    }
    write(packets) {
      this.writable = false;
      for (let i2 = 0; i2 < packets.length; i2++) {
        const packet = packets[i2];
        const lastPacket = i2 === packets.length - 1;
        this.writer.write(packet).then(() => {
          if (lastPacket) {
            nextTick(() => {
              this.writable = true;
              this.emitReserved("drain");
            }, this.setTimeoutFn);
          }
        });
      }
    }
    doClose() {
      var _a;
      (_a = this.transport) === null || _a === void 0 ? void 0 : _a.close();
    }
  };

  // node_modules/engine.io-client/build/esm/transports/index.js
  var transports = {
    websocket: WS,
    webtransport: WT,
    polling: Polling
  };

  // node_modules/engine.io-client/build/esm/contrib/parseuri.js
  var re = /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
  var parts = [
    "source",
    "protocol",
    "authority",
    "userInfo",
    "user",
    "password",
    "host",
    "port",
    "relative",
    "path",
    "directory",
    "file",
    "query",
    "anchor"
  ];
  function parse(str) {
    if (str.length > 2e3) {
      throw "URI too long";
    }
    const src = str, b = str.indexOf("["), e = str.indexOf("]");
    if (b != -1 && e != -1) {
      str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ";") + str.substring(e, str.length);
    }
    let m = re.exec(str || ""), uri = {}, i2 = 14;
    while (i2--) {
      uri[parts[i2]] = m[i2] || "";
    }
    if (b != -1 && e != -1) {
      uri.source = src;
      uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");
      uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");
      uri.ipv6uri = true;
    }
    uri.pathNames = pathNames(uri, uri["path"]);
    uri.queryKey = queryKey(uri, uri["query"]);
    return uri;
  }
  function pathNames(obj, path) {
    const regx = /\/{2,9}/g, names = path.replace(regx, "/").split("/");
    if (path.slice(0, 1) == "/" || path.length === 0) {
      names.splice(0, 1);
    }
    if (path.slice(-1) == "/") {
      names.splice(names.length - 1, 1);
    }
    return names;
  }
  function queryKey(uri, query) {
    const data = {};
    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function($0, $1, $2) {
      if ($1) {
        data[$1] = $2;
      }
    });
    return data;
  }

  // node_modules/engine.io-client/build/esm/socket.js
  var Socket = class extends Emitter {
    constructor(uri, opts = {}) {
      super();
      this.binaryType = defaultBinaryType;
      this.writeBuffer = [];
      if (uri && typeof uri === "object") {
        opts = uri;
        uri = null;
      }
      if (uri) {
        uri = parse(uri);
        opts.hostname = uri.host;
        opts.secure = uri.protocol === "https" || uri.protocol === "wss";
        opts.port = uri.port;
        if (uri.query)
          opts.query = uri.query;
      } else if (opts.host) {
        opts.hostname = parse(opts.host).host;
      }
      installTimerFunctions(this, opts);
      this.secure = opts.secure != null ? opts.secure : typeof location !== "undefined" && location.protocol === "https:";
      if (opts.hostname && !opts.port) {
        opts.port = this.secure ? "443" : "80";
      }
      this.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
      this.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : this.secure ? "443" : "80");
      this.transports = opts.transports || [
        "polling",
        "websocket",
        "webtransport"
      ];
      this.writeBuffer = [];
      this.prevBufferLen = 0;
      this.opts = Object.assign({
        path: "/engine.io",
        agent: false,
        withCredentials: false,
        upgrade: true,
        timestampParam: "t",
        rememberUpgrade: false,
        addTrailingSlash: true,
        rejectUnauthorized: true,
        perMessageDeflate: {
          threshold: 1024
        },
        transportOptions: {},
        closeOnBeforeunload: false
      }, opts);
      this.opts.path = this.opts.path.replace(/\/$/, "") + (this.opts.addTrailingSlash ? "/" : "");
      if (typeof this.opts.query === "string") {
        this.opts.query = decode2(this.opts.query);
      }
      this.id = null;
      this.upgrades = null;
      this.pingInterval = null;
      this.pingTimeout = null;
      this.pingTimeoutTimer = null;
      if (typeof addEventListener === "function") {
        if (this.opts.closeOnBeforeunload) {
          this.beforeunloadEventListener = () => {
            if (this.transport) {
              this.transport.removeAllListeners();
              this.transport.close();
            }
          };
          addEventListener("beforeunload", this.beforeunloadEventListener, false);
        }
        if (this.hostname !== "localhost") {
          this.offlineEventListener = () => {
            this.onClose("transport close", {
              description: "network connection lost"
            });
          };
          addEventListener("offline", this.offlineEventListener, false);
        }
      }
      this.open();
    }
    createTransport(name2) {
      const query = Object.assign({}, this.opts.query);
      query.EIO = protocol;
      query.transport = name2;
      if (this.id)
        query.sid = this.id;
      const opts = Object.assign({}, this.opts, {
        query,
        socket: this,
        hostname: this.hostname,
        secure: this.secure,
        port: this.port
      }, this.opts.transportOptions[name2]);
      return new transports[name2](opts);
    }
    open() {
      let transport;
      if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1) {
        transport = "websocket";
      } else if (this.transports.length === 0) {
        this.setTimeoutFn(() => {
          this.emitReserved("error", "No transports available");
        }, 0);
        return;
      } else {
        transport = this.transports[0];
      }
      this.readyState = "opening";
      try {
        transport = this.createTransport(transport);
      } catch (e) {
        this.transports.shift();
        this.open();
        return;
      }
      transport.open();
      this.setTransport(transport);
    }
    setTransport(transport) {
      if (this.transport) {
        this.transport.removeAllListeners();
      }
      this.transport = transport;
      transport.on("drain", this.onDrain.bind(this)).on("packet", this.onPacket.bind(this)).on("error", this.onError.bind(this)).on("close", (reason) => this.onClose("transport close", reason));
    }
    probe(name2) {
      let transport = this.createTransport(name2);
      let failed = false;
      Socket.priorWebsocketSuccess = false;
      const onTransportOpen = () => {
        if (failed)
          return;
        transport.send([{type: "ping", data: "probe"}]);
        transport.once("packet", (msg) => {
          if (failed)
            return;
          if (msg.type === "pong" && msg.data === "probe") {
            this.upgrading = true;
            this.emitReserved("upgrading", transport);
            if (!transport)
              return;
            Socket.priorWebsocketSuccess = transport.name === "websocket";
            this.transport.pause(() => {
              if (failed)
                return;
              if (this.readyState === "closed")
                return;
              cleanup2();
              this.setTransport(transport);
              transport.send([{type: "upgrade"}]);
              this.emitReserved("upgrade", transport);
              transport = null;
              this.upgrading = false;
              this.flush();
            });
          } else {
            const err = new Error("probe error");
            err.transport = transport.name;
            this.emitReserved("upgradeError", err);
          }
        });
      };
      function freezeTransport() {
        if (failed)
          return;
        failed = true;
        cleanup2();
        transport.close();
        transport = null;
      }
      const onerror = (err) => {
        const error = new Error("probe error: " + err);
        error.transport = transport.name;
        freezeTransport();
        this.emitReserved("upgradeError", error);
      };
      function onTransportClose() {
        onerror("transport closed");
      }
      function onclose() {
        onerror("socket closed");
      }
      function onupgrade(to) {
        if (transport && to.name !== transport.name) {
          freezeTransport();
        }
      }
      const cleanup2 = () => {
        transport.removeListener("open", onTransportOpen);
        transport.removeListener("error", onerror);
        transport.removeListener("close", onTransportClose);
        this.off("close", onclose);
        this.off("upgrading", onupgrade);
      };
      transport.once("open", onTransportOpen);
      transport.once("error", onerror);
      transport.once("close", onTransportClose);
      this.once("close", onclose);
      this.once("upgrading", onupgrade);
      if (this.upgrades.indexOf("webtransport") !== -1 && name2 !== "webtransport") {
        this.setTimeoutFn(() => {
          if (!failed) {
            transport.open();
          }
        }, 200);
      } else {
        transport.open();
      }
    }
    onOpen() {
      this.readyState = "open";
      Socket.priorWebsocketSuccess = this.transport.name === "websocket";
      this.emitReserved("open");
      this.flush();
      if (this.readyState === "open" && this.opts.upgrade) {
        let i2 = 0;
        const l = this.upgrades.length;
        for (; i2 < l; i2++) {
          this.probe(this.upgrades[i2]);
        }
      }
    }
    onPacket(packet) {
      if (this.readyState === "opening" || this.readyState === "open" || this.readyState === "closing") {
        this.emitReserved("packet", packet);
        this.emitReserved("heartbeat");
        this.resetPingTimeout();
        switch (packet.type) {
          case "open":
            this.onHandshake(JSON.parse(packet.data));
            break;
          case "ping":
            this.sendPacket("pong");
            this.emitReserved("ping");
            this.emitReserved("pong");
            break;
          case "error":
            const err = new Error("server error");
            err.code = packet.data;
            this.onError(err);
            break;
          case "message":
            this.emitReserved("data", packet.data);
            this.emitReserved("message", packet.data);
            break;
        }
      } else {
      }
    }
    onHandshake(data) {
      this.emitReserved("handshake", data);
      this.id = data.sid;
      this.transport.query.sid = data.sid;
      this.upgrades = this.filterUpgrades(data.upgrades);
      this.pingInterval = data.pingInterval;
      this.pingTimeout = data.pingTimeout;
      this.maxPayload = data.maxPayload;
      this.onOpen();
      if (this.readyState === "closed")
        return;
      this.resetPingTimeout();
    }
    resetPingTimeout() {
      this.clearTimeoutFn(this.pingTimeoutTimer);
      this.pingTimeoutTimer = this.setTimeoutFn(() => {
        this.onClose("ping timeout");
      }, this.pingInterval + this.pingTimeout);
      if (this.opts.autoUnref) {
        this.pingTimeoutTimer.unref();
      }
    }
    onDrain() {
      this.writeBuffer.splice(0, this.prevBufferLen);
      this.prevBufferLen = 0;
      if (this.writeBuffer.length === 0) {
        this.emitReserved("drain");
      } else {
        this.flush();
      }
    }
    flush() {
      if (this.readyState !== "closed" && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
        const packets = this.getWritablePackets();
        this.transport.send(packets);
        this.prevBufferLen = packets.length;
        this.emitReserved("flush");
      }
    }
    getWritablePackets() {
      const shouldCheckPayloadSize = this.maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1;
      if (!shouldCheckPayloadSize) {
        return this.writeBuffer;
      }
      let payloadSize = 1;
      for (let i2 = 0; i2 < this.writeBuffer.length; i2++) {
        const data = this.writeBuffer[i2].data;
        if (data) {
          payloadSize += byteLength(data);
        }
        if (i2 > 0 && payloadSize > this.maxPayload) {
          return this.writeBuffer.slice(0, i2);
        }
        payloadSize += 2;
      }
      return this.writeBuffer;
    }
    write(msg, options, fn) {
      this.sendPacket("message", msg, options, fn);
      return this;
    }
    send(msg, options, fn) {
      this.sendPacket("message", msg, options, fn);
      return this;
    }
    sendPacket(type, data, options, fn) {
      if (typeof data === "function") {
        fn = data;
        data = void 0;
      }
      if (typeof options === "function") {
        fn = options;
        options = null;
      }
      if (this.readyState === "closing" || this.readyState === "closed") {
        return;
      }
      options = options || {};
      options.compress = options.compress !== false;
      const packet = {
        type,
        data,
        options
      };
      this.emitReserved("packetCreate", packet);
      this.writeBuffer.push(packet);
      if (fn)
        this.once("flush", fn);
      this.flush();
    }
    close() {
      const close = () => {
        this.onClose("forced close");
        this.transport.close();
      };
      const cleanupAndClose = () => {
        this.off("upgrade", cleanupAndClose);
        this.off("upgradeError", cleanupAndClose);
        close();
      };
      const waitForUpgrade = () => {
        this.once("upgrade", cleanupAndClose);
        this.once("upgradeError", cleanupAndClose);
      };
      if (this.readyState === "opening" || this.readyState === "open") {
        this.readyState = "closing";
        if (this.writeBuffer.length) {
          this.once("drain", () => {
            if (this.upgrading) {
              waitForUpgrade();
            } else {
              close();
            }
          });
        } else if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      }
      return this;
    }
    onError(err) {
      Socket.priorWebsocketSuccess = false;
      this.emitReserved("error", err);
      this.onClose("transport error", err);
    }
    onClose(reason, description2) {
      if (this.readyState === "opening" || this.readyState === "open" || this.readyState === "closing") {
        this.clearTimeoutFn(this.pingTimeoutTimer);
        this.transport.removeAllListeners("close");
        this.transport.close();
        this.transport.removeAllListeners();
        if (typeof removeEventListener === "function") {
          removeEventListener("beforeunload", this.beforeunloadEventListener, false);
          removeEventListener("offline", this.offlineEventListener, false);
        }
        this.readyState = "closed";
        this.id = null;
        this.emitReserved("close", reason, description2);
        this.writeBuffer = [];
        this.prevBufferLen = 0;
      }
    }
    filterUpgrades(upgrades) {
      const filteredUpgrades = [];
      let i2 = 0;
      const j = upgrades.length;
      for (; i2 < j; i2++) {
        if (~this.transports.indexOf(upgrades[i2]))
          filteredUpgrades.push(upgrades[i2]);
      }
      return filteredUpgrades;
    }
  };
  Socket.protocol = protocol;

  // node_modules/engine.io-client/build/esm/index.js
  var protocol2 = Socket.protocol;

  // node_modules/socket.io-client/build/esm/url.js
  function url(uri, path = "", loc) {
    let obj = uri;
    loc = loc || typeof location !== "undefined" && location;
    if (uri == null)
      uri = loc.protocol + "//" + loc.host;
    if (typeof uri === "string") {
      if (uri.charAt(0) === "/") {
        if (uri.charAt(1) === "/") {
          uri = loc.protocol + uri;
        } else {
          uri = loc.host + uri;
        }
      }
      if (!/^(https?|wss?):\/\//.test(uri)) {
        if (typeof loc !== "undefined") {
          uri = loc.protocol + "//" + uri;
        } else {
          uri = "https://" + uri;
        }
      }
      obj = parse(uri);
    }
    if (!obj.port) {
      if (/^(http|ws)$/.test(obj.protocol)) {
        obj.port = "80";
      } else if (/^(http|ws)s$/.test(obj.protocol)) {
        obj.port = "443";
      }
    }
    obj.path = obj.path || "/";
    const ipv6 = obj.host.indexOf(":") !== -1;
    const host = ipv6 ? "[" + obj.host + "]" : obj.host;
    obj.id = obj.protocol + "://" + host + ":" + obj.port + path;
    obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
    return obj;
  }

  // node_modules/socket.io-parser/build/esm/index.js
  var esm_exports = {};
  __export(esm_exports, {
    Decoder: () => Decoder,
    Encoder: () => Encoder,
    PacketType: () => PacketType,
    protocol: () => protocol3
  });

  // node_modules/socket.io-parser/build/esm/is-binary.js
  var withNativeArrayBuffer3 = typeof ArrayBuffer === "function";
  var isView2 = (obj) => {
    return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
  };
  var toString3 = Object.prototype.toString;
  var withNativeBlob2 = typeof Blob === "function" || typeof Blob !== "undefined" && toString3.call(Blob) === "[object BlobConstructor]";
  var withNativeFile = typeof File === "function" || typeof File !== "undefined" && toString3.call(File) === "[object FileConstructor]";
  function isBinary(obj) {
    return withNativeArrayBuffer3 && (obj instanceof ArrayBuffer || isView2(obj)) || withNativeBlob2 && obj instanceof Blob || withNativeFile && obj instanceof File;
  }
  function hasBinary(obj, toJSON2) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    if (Array.isArray(obj)) {
      for (let i2 = 0, l = obj.length; i2 < l; i2++) {
        if (hasBinary(obj[i2])) {
          return true;
        }
      }
      return false;
    }
    if (isBinary(obj)) {
      return true;
    }
    if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) {
      return hasBinary(obj.toJSON(), true);
    }
    for (const key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
        return true;
      }
    }
    return false;
  }

  // node_modules/socket.io-parser/build/esm/binary.js
  function deconstructPacket(packet) {
    const buffers = [];
    const packetData = packet.data;
    const pack = packet;
    pack.data = _deconstructPacket(packetData, buffers);
    pack.attachments = buffers.length;
    return {packet: pack, buffers};
  }
  function _deconstructPacket(data, buffers) {
    if (!data)
      return data;
    if (isBinary(data)) {
      const placeholder = {_placeholder: true, num: buffers.length};
      buffers.push(data);
      return placeholder;
    } else if (Array.isArray(data)) {
      const newData = new Array(data.length);
      for (let i2 = 0; i2 < data.length; i2++) {
        newData[i2] = _deconstructPacket(data[i2], buffers);
      }
      return newData;
    } else if (typeof data === "object" && !(data instanceof Date)) {
      const newData = {};
      for (const key in data) {
        if (Object.prototype.hasOwnProperty.call(data, key)) {
          newData[key] = _deconstructPacket(data[key], buffers);
        }
      }
      return newData;
    }
    return data;
  }
  function reconstructPacket(packet, buffers) {
    packet.data = _reconstructPacket(packet.data, buffers);
    delete packet.attachments;
    return packet;
  }
  function _reconstructPacket(data, buffers) {
    if (!data)
      return data;
    if (data && data._placeholder === true) {
      const isIndexValid = typeof data.num === "number" && data.num >= 0 && data.num < buffers.length;
      if (isIndexValid) {
        return buffers[data.num];
      } else {
        throw new Error("illegal attachments");
      }
    } else if (Array.isArray(data)) {
      for (let i2 = 0; i2 < data.length; i2++) {
        data[i2] = _reconstructPacket(data[i2], buffers);
      }
    } else if (typeof data === "object") {
      for (const key in data) {
        if (Object.prototype.hasOwnProperty.call(data, key)) {
          data[key] = _reconstructPacket(data[key], buffers);
        }
      }
    }
    return data;
  }

  // node_modules/socket.io-parser/build/esm/index.js
  var RESERVED_EVENTS = [
    "connect",
    "connect_error",
    "disconnect",
    "disconnecting",
    "newListener",
    "removeListener"
  ];
  var protocol3 = 5;
  var PacketType;
  (function(PacketType2) {
    PacketType2[PacketType2["CONNECT"] = 0] = "CONNECT";
    PacketType2[PacketType2["DISCONNECT"] = 1] = "DISCONNECT";
    PacketType2[PacketType2["EVENT"] = 2] = "EVENT";
    PacketType2[PacketType2["ACK"] = 3] = "ACK";
    PacketType2[PacketType2["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
    PacketType2[PacketType2["BINARY_EVENT"] = 5] = "BINARY_EVENT";
    PacketType2[PacketType2["BINARY_ACK"] = 6] = "BINARY_ACK";
  })(PacketType || (PacketType = {}));
  var Encoder = class {
    constructor(replacer) {
      this.replacer = replacer;
    }
    encode(obj) {
      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
        if (hasBinary(obj)) {
          return this.encodeAsBinary({
            type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,
            nsp: obj.nsp,
            data: obj.data,
            id: obj.id
          });
        }
      }
      return [this.encodeAsString(obj)];
    }
    encodeAsString(obj) {
      let str = "" + obj.type;
      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {
        str += obj.attachments + "-";
      }
      if (obj.nsp && obj.nsp !== "/") {
        str += obj.nsp + ",";
      }
      if (obj.id != null) {
        str += obj.id;
      }
      if (obj.data != null) {
        str += JSON.stringify(obj.data, this.replacer);
      }
      return str;
    }
    encodeAsBinary(obj) {
      const deconstruction = deconstructPacket(obj);
      const pack = this.encodeAsString(deconstruction.packet);
      const buffers = deconstruction.buffers;
      buffers.unshift(pack);
      return buffers;
    }
  };
  function isObject3(value2) {
    return Object.prototype.toString.call(value2) === "[object Object]";
  }
  var Decoder = class extends Emitter {
    constructor(reviver) {
      super();
      this.reviver = reviver;
    }
    add(obj) {
      let packet;
      if (typeof obj === "string") {
        if (this.reconstructor) {
          throw new Error("got plaintext data when reconstructing a packet");
        }
        packet = this.decodeString(obj);
        const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;
        if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {
          packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;
          this.reconstructor = new BinaryReconstructor(packet);
          if (packet.attachments === 0) {
            super.emitReserved("decoded", packet);
          }
        } else {
          super.emitReserved("decoded", packet);
        }
      } else if (isBinary(obj) || obj.base64) {
        if (!this.reconstructor) {
          throw new Error("got binary data when not reconstructing a packet");
        } else {
          packet = this.reconstructor.takeBinaryData(obj);
          if (packet) {
            this.reconstructor = null;
            super.emitReserved("decoded", packet);
          }
        }
      } else {
        throw new Error("Unknown type: " + obj);
      }
    }
    decodeString(str) {
      let i2 = 0;
      const p = {
        type: Number(str.charAt(0))
      };
      if (PacketType[p.type] === void 0) {
        throw new Error("unknown packet type " + p.type);
      }
      if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {
        const start = i2 + 1;
        while (str.charAt(++i2) !== "-" && i2 != str.length) {
        }
        const buf = str.substring(start, i2);
        if (buf != Number(buf) || str.charAt(i2) !== "-") {
          throw new Error("Illegal attachments");
        }
        p.attachments = Number(buf);
      }
      if (str.charAt(i2 + 1) === "/") {
        const start = i2 + 1;
        while (++i2) {
          const c = str.charAt(i2);
          if (c === ",")
            break;
          if (i2 === str.length)
            break;
        }
        p.nsp = str.substring(start, i2);
      } else {
        p.nsp = "/";
      }
      const next = str.charAt(i2 + 1);
      if (next !== "" && Number(next) == next) {
        const start = i2 + 1;
        while (++i2) {
          const c = str.charAt(i2);
          if (c == null || Number(c) != c) {
            --i2;
            break;
          }
          if (i2 === str.length)
            break;
        }
        p.id = Number(str.substring(start, i2 + 1));
      }
      if (str.charAt(++i2)) {
        const payload = this.tryParse(str.substr(i2));
        if (Decoder.isPayloadValid(p.type, payload)) {
          p.data = payload;
        } else {
          throw new Error("invalid payload");
        }
      }
      return p;
    }
    tryParse(str) {
      try {
        return JSON.parse(str, this.reviver);
      } catch (e) {
        return false;
      }
    }
    static isPayloadValid(type, payload) {
      switch (type) {
        case PacketType.CONNECT:
          return isObject3(payload);
        case PacketType.DISCONNECT:
          return payload === void 0;
        case PacketType.CONNECT_ERROR:
          return typeof payload === "string" || isObject3(payload);
        case PacketType.EVENT:
        case PacketType.BINARY_EVENT:
          return Array.isArray(payload) && (typeof payload[0] === "number" || typeof payload[0] === "string" && RESERVED_EVENTS.indexOf(payload[0]) === -1);
        case PacketType.ACK:
        case PacketType.BINARY_ACK:
          return Array.isArray(payload);
      }
    }
    destroy() {
      if (this.reconstructor) {
        this.reconstructor.finishedReconstruction();
        this.reconstructor = null;
      }
    }
  };
  var BinaryReconstructor = class {
    constructor(packet) {
      this.packet = packet;
      this.buffers = [];
      this.reconPack = packet;
    }
    takeBinaryData(binData) {
      this.buffers.push(binData);
      if (this.buffers.length === this.reconPack.attachments) {
        const packet = reconstructPacket(this.reconPack, this.buffers);
        this.finishedReconstruction();
        return packet;
      }
      return null;
    }
    finishedReconstruction() {
      this.reconPack = null;
      this.buffers = [];
    }
  };

  // node_modules/socket.io-client/build/esm/on.js
  function on(obj, ev, fn) {
    obj.on(ev, fn);
    return function subDestroy() {
      obj.off(ev, fn);
    };
  }

  // node_modules/socket.io-client/build/esm/socket.js
  var RESERVED_EVENTS2 = Object.freeze({
    connect: 1,
    connect_error: 1,
    disconnect: 1,
    disconnecting: 1,
    newListener: 1,
    removeListener: 1
  });
  var Socket2 = class extends Emitter {
    constructor(io, nsp, opts) {
      super();
      this.connected = false;
      this.recovered = false;
      this.receiveBuffer = [];
      this.sendBuffer = [];
      this._queue = [];
      this._queueSeq = 0;
      this.ids = 0;
      this.acks = {};
      this.flags = {};
      this.io = io;
      this.nsp = nsp;
      if (opts && opts.auth) {
        this.auth = opts.auth;
      }
      this._opts = Object.assign({}, opts);
      if (this.io._autoConnect)
        this.open();
    }
    get disconnected() {
      return !this.connected;
    }
    subEvents() {
      if (this.subs)
        return;
      const io = this.io;
      this.subs = [
        on(io, "open", this.onopen.bind(this)),
        on(io, "packet", this.onpacket.bind(this)),
        on(io, "error", this.onerror.bind(this)),
        on(io, "close", this.onclose.bind(this))
      ];
    }
    get active() {
      return !!this.subs;
    }
    connect() {
      if (this.connected)
        return this;
      this.subEvents();
      if (!this.io["_reconnecting"])
        this.io.open();
      if (this.io._readyState === "open")
        this.onopen();
      return this;
    }
    open() {
      return this.connect();
    }
    send(...args) {
      args.unshift("message");
      this.emit.apply(this, args);
      return this;
    }
    emit(ev, ...args) {
      if (RESERVED_EVENTS2.hasOwnProperty(ev)) {
        throw new Error('"' + ev.toString() + '" is a reserved event name');
      }
      args.unshift(ev);
      if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {
        this._addToQueue(args);
        return this;
      }
      const packet = {
        type: PacketType.EVENT,
        data: args
      };
      packet.options = {};
      packet.options.compress = this.flags.compress !== false;
      if (typeof args[args.length - 1] === "function") {
        const id = this.ids++;
        const ack = args.pop();
        this._registerAckCallback(id, ack);
        packet.id = id;
      }
      const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;
      const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);
      if (discardPacket) {
      } else if (this.connected) {
        this.notifyOutgoingListeners(packet);
        this.packet(packet);
      } else {
        this.sendBuffer.push(packet);
      }
      this.flags = {};
      return this;
    }
    _registerAckCallback(id, ack) {
      var _a;
      const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;
      if (timeout === void 0) {
        this.acks[id] = ack;
        return;
      }
      const timer = this.io.setTimeoutFn(() => {
        delete this.acks[id];
        for (let i2 = 0; i2 < this.sendBuffer.length; i2++) {
          if (this.sendBuffer[i2].id === id) {
            this.sendBuffer.splice(i2, 1);
          }
        }
        ack.call(this, new Error("operation has timed out"));
      }, timeout);
      const fn = (...args) => {
        this.io.clearTimeoutFn(timer);
        ack.apply(this, args);
      };
      fn.withError = true;
      this.acks[id] = fn;
    }
    emitWithAck(ev, ...args) {
      return new Promise((resolve, reject) => {
        const fn = (arg1, arg2) => {
          return arg1 ? reject(arg1) : resolve(arg2);
        };
        fn.withError = true;
        args.push(fn);
        this.emit(ev, ...args);
      });
    }
    _addToQueue(args) {
      let ack;
      if (typeof args[args.length - 1] === "function") {
        ack = args.pop();
      }
      const packet = {
        id: this._queueSeq++,
        tryCount: 0,
        pending: false,
        args,
        flags: Object.assign({fromQueue: true}, this.flags)
      };
      args.push((err, ...responseArgs) => {
        if (packet !== this._queue[0]) {
          return;
        }
        const hasError = err !== null;
        if (hasError) {
          if (packet.tryCount > this._opts.retries) {
            this._queue.shift();
            if (ack) {
              ack(err);
            }
          }
        } else {
          this._queue.shift();
          if (ack) {
            ack(null, ...responseArgs);
          }
        }
        packet.pending = false;
        return this._drainQueue();
      });
      this._queue.push(packet);
      this._drainQueue();
    }
    _drainQueue(force = false) {
      if (!this.connected || this._queue.length === 0) {
        return;
      }
      const packet = this._queue[0];
      if (packet.pending && !force) {
        return;
      }
      packet.pending = true;
      packet.tryCount++;
      this.flags = packet.flags;
      this.emit.apply(this, packet.args);
    }
    packet(packet) {
      packet.nsp = this.nsp;
      this.io._packet(packet);
    }
    onopen() {
      if (typeof this.auth == "function") {
        this.auth((data) => {
          this._sendConnectPacket(data);
        });
      } else {
        this._sendConnectPacket(this.auth);
      }
    }
    _sendConnectPacket(data) {
      this.packet({
        type: PacketType.CONNECT,
        data: this._pid ? Object.assign({pid: this._pid, offset: this._lastOffset}, data) : data
      });
    }
    onerror(err) {
      if (!this.connected) {
        this.emitReserved("connect_error", err);
      }
    }
    onclose(reason, description2) {
      this.connected = false;
      delete this.id;
      this.emitReserved("disconnect", reason, description2);
      this._clearAcks();
    }
    _clearAcks() {
      Object.keys(this.acks).forEach((id) => {
        const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);
        if (!isBuffered) {
          const ack = this.acks[id];
          delete this.acks[id];
          if (ack.withError) {
            ack.call(this, new Error("socket has been disconnected"));
          }
        }
      });
    }
    onpacket(packet) {
      const sameNamespace = packet.nsp === this.nsp;
      if (!sameNamespace)
        return;
      switch (packet.type) {
        case PacketType.CONNECT:
          if (packet.data && packet.data.sid) {
            this.onconnect(packet.data.sid, packet.data.pid);
          } else {
            this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
          }
          break;
        case PacketType.EVENT:
        case PacketType.BINARY_EVENT:
          this.onevent(packet);
          break;
        case PacketType.ACK:
        case PacketType.BINARY_ACK:
          this.onack(packet);
          break;
        case PacketType.DISCONNECT:
          this.ondisconnect();
          break;
        case PacketType.CONNECT_ERROR:
          this.destroy();
          const err = new Error(packet.data.message);
          err.data = packet.data.data;
          this.emitReserved("connect_error", err);
          break;
      }
    }
    onevent(packet) {
      const args = packet.data || [];
      if (packet.id != null) {
        args.push(this.ack(packet.id));
      }
      if (this.connected) {
        this.emitEvent(args);
      } else {
        this.receiveBuffer.push(Object.freeze(args));
      }
    }
    emitEvent(args) {
      if (this._anyListeners && this._anyListeners.length) {
        const listeners = this._anyListeners.slice();
        for (const listener of listeners) {
          listener.apply(this, args);
        }
      }
      super.emit.apply(this, args);
      if (this._pid && args.length && typeof args[args.length - 1] === "string") {
        this._lastOffset = args[args.length - 1];
      }
    }
    ack(id) {
      const self2 = this;
      let sent = false;
      return function(...args) {
        if (sent)
          return;
        sent = true;
        self2.packet({
          type: PacketType.ACK,
          id,
          data: args
        });
      };
    }
    onack(packet) {
      const ack = this.acks[packet.id];
      if (typeof ack !== "function") {
        return;
      }
      delete this.acks[packet.id];
      if (ack.withError) {
        packet.data.unshift(null);
      }
      ack.apply(this, packet.data);
    }
    onconnect(id, pid) {
      this.id = id;
      this.recovered = pid && this._pid === pid;
      this._pid = pid;
      this.connected = true;
      this.emitBuffered();
      this.emitReserved("connect");
      this._drainQueue(true);
    }
    emitBuffered() {
      this.receiveBuffer.forEach((args) => this.emitEvent(args));
      this.receiveBuffer = [];
      this.sendBuffer.forEach((packet) => {
        this.notifyOutgoingListeners(packet);
        this.packet(packet);
      });
      this.sendBuffer = [];
    }
    ondisconnect() {
      this.destroy();
      this.onclose("io server disconnect");
    }
    destroy() {
      if (this.subs) {
        this.subs.forEach((subDestroy) => subDestroy());
        this.subs = void 0;
      }
      this.io["_destroy"](this);
    }
    disconnect() {
      if (this.connected) {
        this.packet({type: PacketType.DISCONNECT});
      }
      this.destroy();
      if (this.connected) {
        this.onclose("io client disconnect");
      }
      return this;
    }
    close() {
      return this.disconnect();
    }
    compress(compress) {
      this.flags.compress = compress;
      return this;
    }
    get volatile() {
      this.flags.volatile = true;
      return this;
    }
    timeout(timeout) {
      this.flags.timeout = timeout;
      return this;
    }
    onAny(listener) {
      this._anyListeners = this._anyListeners || [];
      this._anyListeners.push(listener);
      return this;
    }
    prependAny(listener) {
      this._anyListeners = this._anyListeners || [];
      this._anyListeners.unshift(listener);
      return this;
    }
    offAny(listener) {
      if (!this._anyListeners) {
        return this;
      }
      if (listener) {
        const listeners = this._anyListeners;
        for (let i2 = 0; i2 < listeners.length; i2++) {
          if (listener === listeners[i2]) {
            listeners.splice(i2, 1);
            return this;
          }
        }
      } else {
        this._anyListeners = [];
      }
      return this;
    }
    listenersAny() {
      return this._anyListeners || [];
    }
    onAnyOutgoing(listener) {
      this._anyOutgoingListeners = this._anyOutgoingListeners || [];
      this._anyOutgoingListeners.push(listener);
      return this;
    }
    prependAnyOutgoing(listener) {
      this._anyOutgoingListeners = this._anyOutgoingListeners || [];
      this._anyOutgoingListeners.unshift(listener);
      return this;
    }
    offAnyOutgoing(listener) {
      if (!this._anyOutgoingListeners) {
        return this;
      }
      if (listener) {
        const listeners = this._anyOutgoingListeners;
        for (let i2 = 0; i2 < listeners.length; i2++) {
          if (listener === listeners[i2]) {
            listeners.splice(i2, 1);
            return this;
          }
        }
      } else {
        this._anyOutgoingListeners = [];
      }
      return this;
    }
    listenersAnyOutgoing() {
      return this._anyOutgoingListeners || [];
    }
    notifyOutgoingListeners(packet) {
      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
        const listeners = this._anyOutgoingListeners.slice();
        for (const listener of listeners) {
          listener.apply(this, packet.data);
        }
      }
    }
  };

  // node_modules/socket.io-client/build/esm/contrib/backo2.js
  function Backoff(opts) {
    opts = opts || {};
    this.ms = opts.min || 100;
    this.max = opts.max || 1e4;
    this.factor = opts.factor || 2;
    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
    this.attempts = 0;
  }
  Backoff.prototype.duration = function() {
    var ms = this.ms * Math.pow(this.factor, this.attempts++);
    if (this.jitter) {
      var rand = Math.random();
      var deviation = Math.floor(rand * this.jitter * ms);
      ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
    }
    return Math.min(ms, this.max) | 0;
  };
  Backoff.prototype.reset = function() {
    this.attempts = 0;
  };
  Backoff.prototype.setMin = function(min) {
    this.ms = min;
  };
  Backoff.prototype.setMax = function(max) {
    this.max = max;
  };
  Backoff.prototype.setJitter = function(jitter) {
    this.jitter = jitter;
  };

  // node_modules/socket.io-client/build/esm/manager.js
  var Manager = class extends Emitter {
    constructor(uri, opts) {
      var _a;
      super();
      this.nsps = {};
      this.subs = [];
      if (uri && typeof uri === "object") {
        opts = uri;
        uri = void 0;
      }
      opts = opts || {};
      opts.path = opts.path || "/socket.io";
      this.opts = opts;
      installTimerFunctions(this, opts);
      this.reconnection(opts.reconnection !== false);
      this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
      this.reconnectionDelay(opts.reconnectionDelay || 1e3);
      this.reconnectionDelayMax(opts.reconnectionDelayMax || 5e3);
      this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
      this.backoff = new Backoff({
        min: this.reconnectionDelay(),
        max: this.reconnectionDelayMax(),
        jitter: this.randomizationFactor()
      });
      this.timeout(opts.timeout == null ? 2e4 : opts.timeout);
      this._readyState = "closed";
      this.uri = uri;
      const _parser = opts.parser || esm_exports;
      this.encoder = new _parser.Encoder();
      this.decoder = new _parser.Decoder();
      this._autoConnect = opts.autoConnect !== false;
      if (this._autoConnect)
        this.open();
    }
    reconnection(v) {
      if (!arguments.length)
        return this._reconnection;
      this._reconnection = !!v;
      return this;
    }
    reconnectionAttempts(v) {
      if (v === void 0)
        return this._reconnectionAttempts;
      this._reconnectionAttempts = v;
      return this;
    }
    reconnectionDelay(v) {
      var _a;
      if (v === void 0)
        return this._reconnectionDelay;
      this._reconnectionDelay = v;
      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);
      return this;
    }
    randomizationFactor(v) {
      var _a;
      if (v === void 0)
        return this._randomizationFactor;
      this._randomizationFactor = v;
      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);
      return this;
    }
    reconnectionDelayMax(v) {
      var _a;
      if (v === void 0)
        return this._reconnectionDelayMax;
      this._reconnectionDelayMax = v;
      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);
      return this;
    }
    timeout(v) {
      if (!arguments.length)
        return this._timeout;
      this._timeout = v;
      return this;
    }
    maybeReconnectOnOpen() {
      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
        this.reconnect();
      }
    }
    open(fn) {
      if (~this._readyState.indexOf("open"))
        return this;
      this.engine = new Socket(this.uri, this.opts);
      const socket2 = this.engine;
      const self2 = this;
      this._readyState = "opening";
      this.skipReconnect = false;
      const openSubDestroy = on(socket2, "open", function() {
        self2.onopen();
        fn && fn();
      });
      const onError = (err) => {
        this.cleanup();
        this._readyState = "closed";
        this.emitReserved("error", err);
        if (fn) {
          fn(err);
        } else {
          this.maybeReconnectOnOpen();
        }
      };
      const errorSub = on(socket2, "error", onError);
      if (this._timeout !== false) {
        const timeout = this._timeout;
        const timer = this.setTimeoutFn(() => {
          openSubDestroy();
          onError(new Error("timeout"));
          socket2.close();
        }, timeout);
        if (this.opts.autoUnref) {
          timer.unref();
        }
        this.subs.push(() => {
          this.clearTimeoutFn(timer);
        });
      }
      this.subs.push(openSubDestroy);
      this.subs.push(errorSub);
      return this;
    }
    connect(fn) {
      return this.open(fn);
    }
    onopen() {
      this.cleanup();
      this._readyState = "open";
      this.emitReserved("open");
      const socket2 = this.engine;
      this.subs.push(on(socket2, "ping", this.onping.bind(this)), on(socket2, "data", this.ondata.bind(this)), on(socket2, "error", this.onerror.bind(this)), on(socket2, "close", this.onclose.bind(this)), on(this.decoder, "decoded", this.ondecoded.bind(this)));
    }
    onping() {
      this.emitReserved("ping");
    }
    ondata(data) {
      try {
        this.decoder.add(data);
      } catch (e) {
        this.onclose("parse error", e);
      }
    }
    ondecoded(packet) {
      nextTick(() => {
        this.emitReserved("packet", packet);
      }, this.setTimeoutFn);
    }
    onerror(err) {
      this.emitReserved("error", err);
    }
    socket(nsp, opts) {
      let socket2 = this.nsps[nsp];
      if (!socket2) {
        socket2 = new Socket2(this, nsp, opts);
        this.nsps[nsp] = socket2;
      } else if (this._autoConnect && !socket2.active) {
        socket2.connect();
      }
      return socket2;
    }
    _destroy(socket2) {
      const nsps = Object.keys(this.nsps);
      for (const nsp of nsps) {
        const socket3 = this.nsps[nsp];
        if (socket3.active) {
          return;
        }
      }
      this._close();
    }
    _packet(packet) {
      const encodedPackets = this.encoder.encode(packet);
      for (let i2 = 0; i2 < encodedPackets.length; i2++) {
        this.engine.write(encodedPackets[i2], packet.options);
      }
    }
    cleanup() {
      this.subs.forEach((subDestroy) => subDestroy());
      this.subs.length = 0;
      this.decoder.destroy();
    }
    _close() {
      this.skipReconnect = true;
      this._reconnecting = false;
      this.onclose("forced close");
      if (this.engine)
        this.engine.close();
    }
    disconnect() {
      return this._close();
    }
    onclose(reason, description2) {
      this.cleanup();
      this.backoff.reset();
      this._readyState = "closed";
      this.emitReserved("close", reason, description2);
      if (this._reconnection && !this.skipReconnect) {
        this.reconnect();
      }
    }
    reconnect() {
      if (this._reconnecting || this.skipReconnect)
        return this;
      const self2 = this;
      if (this.backoff.attempts >= this._reconnectionAttempts) {
        this.backoff.reset();
        this.emitReserved("reconnect_failed");
        this._reconnecting = false;
      } else {
        const delay = this.backoff.duration();
        this._reconnecting = true;
        const timer = this.setTimeoutFn(() => {
          if (self2.skipReconnect)
            return;
          this.emitReserved("reconnect_attempt", self2.backoff.attempts);
          if (self2.skipReconnect)
            return;
          self2.open((err) => {
            if (err) {
              self2._reconnecting = false;
              self2.reconnect();
              this.emitReserved("reconnect_error", err);
            } else {
              self2.onreconnect();
            }
          });
        }, delay);
        if (this.opts.autoUnref) {
          timer.unref();
        }
        this.subs.push(() => {
          this.clearTimeoutFn(timer);
        });
      }
    }
    onreconnect() {
      const attempt = this.backoff.attempts;
      this._reconnecting = false;
      this.backoff.reset();
      this.emitReserved("reconnect", attempt);
    }
  };

  // node_modules/socket.io-client/build/esm/index.js
  var cache = {};
  function lookup2(uri, opts) {
    if (typeof uri === "object") {
      opts = uri;
      uri = void 0;
    }
    opts = opts || {};
    const parsed = url(uri, opts.path || "/socket.io");
    const source = parsed.source;
    const id = parsed.id;
    const path = parsed.path;
    const sameNamespace = cache[id] && path in cache[id]["nsps"];
    const newConnection = opts.forceNew || opts["force new connection"] || opts.multiplex === false || sameNamespace;
    let io;
    if (newConnection) {
      io = new Manager(source, opts);
    } else {
      if (!cache[id]) {
        cache[id] = new Manager(source, opts);
      }
      io = cache[id];
    }
    if (parsed.query && !opts.query) {
      opts.query = parsed.queryKey;
    }
    return io.socket(parsed.path, opts);
  }
  Object.assign(lookup2, {
    Manager,
    Socket: Socket2,
    io: lookup2,
    connect: lookup2
  });

  // lib/core/public/socket.js
  function setupSocketConnection(config) {
    if (a11yEngine.socketError && a11yEngine._advanceRun) {
      error_handler_default.addNonCheckError(error_types_default.SERVER_ERROR, a11yEngine.socketError);
      throw new Error(a11yEngine.socketError);
    }
    if (config.a11yCoreConfig.disableA11yEngineConfig)
      return;
    else if (!config.a11yCoreConfig.enableAdvancedRules)
      return;
    else if (a11yEngine._advanceRun || socket && socket.connected)
      return;
    if (!config?.metadata?.productMetadata?.authToken) {
      a11yEngine.socketError = "authToken not passed in productMetadata";
      return;
    } else if (!config?.a11yCoreConfig?.serviceHost) {
      a11yEngine.socketError = "invalid service host url";
      return;
    }
    let serviceUrl = config.a11yCoreConfig.serviceHost;
    if (serviceUrl.startsWith(constants_default.A11Y_ENGINE_TAG)) {
      serviceUrl = "wss://" + serviceUrl;
    } else {
      serviceUrl = "ws://localhost:8081";
    }
    socket = lookup2(serviceUrl, {
      reconnection: false,
      withCredentials: true,
      transports: ["websocket"],
      auth: {
        token: config?.metadata?.productMetadata?.authToken
      }
    });
    socket.on("connect_error", (error) => {
      cleanup(error.message, true);
    });
    socket.on("disconnect", (reason) => {
      cleanup(reason, false);
    });
  }
  function cleanup(errorMessage, hardError) {
    socket.removeAllListeners();
    a11yEngine.socketError = errorMessage;
    if (a11yEngine._advanceRun === true) {
      if (hardError) {
        error_handler_default.addNonCheckError(error_types_default.SERVER_ERROR, errorMessage);
      }
      a11yEngine.abort();
    }
  }

  // lib/core/public/abort.js
  async function abort(reason = "aborted by product") {
    if (a11yEngine._advanceRun !== true || signal.aborted)
      return;
    controller.abort(reason);
    await waitForAxeToTerminate();
  }
  async function waitForAxeToTerminate(interval = 100) {
    return new Promise((resolve) => {
      const timer = setInterval(() => {
        if (a11yEngine._advanceRun !== true) {
          clearInterval(timer);
          resolve();
        }
      }, interval);
    });
  }

  // lib/core/public/updateResults.js
  function updateNodes(violation, count) {
    const updatedNodes = {};
    violation.nodes.flatMap((node) => ["all", "any", "none"].flatMap((type) => node[type].filter((item) => item.data && Object.keys(item.data).forEach((index) => {
      const status = item.data[index];
      const chunk = item.relatedNodes[index];
      const n = parseInt(index) + parseInt(count) - 1;
      if (chunk) {
        const updatedNode = {
          ...node,
          html: chunk.html,
          target: chunk.target,
          [type]: [
            {
              ...item,
              relatedNodes: [item.relatedNodes[n]],
              data: null
            }
          ]
        };
        if (!updatedNodes[status]) {
          updatedNodes[status] = [];
        }
        updatedNodes[status].push(updatedNode);
      }
    }))));
    return updatedNodes;
  }
  function refineResults(config, a11yResult) {
    if (!config.a11yCoreConfig.enableAdvancedRules)
      return a11yResult;
    const rulemap = {
      "meaningful-sequence-focus-order": 2
    };
    try {
      Object.entries(rulemap).filter(([rule, count]) => {
        return a11yResult.violations.flatMap((violation) => {
          if (violation.id === rule) {
            const updatedNodes = updateNodes(violation, count);
            if (updatedNodes) {
              if (updatedNodes.hasOwnProperty("violation")) {
                violation.nodes = updatedNodes.violation;
              } else {
                a11yResult.violations = a11yResult.violations.filter((violationNode) => !(violationNode.id === rule));
              }
              if (updatedNodes.hasOwnProperty("incomplete")) {
                a11yResult.incomplete.push({
                  ...violation,
                  nodes: updatedNodes.incomplete
                });
              }
            }
          }
        });
      });
    } catch (err) {
      error_handler_default.addNonCheckError(error_types_default.INSTRUMENTATION_ERROR, "Error while updating result in post processing : ", err);
    }
    return a11yResult;
  }
  var updateResults_default = refineResults;

  // lib/core/public/run.js
  async function run(target, configuration = {}, callback = () => {
  }) {
    try {
      if (a11yEngine._running) {
        throw new Error("A11y Engine is already running. Wait for the previous run to finish before starting a new run.");
      }
      a11yEngine._running = true;
      await abort("aborted by mutation");
      const data = await runInternal(target, configuration, callback);
      if (data.status !== report_result_status_default.FAILURE && configuration.a11yCoreConfig.disableA11yEngineConfig === false && configuration.a11yCoreConfig.enableAdvancedRules === true && window.top === window) {
        a11yEngine._advanceRun = true;
        runInternal(target, configuration, callback);
      }
      a11yEngine._running = false;
      return data;
    } catch (error) {
      let finalResult = {
        status: report_result_status_default.FAILURE,
        data: {url: window.location.href},
        errors: {}
      };
      finalResult.errors[error_types_default.RUNTIME_ERROR] = [
        {
          message: "Runtime Error while running A11y Engine",
          error: error.stack
        }
      ];
      eds_utils_default.setEDSConfig(configuration);
      const edsEvent = eds_utils_default.createRuntimeEvent(finalResult, structuredClone(configuration));
      if (isEDSBatchingEnabled(configuration)) {
        finalResult.edsEvent = edsEvent;
      } else {
        const batchedEventList = edsEventConsolidator(Array.of(edsEvent));
        for (const batchedEvent of batchedEventList) {
          await eds_utils_default.sendBatchedData(batchedEvent);
        }
      }
      return finalResult;
    }
  }
  async function runInternal(target, configuration, callback) {
    let finalResult;
    let config;
    try {
      performance_metrics_default.start();
      eds_utils_default.setEDSConfig(configuration);
      config = structuredClone(configuration);
      if (!("axeCoreConfig" in config)) {
        error_handler_default.addNonCheckError(error_types_default.CONFIGURATION_ERROR, "Unable to run A11y Engine axeCoreConfig not present");
        finalResult = report_consolidation_default.getReport(configuration);
        if (isEDSBatchingEnabled(configuration)) {
          finalResult = report_consolidation_default.appendEDSResult(finalResult, config);
        }
        return finalResult;
      }
      a11yEngine.configure();
      config.axeCoreConfig.performanceTimer = true;
      if (config.a11yCoreConfig.disableA11yEngineConfig === false) {
        if (isExperimentalEnabled(config)) {
          removeExperimentalTag(config);
        } else {
          config = removeExperimentalRules(config);
        }
        configureRules_default(config);
      } else {
        removeA11yEngineRules(config);
        if (isExperimentalEnabled(config)) {
          removeExperimentalTag(config);
        }
      }
      validateMetadata(config);
      setupSocketConnection(config);
      const axeConfig = JSON.parse(JSON.stringify(config.axeCoreConfig));
      if (a11yEngine._advanceRun === true) {
        enableAdvancedRules(axeConfig);
        axeConfig.iframes = false;
      } else {
        disableAdvanceRules(axeConfig);
      }
      disableDeprecatedRules(axeConfig);
      extractScanData(config);
      let axeResult = await axe.run(target, axeConfig);
      const results = cloneDeep_default(axeResult);
      axeResult = updateResults_default(config, results);
      finalResult = report_consolidation_default.getReport(axeResult);
      eds_utils_default.setA11yEngineResult(finalResult);
      if (isEDSBatchingEnabled(configuration)) {
        finalResult = report_consolidation_default.appendEDSResult(finalResult, config);
      }
      if (a11yEngine._advanceRun === true) {
        callback(finalResult);
      }
      return finalResult;
    } catch (error) {
      if (!a11yEngine.socketError) {
        error_handler_default.addNonCheckError(error_types_default.RUNTIME_ERROR, "Runtime Error while running A11y Engine", error);
      }
      finalResult = report_consolidation_default.getReport();
      if (isEDSBatchingEnabled(configuration)) {
        finalResult = report_consolidation_default.appendEDSResult(finalResult, config);
      }
      if (a11yEngine._advanceRun === true) {
        callback(finalResult);
      }
      return finalResult;
    } finally {
      performance_metrics_default.end();
      performance_metrics_default.computePerformanceMetrics();
      finalResult = finalResult || {};
      finalResult.data = finalResult.data || {};
      if (!finalResult.data.url) {
        finalResult.data.url = window.location.href;
        eds_utils_default.setA11yEngineResult(finalResult);
      }
      if (!isEDSBatchingEnabled(configuration)) {
        const edsEvent = eds_utils_default.createEDSEvent(config);
        const batchedEventList = edsEventConsolidator(Array.of(edsEvent));
        for (const batchedEvent of batchedEventList) {
          await eds_utils_default.sendBatchedData(batchedEvent);
        }
      }
      eds_utils_default.clearEDSData();
      error_handler_default.clearErrors();
      performance_metrics_default.clear();
      if (a11yEngine._advanceRun === true) {
        controller = new AbortController();
        signal = controller.signal;
        delete a11yEngine.socketError;
        delete a11yEngine._advanceRun;
      }
    }
  }
  function enableAdvancedRules(config) {
    axe.getRules().forEach((rule) => {
      if (!rule.tags.includes(constants_default.ADVANCE_RULE_TAG)) {
        config.rules[rule.ruleId] = {enabled: false};
      }
    });
  }
  function disableAdvanceRules(config) {
    axe.getRules().forEach((rule) => {
      if (rule.tags.includes(constants_default.ADVANCE_RULE_TAG)) {
        config.rules[rule.ruleId] = {enabled: false};
      }
    });
  }
  function disableDeprecatedRules(axeCoreConfig) {
    const axeRules = axe.getRules();
    const deprecatedRules = axeRules.filter((rule) => rule.tags.includes("deprecated"));
    if (deprecatedRules.length > 0) {
      const rules2 = axeCoreConfig.rules || {};
      deprecatedRules.forEach((rule) => {
        rules2[rule.ruleId] = {enabled: false};
      });
      axeCoreConfig.rules = rules2;
    }
  }
  function isEDSBatchingEnabled(configuration) {
    return configuration?.a11yCoreConfig?.enableEDSBatching === true;
  }
  function isExperimentalEnabled(config) {
    const axeCoreConfig = config.axeCoreConfig || {};
    const runOnly = axeCoreConfig.runOnly || {};
    if (runOnly.type === "tag" && runOnly.values && Array.isArray(runOnly.values) && runOnly.values.includes(constants_default.EXPERIMENTAL)) {
      return true;
    }
    return false;
  }
  function removeExperimentalTag(config) {
    const axeCoreConfig = config.axeCoreConfig || {};
    const runOnly = axeCoreConfig.runOnly || {};
    if (runOnly.type === "tag" && runOnly.values && Array.isArray(runOnly.values) && runOnly.values.includes(constants_default.EXPERIMENTAL)) {
      runOnly.values = runOnly.values.filter((value2) => value2 !== constants_default.EXPERIMENTAL);
    }
    axeCoreConfig.runOnly = runOnly;
    config.axeCoreConfig = axeCoreConfig;
    return config;
  }
  function removeA11yEngineRules(config) {
    const axeCoreConfig = config.axeCoreConfig || {};
    const rules2 = axeCoreConfig.rules || {};
    const allRules = axe.getRules();
    allRules.forEach((rule) => {
      if (rule.tags.includes(constants_default.A11Y_ENGINE_TAG)) {
        rules2[rule.ruleId] = {enabled: false};
      }
    });
    axeCoreConfig.rules = rules2;
    config.axeCoreConfig = axeCoreConfig;
    return config;
  }
  function removeExperimentalRules(config) {
    const axeCoreConfig = config.axeCoreConfig || {};
    const rules2 = axeCoreConfig.rules || {};
    const allRules = axe.getRules();
    allRules.forEach((rule) => {
      if (rule.tags.includes(constants_default.A11Y_ENGINE_EXPERIMENTAL)) {
        rules2[rule.ruleId] = {enabled: false};
      }
    });
    axeCoreConfig.rules = rules2;
    config.axeCoreConfig = axeCoreConfig;
    return config;
  }
  function extractScanData(config) {
    runIdentifier = axe.utils.uuid.v4();
    if (a11yEngine._advanceRun !== true)
      return;
    userId = config.metadata.userId;
    if (config.metadata.product.name === constants_default.WEBSITE_SCANNER) {
      scanId = config.metadata.productMetadata.build;
    } else {
      scanId = config.metadata.productMetadata.custom_id;
    }
    socket.emit("scanIds", {scanId, userId, uuid: runIdentifier, pkg: a11yEngine.version});
  }
  function validateMetadata(config) {
    if (!("metadata" in config)) {
      error_handler_default.addNonCheckError(error_types_default.METADATA_ERROR, "metadata not present in configuration passed");
    }
    if (config.metadata && !("userId" in config.metadata)) {
      error_handler_default.addNonCheckError(error_types_default.METADATA_ERROR, "userId not passed in Config Metadata");
    }
    if (config.metadata && !("edsConfig" in config.metadata)) {
      error_handler_default.addNonCheckError(error_types_default.METADATA_ERROR, "edsConfig not passed in Config Metadata");
    }
    if (config.metadata && config.metadata.edsConfig && (!("hostname" in config.metadata.edsConfig) || !("apiKey" in config.metadata.edsConfig))) {
      error_handler_default.addNonCheckError(error_types_default.METADATA_ERROR, "edsConfig not passed in Config Metadata");
    }
    if (config.metadata && !("product" in config.metadata)) {
      error_handler_default.addNonCheckError(error_types_default.METADATA_ERROR, "product not passed in Config Metadata");
    }
    if (config.metadata && config.metadata.product && (!("name" in config.metadata.product) || !("version" in config.metadata.product))) {
      error_handler_default.addNonCheckError(error_types_default.METADATA_ERROR, "product name or version not passed in Config Metadata product");
    }
    if (config.metadata && !("productMetadata" in config.metadata)) {
      error_handler_default.addNonCheckError(error_types_default.METADATA_ERROR, "product metadata not passed in Config Metadata");
    }
  }

  // lib/commons/is-label-present.js
  function isLabelPresent(node, root2) {
    let nodeLabel = node.closest("label");
    let nodeId = node.getAttribute("id");
    let nodeLabelWithFor = root2.querySelectorAll(`label[for="${nodeId}"]`);
    let nodeAttributesArr = axe.utils.getNodeAttributes(node);
    let isNodeLabelAttrPresent = false;
    for (let attr of nodeAttributesArr) {
      if (attr.name === "aria-label" && attr.value || attr.name === "aria-labelledby" && attr.value && root2.querySelectorAll(`#${attr.value}`).length !== 0 || attr.name === "aria-describedby" && attr.value && root2.querySelectorAll(`#${attr.value}`).length !== 0 || attr.name === "title" && attr.value) {
        isNodeLabelAttrPresent = true;
      }
    }
    if (!nodeLabel && nodeLabelWithFor.length === 0 && !isNodeLabelAttrPresent) {
      return false;
    }
    return true;
  }
  var is_label_present_default = isLabelPresent;

  // lib/commons/get-tabbable-elements.js
  function getTabbableElements(element) {
    let elements = axe.commons.dom.getTabbableElements(element);
    elements.sort(function(a, b) {
      let tabindexA = parseInt(a.actualNode.getAttribute("tabindex")) || 0;
      let tabindexB = parseInt(b.actualNode.getAttribute("tabindex")) || 0;
      if (tabindexA === 0 && tabindexB !== 0) {
        return 1;
      } else if (tabindexB === 0 && tabindexA !== 0) {
        return -1;
      }
      return tabindexA - tabindexB;
    });
    return elements;
  }
  var get_tabbable_elements_default = getTabbableElements;

  // lib/commons/get-container.js
  function getContainer(element) {
    let currentElement = element.parentElement;
    let commonParent = element;
    let currentStyles = null;
    let parent = currentElement;
    while (currentElement !== null && parent !== null && parent.nodeName.toLowerCase() !== "body") {
      const parentStyles = window.getComputedStyle(parent);
      if (!hasCookieLabels(currentElement)) {
        if (isRoleAlert(commonParent) || isStyleDiffers(currentStyles, parentStyles)) {
          return commonParent;
        }
      }
      currentStyles = parentStyles;
      commonParent = currentElement;
      currentElement = currentElement.parentElement;
      parent = currentElement;
    }
    return commonParent;
    function isStyleDiffers(currentStyles2, parentStyles) {
      if (!currentStyles2) {
        currentStyles2 = parentStyles;
      }
      return currentStyles2.zIndex !== parentStyles.zIndex || currentStyles2.position !== parentStyles.position;
    }
    function isRoleAlert(element2) {
      if (element2 != null) {
        return element2.hasAttribute("role") && (element2.getAttribute("role") === "alertdialog" || element2.getAttribute("role") === "dialog");
      }
      return false;
    }
    function hasCookieLabels(element2) {
      const hasCookieAttribute = (attribute) => {
        return element2 != null && (element2.hasAttribute(attribute) && element2.getAttribute(attribute).toLowerCase().includes("cookie"));
      };
      const cookieLabels = ["aria-label", "label", "aria-labelledby", "aria-describedby"];
      return cookieLabels.some(hasCookieAttribute);
    }
  }
  var get_container_default = getContainer;

  // lib/checks/bypass-blocks-skip-links-evaluate.js
  function bypassBlocksSkipLinksEvaluate(node, options, virtualNode) {
    try {
      const cookieElements = [];
      let elements = get_tabbable_elements_default(virtualNode);
      if (elements.length > 0) {
        elements = elements.filter((element) => !axe.commons.utils.isHidden(element.actualNode, true));
        for (let i2 = 0; i2 < elements.length; i2++) {
          const actualNode = elements[i2].actualNode;
          const parent = get_container_default(actualNode);
          if (!cookieElements?.includes(actualNode) && !is_belongs_to_cookie_popup_default(parent, actualNode)) {
            if (!checkElementIsSkipLink(actualNode)) {
              return checkSupportedRoles(actualNode) && containsSkipContent(actualNode) ? true : false;
            }
            return true;
          } else if (!cookieElements?.includes(actualNode)) {
            setCookieElements2(cookieElements, parent);
          }
        }
        ;
      }
      return false;
    } catch (err) {
      error_handler_default.addCheckError("bypass-blocks-skip-links-check", err);
      return void 0;
    }
  }
  function setCookieElements2(elementsList, element) {
    const children = element.children;
    for (let i2 = 0; i2 < children.length; i2++) {
      elementsList.push(children[i2]);
      setCookieElements2(elementsList, children[i2]);
    }
  }
  function checkElementIsSkipLink(element) {
    if (isAnchorElement(element) || isButtonElement(element)) {
      const status = isSkipLink(element);
      return status;
    }
    return false;
  }
  function isAnchorElement(element) {
    return element.tagName.toLowerCase() === "a";
  }
  function isButtonElement(element) {
    return element.tagName.toLowerCase() === "button";
  }
  function isSkipLink(element) {
    if (!element.hasAttribute("role") || checkSupportedRoles(element)) {
      if (isAnchorElement(element)) {
        const href = element.getAttribute("href");
        if (href && href.length > 1) {
          const index = href.indexOf("#");
          if (index !== -1) {
            const targetId = href.substring(index + 1);
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
              return true;
            }
          } else if (isExternalURL(href)) {
            return false;
          } else {
            return void 0;
          }
        }
      } else if (isButtonElement(element) && containsSkipContent(element)) {
        eds_utils_default.appendCustomRuleData("bypass-blocks-skip-links", {
          reason: "Passed because of button has skip to main content text."
        });
        return true;
      }
    }
    return false;
  }
  function containsSkipContent(element) {
    const keywords = ["skip", "jump", "go", "main", "accessibility", "primary"];
    const textContent = (element.textContent || element.innerText || "").toLowerCase();
    return keywords.some((word) => textContent.includes(word));
  }
  function checkSupportedRoles(element) {
    const roles = ["link", "navigation", "button"];
    if (element.hasAttribute("role") && roles.some((role) => element.getAttribute("role") === role)) {
      return true;
    }
    return false;
  }
  function isExternalURL(textContent) {
    const urlRegex = /^(?:https?|ftp):\/\/[^\s/$.?#].[^\s]*$/i;
    return textContent.match(urlRegex) !== null || textContent.startsWith("/");
  }
  var bypass_blocks_skip_links_evaluate_default = bypassBlocksSkipLinksEvaluate;

  // lib/commons/is-belongs-to-cookie-popup.js
  function isBelongsToCookiePopup(parent, actualNode) {
    if (parent !== null) {
      const children = parent.children;
      if (children != null) {
        for (let i2 = 0; i2 < children.length; i2++) {
          const child = children[i2];
          if (containsCookie(child)) {
            if (child !== actualNode && (child.nodeName.toLowerCase() === "footer" || hasFooter(child, actualNode))) {
              return false;
            }
            return !isActualSkipLink(actualNode, parent);
          }
        }
      }
    }
    return false;
  }
  function isActualSkipLink(actualNode, parent) {
    if (!(checkElementIsSkipLink(actualNode) && containsSkipContent(actualNode))) {
      return false;
    } else if (isAnchorElement(actualNode)) {
      const href = actualNode.getAttribute("href");
      if (href && href.length > 1) {
        return parent.contains(document.querySelector(href));
      }
    }
    return true;
  }
  function containsCookie(element) {
    let textContent = element.textContent || element.innerText || "";
    return textContent.toLowerCase().includes("cookie") || textContent.toLowerCase().includes("cookies");
  }
  function hasFooter(element, actualNode) {
    const footer = element.querySelector("footer");
    if (footer != null) {
      let footerElements = [];
      setCookieElements(footerElements, footer);
      if (footer && containsCookie(footer) && !footerElements?.includes(actualNode)) {
        return true;
      }
    }
    return false;
  }
  var is_belongs_to_cookie_popup_default = isBelongsToCookiePopup;

  // lib/commons/distinguishable-link.js
  function distinguishableLinkEvaluate(node, parentBlock) {
    try {
      let isNotDistinct = true;
      const nodes = getNestedNodes(node);
      if (nodes.length > 0) {
        isNotDistinct = nodes.some((node2) => !axe.commons.color.elementIsDistinct(node2, parentBlock));
        if (!isNotDistinct) {
          a11yEngine.commons.EDSUtils.appendCustomRuleData("distinguishable-link", {
            Reason: "Passed because of appended A11yEngine logic",
            Node: node.outerHTML
          });
          return true;
        }
      }
      if (isNotDistinct && axe.commons.color.elementIsDistinct(node, parentBlock)) {
        return true;
      }
      let surroundingNodes = getPredecessorAndSuccessor(node);
      if (surroundingNodes) {
        let predecessor = surroundingNodes.predecessor;
        let successor = surroundingNodes.successor;
        let lastNode = parentBlock;
        if (predecessor !== null && predecessor.nodeType !== Node.TEXT_NODE) {
          lastNode = getLastNode(predecessor);
        }
        let firstNode = parentBlock;
        if (successor !== null && successor.nodeType !== Node.TEXT_NODE) {
          firstNode = getFirstNode(successor);
        }
        if (!checkSurroundingContrast(lastNode, node) || !checkSurroundingContrast(firstNode, node)) {
          a11yEngine.commons.EDSUtils.appendCustomRuleData("distinguishable-link", {
            Reason: "Violated because of appended A11yEngine logic",
            Node: node.outerHTML
          });
          return false;
        }
      }
      return checkContrast(node, parentBlock);
    } catch (error) {
      error_handler_default.addCheckError("distinguishable-link-check", error);
      return void 0;
    }
  }
  function checkSurroundingContrast(node, linkNode) {
    if (node !== null && node.nodeType !== Node.TEXT_NODE) {
      const isValidContrast = checkContrast(linkNode, node);
      if (isValidContrast !== void 0 && !isValidContrast) {
        return false;
      }
    }
    return true;
  }
  function getNestedNodes(node) {
    let result = [];
    function traverse(node2) {
      let child = node2.firstChild;
      while (child) {
        if (child.nodeType !== Node.TEXT_NODE && removeWhitespaceAndCommentNodes(child)) {
          result.push(child);
          traverse(child);
        }
        child = child.nextSibling;
      }
    }
    traverse(node);
    return result;
  }
  function getLastNode(node) {
    try {
      if (node.lastChild && node.lastChild.nodeType === Node.COMMENT_NODE) {
        return getLastNode(node.lastChild.previousSibling);
      }
      if (node.lastChild.nodeType === Node.TEXT_NODE) {
        return node;
      }
      return node.lastChild;
    } catch (error) {
      error_handler_default.addCheckError("distinguishable-link-check", error);
      return void 0;
    }
  }
  function getFirstNode(node) {
    if (node.firstChild && node.firstChild.nodeType === Node.COMMENT_NODE) {
      return getFirstNode(node.firstChild.nextElementSibling);
    }
    if (node.firstChild.nodeType === Node.TEXT_NODE) {
      return node;
    }
    return node.firstChild;
  }
  function getPredecessorAndSuccessor(element) {
    const parent = element.parentNode;
    let nodes = Array.from(parent.childNodes);
    let result = {
      predecessor: null,
      successor: null
    };
    if (nodes) {
      const childNodes = nodes.filter(removeWhitespaceAndCommentNodes);
      const index = childNodes.indexOf(element);
      return {
        predecessor: index > 0 ? childNodes[index - 1] : null,
        successor: index < childNodes.length - 1 ? childNodes[index + 1] : null
      };
    }
    return result;
  }
  function removeWhitespaceAndCommentNodes(node) {
    if (node.nodeType === Node.COMMENT_NODE) {
      return false;
    }
    return node.nodeType !== Node.TEXT_NODE || /\S/.test(node.nodeValue);
  }
  function checkContrast(node, parentBlock) {
    try {
      let contrast = axe.commons.a11yCommons.getColorContrast(node, parentBlock);
      if (contrast) {
        if (contrast !== 1 && contrast >= 3.1) {
          return void 0;
        } else {
          let nodeBgColor = axe.commons.color.getBackgroundColor(node);
          let parentBgColor = axe.commons.color.getBackgroundColor(parentBlock);
          if (!nodeBgColor || !parentBgColor) {
            return void 0;
          }
          let bgContrast = axe.commons.a11yCommons.getContrast(nodeBgColor, parentBgColor);
          if (bgContrast && !(bgContrast >= 3.1)) {
            return false;
          } else {
            return void 0;
          }
        }
      }
    } catch (err) {
      return false;
    }
    return void 0;
  }
  var distinguishable_link_default = distinguishableLinkEvaluate;

  // lib/commons/index.js
  var commons = {};
  commons.isLabelPresent = is_label_present_default;
  commons.isBelongsToCookiePopup = is_belongs_to_cookie_popup_default;
  commons.getTabbableElements = get_tabbable_elements_default;
  commons.getContainer = get_container_default;
  commons.distinguishableLinkEvaluate = distinguishable_link_default;
  commons.EDSUtils = eds_utils_default;
  var commons_default = commons;

  // lib/commons/check-handlers.js
  function registerCheckHandlers(channelIdentifier, options) {
    const resolve = this.async();
    const setCheckData = this.data;
    const checkId = options.checkName.replace(/-evaluate$/, "-check");
    function abortHandler() {
      signal.removeEventListener(constants_default.ABORT, abortHandler);
      socket.off(`result_${channelIdentifier}`);
      socket.off(`evaluate_${channelIdentifier}`);
      if (abortedChecks.has(checkId)) {
        abortedChecks.set(checkId, abortedChecks.get(checkId) + 1);
      } else {
        abortedChecks.set(checkId, 1);
      }
      setCheckData(constants_default.ABORT);
      resolve(void 0);
    }
    if (signal.aborted)
      abortHandler();
    signal.addEventListener(constants_default.ABORT, abortHandler);
    socket.on(`result_${channelIdentifier}`, (returnValue) => {
      socket.off(`result_${channelIdentifier}`);
      socket.off(`evaluate_${channelIdentifier}`);
      signal.removeEventListener(constants_default.ABORT, abortHandler);
      if (returnValue.error) {
        error_handler_default.addCheckError(checkId, returnValue.error);
      }
      resolve(returnValue.data);
    });
  }
  var check_handlers_default = registerCheckHandlers;

  // lib/commons/get-channel-identifier.js
  function getChannelIdentifier(options, virtualNode) {
    return `${options.checkName}#${virtualNode.nodeIndex}#${runIdentifier}`;
  }
  var get_channel_identifier_default = getChannelIdentifier;

  // lib/core/utils/helpers.js
  function parseSuccessResponse(response) {
    return {
      data: response
    };
  }
  function parseErrorResponse(err) {
    return {
      error: {
        message: err.message,
        stack: err.stack
      }
    };
  }

  // lib/checks/text-in-images-evaluate.js
  function textInImagesEvaluate(node, options, virtualNode) {
    try {
      const channelIdentifier = get_channel_identifier_default(options, virtualNode);
      check_handlers_default.call(this, channelIdentifier, options);
      socket.on(`evaluate_${channelIdentifier}`, async (payload, callback) => {
        try {
          switch (payload.command) {
            case `getImageData`: {
              const response = await getImageData.call(this, virtualNode, payload.args);
              callback(response);
              break;
            }
            case `uploadImage`: {
              const response = await uploadImage.call(this, payload.args);
              callback(response);
              break;
            }
            default: {
              callback(null);
              break;
            }
          }
        } catch (err) {
          const error = parseErrorResponse(err);
          callback(error);
        }
      });
      socket.emit("start", {channelIdentifier, version: "v1"});
    } catch (error) {
      error_handler_default.addCheckError("text-in-images-check", error);
      return void 0;
    }
  }
  async function getImageData(virtualNode, args) {
    const url2 = virtualNode.actualNode.currentSrc || virtualNode.actualNode.getAttribute("src");
    try {
      const response = await axios_default.get(url2, {responseType: "blob"});
      this.imageData = response.data;
    } catch (error) {
      return parseSuccessResponse({url: url2});
    }
    this.contentType = this.imageData.type;
    const extension = this.contentType.split("/")[1];
    this.imageName = `${runIdentifier}-${virtualNode.nodeIndex}.${extension}`;
    const sizeInKB = this.imageData.size / 1024;
    if (sizeInKB > args.sizeLimit) {
      eds_utils_default.appendCustomRuleData("text-in-images", {
        Reason: `Marking pass as image size >${args.sizeLimit}KB`,
        Node: virtualNode.actualNode.outerHTML
      });
    }
    return parseSuccessResponse({name: this.imageName, sz: sizeInKB});
  }
  async function uploadImage(args) {
    const {url: url2} = args;
    const {imageData, imageName, contentType} = this;
    const file = new File([imageData], imageName, {type: contentType});
    await axios_default.put(url2, file, {
      headers: {
        "Content-Type": contentType
      }
    });
    return parseSuccessResponse(true);
  }
  var text_in_images_evaluate_default = textInImagesEvaluate;

  // lib/checks/sample-advanced-evaluate.js
  function sampleAdvancedEvaluate(node, options, virtualNode) {
    try {
      const channelIdentifier = get_channel_identifier_default(options, virtualNode);
      check_handlers_default.call(this, channelIdentifier, options);
      socket.on(`evaluate_${channelIdentifier}`, (payload, callback) => {
        try {
          switch (payload.command) {
            case `getLabelInfo`: {
              const labelInfo = getLabelInfo(virtualNode, payload.args);
              callback(labelInfo);
              break;
            }
            case `isFormElementWithIdPresent`: {
              const children = isFormElementWithIdPresent(payload.args);
              callback(children);
              break;
            }
            default: {
              callback(null);
              break;
            }
          }
        } catch (err) {
          const error = parseErrorResponse(err);
          callback(error);
        }
      });
      socket.emit("start", {channelIdentifier, version: "v2"});
    } catch (error) {
      error_handler_default.addCheckError("sample-advanced-check", error);
      return void 0;
    }
  }
  function isFormElementWithIdPresent(payload) {
    const {rootRef, elementId, formElements: formElements3} = payload;
    const root2 = axe._cache.get(rootRef);
    const children = [];
    formElements3.forEach((element) => {
      children.push(root2.querySelectorAll(`${element}[id="${elementId}"`).length);
    });
    return parseSuccessResponse({
      children
    });
  }
  function getLabelInfo(virtualNode, payload) {
    const {formElements: formElements3} = payload;
    const node = virtualNode.actualNode;
    const labelForAttr = axe.utils.getNodeAttributes(node).getNamedItem("for");
    const labelForAttrVal = labelForAttr?.value;
    const nodeText = axe.commons.text.accessibleTextVirtual(virtualNode, {inControlContext: true});
    const root2 = axe.commons.dom.getRootNode(virtualNode.actualNode);
    const refCnt = axe.utils.uuid.v4();
    axe._cache.set(refCnt, root2);
    const children = [];
    formElements3.forEach((element) => {
      let child = axe.utils.querySelectorAll(virtualNode, element);
      children.push(child.length);
    });
    return parseSuccessResponse({
      labelForAttr,
      labelForAttrVal,
      nodeText,
      children,
      root: refCnt
    });
  }
  var sample_advanced_evaluate_default = sampleAdvancedEvaluate;

  // lib/checks/missing-fieldset-evaluate.js
  function missingFieldsetEvaluate(node, options, virtualNode) {
    try {
      var type = node.getAttribute("type");
      var fieldset = node.closest("fieldset");
      var radioGroup = node.closest("[role=radiogroup]");
      if (fieldset !== null || radioGroup !== null) {
        return true;
      } else {
        var name2 = node.getAttribute("name");
        var groupElements = [];
        var root2 = axe.utils.getRootNode(node);
        groupElements = Array.from(root2.querySelectorAll(`input[type="${type}"][name="${name2}"]`));
        if (is_label_present_default(node, root2)) {
          return true;
        }
        let elementsWithoutLabel = 0;
        groupElements.forEach((element) => {
          if (!is_label_present_default(element, root2)) {
            elementsWithoutLabel++;
          }
        });
        if (elementsWithoutLabel >= 2) {
          let missingFieldsetCache = axe._cache.get("missing-fieldset-check");
          if (!missingFieldsetCache) {
            missingFieldsetCache = {};
            missingFieldsetCache.names = [];
          }
          if (missingFieldsetCache.names.includes(name2)) {
            return true;
          } else {
            missingFieldsetCache.names.push(name2);
            axe._cache.set("missing-fieldset-check", missingFieldsetCache);
            return false;
          }
        }
      }
      return true;
    } catch (error) {
      error_handler_default.addCheckError("missing-fieldset-check", error);
      return void 0;
    }
  }
  var missing_fieldset_evaluate_default = missingFieldsetEvaluate;

  // lib/checks/meaningful-sequence-focus-order-evaluate.js
  function isElementFixed(element) {
    while (element && element !== document.body) {
      const style = window.getComputedStyle(element);
      if (style.position === "fixed") {
        return true;
      }
      element = element.parentElement;
    }
    return false;
  }
  function getDetails(element) {
    const elementDetails = [];
    while (element && element !== document.body) {
      const {parentElement} = element;
      const computedStyles = window.getComputedStyle(element);
      const styles = {
        op: computedStyles.opacity,
        of: computedStyles.overflow,
        ofX: computedStyles.overflowX,
        ofY: computedStyles.overflowY
      };
      const styleAtr = element.getAttribute("style");
      const idAtr = element.getAttribute("id");
      const ariaAtr = ["aria-label", "aria-describedby", "aria-labelledby"].map((attr) => element.getAttribute(attr)).filter(Boolean).join(" ");
      const classList = element.classList;
      const boundingRect = element.getBoundingClientRect();
      const bR = {
        t: boundingRect.top,
        l: boundingRect.left,
        r: boundingRect.right,
        b: boundingRect.bottom,
        x: boundingRect.x,
        y: boundingRect.y,
        w: boundingRect.width,
        h: boundingRect.height
      };
      Object.keys(bR).forEach((key) => {
        bR[key] = parseFloat(bR[key].toFixed(2));
      });
      const iHE = axe.commons.utils.isHidden(element, true);
      elementDetails.push({
        styles,
        sa: styleAtr,
        id: idAtr,
        aa: ariaAtr,
        cl: classList,
        bR,
        iHE
      });
      element = parentElement;
    }
    return elementDetails;
  }
  function getData(element, endElement) {
    const key = axe.utils.uuid.v4();
    axe._cache.set(key, element);
    let iC = false;
    const details = getDetails(element.actualNode);
    const boundingRect = element.actualNode.getBoundingClientRect();
    const bR = {
      t: boundingRect.top,
      l: boundingRect.left,
      r: boundingRect.right,
      b: boundingRect.bottom,
      x: boundingRect.x,
      y: boundingRect.y,
      w: boundingRect.width,
      h: boundingRect.height
    };
    Object.keys(bR).forEach((key2) => {
      bR[key2] = parseFloat(bR[key2].toFixed(2));
    });
    const iF = isElementFixed(element.actualNode);
    const iH = axe.commons.utils.isHidden(element.actualNode, true);
    if (endElement) {
      iC = endElement.actualNode.contains(element.actualNode);
    }
    return {
      ele: key,
      bR,
      iF,
      iH,
      iC,
      details
    };
  }
  function insertData(elements, relatedNodes, data, index, result) {
    elements.forEach((element) => {
      relatedNodes.push(axe._cache.get(element.end));
      relatedNodes.push(axe._cache.get(element.start));
      data[index] = result;
      index += 2;
    });
    return index;
  }
  function setResultData(violations) {
    const relatedNodes = [];
    const data = {};
    let index = 0;
    if (violations.violationCount > 0) {
      const {violatedNodes} = violations;
      index = insertData(violatedNodes, relatedNodes, data, index, "violation");
    }
    if (violations.needsReviewCount > 0) {
      const {needsReviewNodes} = violations;
      insertData(needsReviewNodes, relatedNodes, data, index, "incomplete");
    }
    return {relatedNodes, data};
  }
  function getElements(virtualNode) {
    const tabbableElements = get_tabbable_elements_default(virtualNode);
    const tabbables = [];
    tabbableElements.forEach((element, index) => {
      const nextElement = index < tabbableElements.length - 1 ? tabbableElements[index + 1] : null;
      const data = getData(element, nextElement);
      tabbables.push({data});
    });
    return tabbables;
  }
  function meaningfulSequenceFocusOrderEvaluate(node, options, virtualNode) {
    try {
      let getCachedElements = function(virtualNode2) {
        if (!cachedElements) {
          cachedElements = getElements(virtualNode2);
        }
        return cachedElements;
      };
      let lang = node.getAttribute("lang");
      if (!lang) {
        lang = window.navigator.userLanguage || window.navigator.language;
      }
      if (lang && lang.startsWith("ar"))
        return true;
      const channelIdentifier = get_channel_identifier_default(options, virtualNode);
      check_handlers_default.call(this, channelIdentifier, options);
      let cachedElements = null;
      socket.on(`evaluate_${channelIdentifier}`, (payload, callback) => {
        try {
          switch (payload.command) {
            case `getTabbableElements`: {
              const {startIndex, endIndex} = payload.args;
              const allElements = getCachedElements(virtualNode);
              const elements = allElements.slice(startIndex, endIndex);
              callback(parseSuccessResponse(elements));
              break;
            }
            case `getDimensions`: {
              const dimensions = {
                h: window.innerHeight,
                w: window.innerWidth
              };
              const elements = getCachedElements(virtualNode);
              callback(parseSuccessResponse({
                elementCount: elements.length,
                dimensions
              }));
              break;
            }
            case `setResultData`: {
              const result = setResultData(payload.args.violations);
              this.relatedNodes(result.relatedNodes);
              this.data(result.data);
              callback(parseSuccessResponse(true));
              break;
            }
            default: {
              callback(parseSuccessResponse(null));
              break;
            }
          }
        } catch (err) {
          const error = parseErrorResponse(err);
          callback(error);
        }
      });
      socket.emit("start", {channelIdentifier, version: "v2"});
    } catch (error) {
      error_handler_default.addCheckError("meaningful-sequence-focus-order-check", error);
      return void 0;
    }
  }
  var meaningful_sequence_focus_order_evaluate_default = meaningfulSequenceFocusOrderEvaluate;

  // lib/checks/meaningful-sequence-evaluate.js
  function meaningfulSequenceEvaluate(node) {
    try {
      const headers = Array.from(node.querySelectorAll("th"));
      const unassociatedHeaders = headers.filter((header) => {
        const closestTable = header.closest("table");
        return !(node.compareDocumentPosition(closestTable) & (Node.DOCUMENT_POSITION_FOLLOWING & Node.DOCUMENT_POSITION_CONTAINED_BY));
      });
      return unassociatedHeaders.length > 0;
    } catch (error) {
      error_handler_default.addCheckError("meaningful-sequence-check", error);
      return void 0;
    }
  }
  var meaningful_sequence_evaluate_default = meaningfulSequenceEvaluate;

  // lib/checks/link-purpose-evaluate.js
  function linkPurposeEvaluate(node, options, virtualNode) {
    try {
      const channelIdentifier = get_channel_identifier_default(options, virtualNode);
      check_handlers_default.call(this, channelIdentifier, options);
      socket.on(`evaluate_${channelIdentifier}`, (payload, callback) => {
        try {
          switch (payload.command) {
            case `getNodeAttributes`: {
              const requiredNodes = getNodeAttributes(node, virtualNode);
              callback(requiredNodes);
              break;
            }
            case "getParentAttributes": {
              const parentAttributes = getParentAttributes(payload.args.ref);
              callback(parentAttributes);
              break;
            }
            case "setClosestAncestor": {
              const isClosestAncestorSet = setClosestAncestor(payload.args.ref);
              callback(isClosestAncestorSet);
              break;
            }
            case "getParentOfParentNodeName": {
              const parentOfParentNodeName = getParentOfParentNodeName(payload.args.ref);
              callback(parentOfParentNodeName);
              break;
            }
            case "getClosestTableHeaderTextContent": {
              const closestTableHeaderTextContent = getClosestTableHeaderTextContent(payload.args.ref);
              callback(closestTableHeaderTextContent);
              break;
            }
            case "updateParentElement": {
              updateParentElement(payload.args.ref);
              callback(parseSuccessResponse(null));
              break;
            }
            default: {
              callback(parseSuccessResponse(null));
              break;
            }
          }
        } catch (err) {
          const error = parseErrorResponse(err);
          callback(error);
        }
      });
      socket.emit("start", {channelIdentifier, version: "v1"});
    } catch (error) {
      error_handler_default.addCheckError("link-purpose-check", error);
      return void 0;
    }
  }
  var getNodeAttributes = (node, virtualNode) => {
    let parentElement = node.parentElement;
    const ariaLabel = node.getAttribute("aria-label");
    const ariaLabelledBy = node.getAttribute("aria-labelledby");
    const ariaDescribedBy = node.getAttribute("aria-describedby");
    const title = node.getAttribute("title");
    const labelText = axe.commons.aria.arialabelledbyText(virtualNode) || "";
    const nodeTextContent = node.textContent;
    let ariaDescribedByLabelText = "";
    if (ariaDescribedBy) {
      const root2 = axe.utils.getRootNode(node);
      for (let id of ariaDescribedBy.split(" ")) {
        const labelElement = root2.getElementById(id);
        if (!labelElement)
          continue;
        ariaDescribedByLabelText += labelElement.textContent;
      }
    }
    let refParent = null;
    if (parentElement) {
      refParent = axe.utils.uuid.v4();
      axe._cache.set(refParent, parentElement);
    }
    return parseSuccessResponse({
      ariaLabel,
      ariaLabelledBy,
      ariaDescribedBy,
      title,
      refParent,
      nodeTextContent,
      labelText,
      ariaDescribedByLabelText
    });
  };
  var getParentAttributes = (ref) => {
    if (ref) {
      const element = axe._cache.get(ref);
      const computedStyle = getComputedStyle(element);
      return parseSuccessResponse({
        parentTextContent: element.textContent,
        parentNodeName: element.nodeName,
        computedStyle: {
          display: computedStyle.display
        }
      });
    } else
      return parseSuccessResponse(null);
  };
  var setClosestAncestor = (ref) => {
    if (ref) {
      let parentElement = axe._cache.get(ref);
      let isClosestAncestorSet = false;
      let closestList = parentElement.closest("ul, ol");
      if (closestList) {
        parentElement = closestList.parentElement;
        axe._cache.set(ref, parentElement);
        isClosestAncestorSet = true;
      }
      return parseSuccessResponse(isClosestAncestorSet);
    } else
      return parseSuccessResponse(null);
  };
  var getParentOfParentNodeName = (ref) => {
    if (ref) {
      const element = axe._cache.get(ref);
      let parentOfParentNodeName = element.parentElement.nodeName;
      return parseSuccessResponse(parentOfParentNodeName);
    } else
      return parseSuccessResponse(null);
  };
  var getClosestTableHeaderTextContent = (ref) => {
    if (ref) {
      const parentElement = axe._cache.get(ref);
      const table = parentElement.closest("table");
      const closestTableHeaderTextContent = table.rows[0].textContent;
      return parseSuccessResponse(closestTableHeaderTextContent);
    } else
      return parseSuccessResponse(null);
  };
  var updateParentElement = (ref) => {
    if (ref) {
      const element = axe._cache.get(ref);
      let parentOfParent = element.parentElement;
      axe._cache.set(ref, parentOfParent);
    }
  };
  var link_purpose_evaluate_default = linkPurposeEvaluate;

  // lib/checks/label-orphan-evaluate.js
  var formElements = [
    "input",
    "select",
    "textarea",
    "meter",
    "output",
    "progress",
    "datalist",
    "button",
    "fieldset",
    "legend",
    "option",
    "optgroup",
    "[role=button]",
    "[role=checkbox]",
    "[role=combobox]",
    "[role=listbox]",
    "[role=menuitemcheckbox]",
    "[role=menuitemradio]",
    "[role=radio]",
    "[role=searchbox]",
    "[role=slider]",
    "[role=spinbutton]",
    "[role=switch]",
    "[role=textbox]",
    "[role=group]",
    "[role=progressbar]"
  ];
  function labelOrphanEvaluate(node, options, virtualNode) {
    try {
      const root2 = axe.commons.dom.getRootNode(virtualNode.actualNode);
      let attr = axe.utils.getNodeAttributes(node);
      let labelForAttr = attr.getNamedItem("for");
      const labelId = attr.getNamedItem("id");
      let children = [];
      formElements.forEach((element) => {
        let child = axe.utils.querySelectorAll(virtualNode, element);
        if (child.length > 0)
          children.push(child);
      });
      if (labelId && isFormElementWithLabelledByIdPresent(root2, labelId.value)) {
        return true;
      } else if (!labelForAttr) {
        if (children.length > 0)
          return true;
        else {
          return !axe.commons.text.accessibleTextVirtual(virtualNode, {inControlContext: true});
        }
      } else if (labelForAttr && isFormElementWithIdPresent2(root2, labelForAttr.value)) {
        return true;
      }
      return false;
    } catch (error) {
      error_handler_default.addCheckError("label-orphan-check", error);
      return void 0;
    }
  }
  function isFormElementWithLabelledByIdPresent(root2, elementId) {
    let isFormElementWithLabelledByIdPresent2 = false;
    let isFormElementWithDescribedByIdPresent = false;
    isFormElementWithLabelledByIdPresent2 = formElements.some((element) => root2.querySelectorAll(`${element}[aria-labelledby="${elementId}"]`).length > 0);
    isFormElementWithDescribedByIdPresent = formElements.some((element) => root2.querySelectorAll(`${element}[aria-describedby="${elementId}"]`).length > 0);
    if (!isFormElementWithLabelledByIdPresent2) {
      const elementWithLabelledById = root2.querySelector(`[aria-labelledby="${elementId}"]`);
      if (elementWithLabelledById) {
        isFormElementWithLabelledByIdPresent2 = checkIfFormElement(elementWithLabelledById);
      }
    }
    if (!isFormElementWithDescribedByIdPresent) {
      const elementWithDescribedById = root2.querySelector(`[aria-describedby="${elementId}"]`);
      if (elementWithDescribedById) {
        isFormElementWithDescribedByIdPresent = checkIfFormElement(elementWithDescribedById);
      }
    }
    return isFormElementWithDescribedByIdPresent || isFormElementWithLabelledByIdPresent2;
  }
  function isFormElementWithIdPresent2(root2, elementId) {
    let isFormElementWithIdPresent4 = false;
    isFormElementWithIdPresent4 = formElements.some((element) => root2.querySelectorAll(`${element}[id="${elementId}"`).length > 0);
    if (!isFormElementWithIdPresent4) {
      const elementWithId = root2.getElementById(elementId);
      if (elementWithId) {
        isFormElementWithIdPresent4 = checkIfFormElement(elementWithId);
      }
    }
    return isFormElementWithIdPresent4;
  }
  function checkIfFormElement(elementWithId) {
    let children = [];
    let virtualNode = axe.utils.getNodeFromTree(elementWithId);
    formElements.forEach((element) => {
      let child = axe.utils.querySelectorAll(virtualNode, element);
      if (child.length > 0)
        children.push(child);
    });
    if (children.length > 0) {
      return true;
    }
    return false;
  }
  var label_orphan_evaluate_default = labelOrphanEvaluate;

  // lib/checks/label-empty-evaluate.js
  var formElements2 = [
    "input",
    "select",
    "textarea",
    "meter",
    "output",
    "progress",
    "datalist",
    "button",
    "fieldset",
    "legend",
    "option",
    "optgroup"
  ];
  var roleElements = [
    "[role=button]",
    "[role=checkbox]",
    "[role=combobox]",
    "[role=listbox]",
    "[role=menuitemcheckbox]",
    "[role=menuitemradio]",
    "[role=radio]",
    "[role=searchbox]",
    "[role=slider]",
    "[role=spinbutton]",
    "[role=switch]",
    "[role=textbox]",
    "[role=group]",
    "[role=progressbar]"
  ];
  function nodeContainsText(node) {
    const ariaLabel = node.getAttribute("aria-label")?.trim();
    const title = node.getAttribute("title")?.trim();
    const placeholder = node.getAttribute("placeholder")?.trim();
    let selectDisabledOptionText = "";
    if (node.tagName.toLowerCase() === "select" && node.children.length > 0 && node.children[0].disabled) {
      selectDisabledOptionText = node.children[0].textContent;
    }
    return ariaLabel?.length > 0 || title?.length > 0 || placeholder?.length > 0 || selectDisabledOptionText?.length > 0;
  }
  function isFormElementWithIdPresent3(root2, elementId) {
    const isFormElementPresent = formElements2.some((element) => root2.querySelectorAll(`${element}[id="${elementId}"`).length > 0);
    const isRoleElementPresent = roleElements.some((role) => root2.querySelectorAll(`${role}[id="${elementId}"`).length > 0);
    return isFormElementPresent || isRoleElementPresent;
  }
  function getFormElementWithAriaLabelledIdPresent(root2, elementId) {
    const selectors = formElements2.concat(roleElements).map((el) => `${el}[aria-labelledby="${elementId}"]`);
    const query = selectors.join(", ");
    return root2.querySelectorAll(query);
  }
  function getFormElementWithAriaDescribedIdPresent(root2, elementId) {
    const selectors = formElements2.concat(roleElements).map((el) => `${el}[aria-describedby="${elementId}"]`);
    const query = selectors.join(", ");
    return root2.querySelectorAll(query);
  }
  function labelEmptyEvaluate(node, options, virtualNode) {
    try {
      const root2 = axe.commons.dom.getRootNode(virtualNode.actualNode);
      const labelText = node.textContent?.trim();
      const ariaLabel = node.getAttribute("aria-label")?.trim();
      const title = node.getAttribute("title")?.trim();
      const labelForAttr = node.getAttribute("for");
      const labelId = node.getAttribute("id");
      if (labelText?.length > 0 || ariaLabel?.length > 0 || title?.length > 0) {
        return true;
      } else {
        let desiredChildrenNodes = axe.utils.querySelectorAll(virtualNode, `input, textarea, select, [role=textbox], [role=checkbox], [role=combobox]`);
        let finalResult = false;
        desiredChildrenNodes.forEach((element) => {
          if (nodeContainsText(element.actualNode)) {
            finalResult = true;
          }
        });
        if (labelForAttr && isFormElementWithIdPresent3(root2, labelForAttr)) {
          const element = root2.getElementById(labelForAttr);
          if (nodeContainsText(element)) {
            finalResult = true;
          }
        }
        if (labelId) {
          const allFormElementsWithAriaLabelledByPresent = getFormElementWithAriaLabelledIdPresent(root2, labelId);
          allFormElementsWithAriaLabelledByPresent.forEach((element) => {
            if (nodeContainsText(element)) {
              finalResult = true;
            }
          });
        }
        if (labelId) {
          const allFormElementsWithAriaDescribedByPresent = getFormElementWithAriaDescribedIdPresent(root2, labelId);
          allFormElementsWithAriaDescribedByPresent.forEach((element) => {
            if (nodeContainsText(element)) {
              finalResult = true;
            }
          });
        }
        return finalResult;
      }
    } catch (error) {
      error_handler_default.addCheckError("label-empty-check", error);
      return void 0;
    }
  }
  var label_empty_evaluate_default = labelEmptyEvaluate;

  // lib/checks/keyboard-accessible-role-evaluate.js
  function keyboardAccessibleRoleEvaluate(node, options, virtualNode) {
    try {
      const channelIdentifier = get_channel_identifier_default(options, virtualNode);
      check_handlers_default.call(this, channelIdentifier, options);
      socket.on(`evaluate_${channelIdentifier}`, (payload, callback) => {
        try {
          switch (payload.command) {
            case `getAllDescendentsValues`: {
              const allDescendentsValues = getAllDescendentsValues(virtualNode);
              callback(allDescendentsValues);
              break;
            }
            case `getCurrentNodeValues`: {
              const currentNodeValues = getCurrentNodeValues(virtualNode);
              callback(currentNodeValues);
              break;
            }
            default: {
              callback(null);
              break;
            }
          }
        } catch (err) {
          const error = parseErrorResponse(err);
          callback(error);
        }
      });
      socket.emit("start", {channelIdentifier, version: "v1"});
    } catch (error) {
      error_handler_default.addCheckError("keyboard-accessible-role-check", error);
      return void 0;
    }
  }
  function getAllDescendentsValues(virtualNode) {
    let nodeAndDescendents = axe.utils.querySelectorAll(virtualNode, "*");
    let val = nodeAndDescendents.map((vNode) => {
      const focus = vNode.isFocusable;
      const ti = vNode.actualNode.getAttribute("tabindex");
      return {
        focus,
        ti
      };
    });
    return parseSuccessResponse({
      val
    });
  }
  function getCurrentNodeValues(virtualNode) {
    const focus = virtualNode.isFocusable;
    const ti = virtualNode.actualNode.getAttribute("tabindex");
    return parseSuccessResponse({
      focus,
      ti
    });
  }
  var keyboard_accessible_role_evaluate_default = keyboardAccessibleRoleEvaluate;

  // lib/checks/fieldset-missing-legend-evaluate.js
  function fieldsetMissingLegendEvaluate(node) {
    try {
      let legends = node.querySelectorAll("legend");
      if (legends || legends.length > 0) {
        legends = Array.from(node.querySelectorAll("legend"));
        return legends.some((legend) => {
          return axe.commons.text.accessibleText(legend);
        });
      }
      return false;
    } catch (error) {
      error_handler_default.addCheckError("fieldset-missing-legend-check", error);
      return void 0;
    }
  }
  var fieldset_missing_legend_evaluate_default = fieldsetMissingLegendEvaluate;

  // lib/rules/text-in-images-matches.js
  var MIN_DIMENSIONS = [600, 250];
  function getRenderedSize(img) {
    const ratio = img.naturalWidth / img.naturalHeight;
    let renderedWidth = img.height * ratio;
    let {height: renderedHeight} = img;
    if (renderedWidth > img.width) {
      renderedWidth = img.width;
      renderedHeight = img.width / ratio;
    }
    return [renderedWidth, renderedHeight];
  }
  function textInImageMatches(node) {
    if (!node.currentSrc)
      return false;
    if (node.currentSrc.startsWith("data:image/svg+xml"))
      return false;
    if (node.currentSrc.startsWith("data:image/gif"))
      return false;
    const [renderedWidth, renderedHeight] = getRenderedSize(node);
    const isMinimumSize = renderedWidth >= MIN_DIMENSIONS[0] && renderedHeight >= MIN_DIMENSIONS[1] || renderedWidth >= MIN_DIMENSIONS[1] && renderedHeight >= MIN_DIMENSIONS[0];
    if (!isMinimumSize)
      return false;
    const regex = /^data:image\/(?:bmp|jpeg|jpg|png|pbm|webp);base64,([^"]*)/;
    if (node.currentSrc.startsWith("data:image"))
      return node.currentSrc.match(regex);
    return true;
  }
  var text_in_images_matches_default = textInImageMatches;

  // lib/rules/radio-checkbox-matches.js
  function radioCheckboxMatches(node, virtualNode) {
    if (virtualNode.props.nodeName !== "input" || virtualNode.hasAttr("type") === false) {
      return false;
    }
    var type = virtualNode.attr("type").toLowerCase();
    return ["radio", "checkbox"].includes(type);
  }
  var radio_checkbox_matches_default = radioCheckboxMatches;

  // lib/rules/meaningful-sequence-matches.js
  function meaningfulSequenceMatches(node, virtualNode) {
    return !hasUnexpectedRole(node) && !hasUnexpectedAttribute(node);
  }
  function hasUnexpectedRole(node) {
    const roles = ["presentation", "none"];
    return node.hasAttribute("role") && roles.includes(node.getAttribute("role"));
  }
  function hasUnexpectedAttribute(node) {
    const attributes = ["aria-hidden", "aria-disabled"];
    return attributes.some((attribute) => node.hasAttribute(attribute) && node.getAttribute(attribute) === "true");
  }
  var meaningful_sequence_matches_default = meaningfulSequenceMatches;

  // lib/rules/link-purpose-matches.js
  function readMoreLinkMatches(node) {
    const nodeText = node.textContent.trim().toLowerCase();
    const regex = /^(read\s+more|click\s+here|learn\s+more|know\s+more|continue\s+reading|continue|details|this\s+page)$/i;
    const cleanedText = cleanText(nodeText);
    return regex.test(cleanedText) && getComputedStyle(node).display === "inline";
  }
  function cleanText(text) {
    return text.replace(/[^\w\s]/gi, "").trim();
  }
  var link_purpose_matches_default = readMoreLinkMatches;

  // lib/rules/keyboard-accessible-role-matches.js
  var htmlElementsRole = ["button", "checkbox", "option", "radio", "spinbutton", "searchbox", "menuitem", "menuitemcheckbox", "menuitemradio", "textbox", "combobox", "listbox"];
  function keyboarAccessibleRoleMatches(node, virtualNode) {
    const ariaDisabled = virtualNode.attr("aria-disabled") || "false";
    const role = virtualNode.attr("role");
    if (htmlElementsRole.includes(role) && (virtualNode.hasAttr("disabled") || ariaDisabled.toLowerCase() === "true")) {
      return false;
    }
    return true;
  }
  var keyboard_accessible_role_matches_default = keyboarAccessibleRoleMatches;

  // lib/core/base/a11y-engine-function-map.js
  var a11yEngineFunctionMap = {
    "bypass-blocks-skip-links-evaluate": bypass_blocks_skip_links_evaluate_default,
    "fieldset-missing-legend-evaluate": fieldset_missing_legend_evaluate_default,
    "keyboard-accessible-role-evaluate": keyboard_accessible_role_evaluate_default,
    "keyboard-accessible-role-matches": keyboard_accessible_role_matches_default,
    "label-empty-evaluate": label_empty_evaluate_default,
    "label-orphan-evaluate": label_orphan_evaluate_default,
    "link-purpose-evaluate": link_purpose_evaluate_default,
    "link-purpose-matches": link_purpose_matches_default,
    "meaningful-sequence-evaluate": meaningful_sequence_evaluate_default,
    "meaningful-sequence-focus-order-evaluate": meaningful_sequence_focus_order_evaluate_default,
    "meaningful-sequence-matches": meaningful_sequence_matches_default,
    "missing-fieldset-evaluate": missing_fieldset_evaluate_default,
    "radio-checkbox-matches": radio_checkbox_matches_default,
    "sample-advanced-evaluate": sample_advanced_evaluate_default,
    "text-in-images-evaluate": text_in_images_evaluate_default,
    "text-in-images-matches": text_in_images_matches_default
  };
  var a11y_engine_function_map_default = a11yEngineFunctionMap;

  // tmp/configs.js
  var a11yEngineRulesData = [{id: "bypass-blocks-skip-links", impact: "serious", selector: "html", tags: ["cat.keyboard", "a11y-engine", "a11y-engine-experimental", "wcag2a", "wcag241"], metadata: {description: "Ensures that a mechanism is available to bypass blocks of content that are repeated on multiple Web pages by skipping directly to the main content of the Web page and the element is visible when it receive keyboard focus.", help: "First interactive item in the Web page must be a link to the beginning of the main content"}, all: ["bypass-blocks-skip-links-check"], any: [], none: []}, {id: "distinguishable-link", selector: "a[href], [role=link]", matches: "link-in-text-block-matches", impact: "serious", tags: ["cat.color", "wcag2a", "wcag141", "a11y-engine", "a11y-engine-experimental"], metadata: {description: "Ensures the links are clearly identifiable from surrounding text using distinct style or colour.", help: "Links must be distinguishable from surrounding text"}, all: [{options: {a11yRule: true}, id: "distinguishable-link-check"}], any: [], none: []}, {id: "fieldset-missing-legend", impact: "serious", selector: "fieldset, [role=phrasing]", tags: ["cat.forms", "a11y-engine", "a11y-engine-experimental", "wcag2a", "wcag332", "wcag131"], metadata: {description: "Ensures a legend is associated with a fieldset element that helps to identify the purpose of the group", help: "Fieldset must have a legend"}, all: ["fieldset-missing-legend-check"], any: [], none: []}, {id: "keyboard-accessible-role", impact: "serious", selector: "[role=button], [role=checkbox], [role=gridcell], [role=link], [role=menuitem], [role=menuitemcheckbox], [role=menuitemradio], [role=option], [role=radio], [role=searchbox], [role=slider], [role=spinbutton], [role=switch], [role=tab], [role=tabpanel], [role=textbox], [role=combobox], [role=grid], [role=listbox], [role=menu], [role=menubar], [role=tablist], [role=tree]", matches: "keyboard-accessible-role-matches", tags: ["cat.keyboard", "a11y-engine", "a11y-engine-experimental", "advanced", "wcag2a", "wcag211"], metadata: {description: 'Ensure that elements with the "role" attribute are focusable to make them keyboard accessible.', help: "UI functionality must be made accessible via the keyboard."}, all: ["keyboard-accessible-role-check"], any: [], none: []}, {id: "label-empty", impact: "critical", selector: "label", tags: ["cat.tables", "a11y-engine", "a11y-engine-experimental", "wcag2aa", "wcag246", "wcag332", "wcag131"], metadata: {description: "Ensures labels have appropriate text describing the corresponding form element.", help: "Form label must be associated with a content"}, all: ["label-empty-check"], any: [], none: []}, {id: "label-orphaned", selector: "label", impact: "moderate", tags: ["cat.tables", "a11y-engine", "a11y-engine-experimental", "wcag246", "wcag332", "wcag2aa"], metadata: {description: "Ensures the correct association of a label with a form control.", help: "Label must be correctly associated with a form control."}, all: ["label-orphan-check"], any: [], none: []}, {id: "link-purpose", impact: "moderate", selector: "a[href], [role=link]", matches: "link-purpose-matches", tags: ["cat.name-role-value", "wcag2a", "wcag244", "wcag249", "a11y-engine", "a11y-engine-experimental", "advanced"], metadata: {description: 'Ensure that link clearly indicates the purpose without requiring additional context. Link text such as "Read more", "Click here", "Learn more" lacks clarity for user using screen reader.', help: "Link text must have a clear and meaningful purpose"}, all: ["link-purpose-check"], any: [], none: []}, {id: "meaningful-sequence-focus-order", impact: "moderate", selector: "html", tags: ["cat.keyboard", "a11y-engine", "a11y-engine-experimental", "advanced", "wcag2a", "wcag132"], metadata: {description: 'Ensure the keyboard navigation order is meaningful and matches the visual layout. For English, it is top to bottom and left to right. Currently, the focus shifts unusually from Element 1 to Element 2.  (Refer HTML Snippet in "Element Details" for Element 2 and Related CSS Selector in "How to Fix" section for Element 1)', help: "Order of the content must match visual presentation and be meaningfully structured for keyboard navigation"}, all: ["meaningful-sequence-focus-order-check"], any: [], none: []}, {id: "meaningful-sequence", impact: "moderate", selector: "table, [role=phrasing]", tags: ["cat.structure", "best-practice", "a11y-engine"], matches: "meaningful-sequence-matches", metadata: {description: "Ensures the order of the content is in a meaningful sequence. Using layout table is not recommended since screen readers are not able to present the content in a linear way meaningfully. If you want to use a table, ensure that you add a header <th> tag so that screen readers can announce it correctly.", help: "Layout table should not be used for presentation."}, all: ["meaningful-sequence-check"], any: [], none: []}, {id: "missing-fieldset", impact: "serious", selector: "input, [role=phrasing]", matches: "radio-checkbox-matches", tags: ["cat.forms", "a11y-engine", "a11y-engine-experimental", "wcag2a", "wcag332", "wcag131"], metadata: {description: "Ensures group of checkboxes or radio buttons have explanatory text for its purpose. If necessary, markup the group within a fieldset and provide the group description in a legend element.", help: "Checkboxes or radio buttons must be enclosed within a fieldset"}, all: ["missing-fieldset-check"], any: [], none: []}, {id: "sample-advanced-rule", selector: "label", impact: "moderate", tags: ["cat.structure", "deprecated", "a11y-engine", "a11y-engine-experimental", "advanced", "wcag2aa", "wcag131"], metadata: {description: "Ensures the element is accessible", help: "Label must be accessible"}, all: ["sample-advanced-check"], any: [], none: []}, {id: "text-in-images", impact: "serious", selector: "img", tags: ["cat.images", "wcag2aa", "wcag145", "a11y-engine", "a11y-engine-experimental", "advanced"], metadata: {description: "Ensure that important information is presented in text rather than using an image, so users with visual impairments can adjust the style of the text as needed.", help: "Text must be used to convey information rather than images of text."}, matches: "text-in-images-matches", all: ["text-in-images-check"], any: [], none: []}];
  var a11yEngineChecksData = [{id: "bypass-blocks-skip-links-check", evaluate: "bypass-blocks-skip-links-evaluate", metadata: {impact: "serious", messages: {pass: "A Skip to main content link present.", fail: "Add a 'Skip to Main content' link as the first interactive element via keyboard", incomplete: "Unable to determine skip to main content link."}}}, {id: "distinguishable-link-check", evaluate: "link-in-text-block-evaluate", options: {a11yRule: true}, metadata: {impact: "serious", messages: {pass: "Links are identifiable from surrounding text", fail: "Add a visual cue for link. Visual cues can be the addition of underlines, font style, bold, or italics, or changes to the font size. Ensure colour contrast between a link and the words around it is greater than 3:1. Further, add visual cue when the user hovers over each link. ", incomplete: "Check if the element has a distinct style (such as underline, bold, or a different font) on hover/focus."}}}, {id: "fieldset-missing-legend-check", evaluate: "fieldset-missing-legend-evaluate", metadata: {impact: "moderate", messages: {pass: "Fieldset legend is present", fail: "Add a legend to the fieldset which meaningfully describes the purpose of that group.", incomplete: "Unable to determine fieldset legend"}}}, {id: "keyboard-accessible-role-check", evaluate: "keyboard-accessible-role-evaluate", options: {checkName: "keyboard-accessible-role-evaluate"}, metadata: {impact: "serious", messages: {pass: "Element is keyboard accessible", fail: 'Prefer to use native semantic elements instead of  <div> or  <span>. For example, use <button> instead of role="button", unless necessary. If custom implementation is required, use the `tabindex` attribute to make it accessible to the keyboard.'}}}, {id: "label-empty-check", evaluate: "label-empty-evaluate", metadata: {impact: "critical", messages: {pass: "Label is correctly associated to form control and not an empty", fail: "Associate the form label to a content so that screen readers can correctly use it.", incomplete: "Unable to determine whether label is properly assoiated to the form control and not empty"}}}, {id: "label-orphan-check", evaluate: "label-orphan-evaluate", metadata: {impact: "moderate", messages: {pass: "Label is correctly associated to form control and not an orphan", fail: "Associate the form label to the correct form control element.", incomplete: "Unable to determine whether label is properly assoiated to teh form control"}}}, {id: "link-purpose-check", evaluate: "link-purpose-evaluate", options: {checkName: "link-purpose-evaluate"}, metadata: {impact: "moderate", messages: {pass: "Link texts have a clear and meaningful purpose", fail: 'Add clear description of link in the link text. Avoid link text such as "Read more", "Click here", "Learn more" as it does not provide context of link. Ensure the link description is provided in a meaningful manner in aria-label or aria-labelledby attribute.', incomplete: "Unable to determine link's meaningful purpose"}}}, {id: "meaningful-sequence-check", evaluate: "meaningful-sequence-evaluate", metadata: {impact: "moderate", messages: {pass: "meaningful-sequence valid", fail: "Avoid using layout tables. Recommended approach is to use CSS for styling", incomplete: "Unable to determine meaningful-sequence"}}}, {id: "meaningful-sequence-focus-order-check", evaluate: "meaningful-sequence-focus-order-evaluate", options: {checkName: "meaningful-sequence-focus-order-evaluate"}, metadata: {impact: "moderate", messages: {pass: "Focus order of elements is correct.", fail: "Ensure that the keyboard order (for languages such as English) is not from right to left on a webpage for content unless necessary due to the web layout. In general, make the keyboard tabbing order from top to bottom and from left to right.", incomplete: "Ensure that the keyboard order (for languages such as English) is not from right to left on a webpage for content unless necessary due to the web layout. In general, make the keyboard tabbing order from top to bottom and from left to right."}}}, {id: "missing-fieldset-check", evaluate: "missing-fieldset-evaluate", metadata: {impact: "moderate", messages: {pass: "Fieldset is present", fail: "Add a fieldset to a group of radio buttons or checkbox so that assistive technologies can use it to give more context to user.", incomplete: "Unable to determine fieldset is missing"}}}, {id: "sample-advanced-check", evaluate: "sample-advanced-evaluate", options: {checkName: "sample-advanced-evaluate"}, metadata: {impact: "moderate", messages: {pass: "Label is correctly associated to form control and not an orphan", fail: "Associate the form label to the correct form control element.", incomplete: "Unable to determine whether label is properly assoiated to the form control"}}}, {id: "text-in-images-check", evaluate: "text-in-images-evaluate", options: {checkName: "text-in-images-evaluate"}, metadata: {impact: "serious", messages: {pass: "Image does not contains text", fail: "Present the information as text rather than using an image. Use text with CSS to control the visual presentation of text such as size", incomplete: "Ensure that the image does not have important information embedded. Images where the visual representation is essential to its understanding are not violations, for example, logos and type samples. Images with significant other visual content, for example, graphs, screenshots and diagrams are also not violations."}}}];

  // lib/core/base/rules.js
  function configureRules2(rules2) {
    let rulesArr = [];
    rules2.forEach((rule) => {
      if (rule["matches"] && a11y_engine_function_map_default[rule["matches"]]) {
        rule.matches = a11y_engine_function_map_default[rule["matches"]];
      }
      rulesArr.push(rule);
    });
    return rulesArr;
  }
  var rules = configureRules2(a11yEngineRulesData);
  var rules_default = rules;

  // lib/core/base/checks.js
  function configureChecks(checks2) {
    let checksArr = [];
    checks2.forEach((check) => {
      if (check["evaluate"] && a11y_engine_function_map_default[check["evaluate"]]) {
        check.evaluate = a11y_engine_function_map_default[check["evaluate"]];
      }
      if (check["after"] && a11y_engine_function_map_default[check["after"]]) {
        check.after = a11y_engine_function_map_default[check["after"]];
      }
      checksArr.push(check);
    });
    return checksArr;
  }
  var checks = configureChecks(a11yEngineChecksData);
  var checks_default = checks;

  // lib/core/public/configure.js
  function configure(config = {}) {
    try {
      if (Object.keys(config).length <= 0) {
        axe.configure({
          rules: rules_default,
          checks: checks_default
        });
      } else {
        throw new Error("Cannot call a11y_engine configure with parameter");
      }
    } catch (err) {
      return err;
    }
  }

  // package.json
  var name = "@browserstack/a11y-engine-core";
  var version = "2.3.0";
  var description = "A11y Engine Package 2.3.0";
  var main = "dist/a11y-engine-core.min.js";
  var files = [
    "dist/**"
  ];
  var respository = "https://github.com/browserstack/a11y-engine.git";
  var scripts = {
    lint: "eslint .",
    "lint:check": 'eslint --format=compact --ignore-pattern tmp --ignore-pattern dist --max-warnings 0 "**/*.{js,jsx}"',
    "lint:fix": "npm run lint:check -- --fix",
    "lint:fix:modified": "eslint --fix --max-warnings 0",
    build: "grunt",
    "build:local": "npm run lint:check && npm run lint:fix && npm run lint:fix:modified && grunt",
    test: "karma start test/karma.conf.js"
  };
  var author = "";
  var license = "ISC";
  var devDependencies = {
    "@babel/core": "^7.24.6",
    "@babel/preset-env": "^7.24.6",
    "axios-mock-adapter": "^1.22.0",
    "babel-eslint": "10.1.0",
    "babel-loader": "^9.1.3",
    eslint: "^7.21.0",
    "eslint-config-airbnb": "18.2.0",
    "eslint-config-prettier": "6.12.0",
    "eslint-loader": "4.0.2",
    "eslint-plugin-import": "2.22.1",
    "eslint-plugin-jsx-a11y": "6.3.1",
    "eslint-plugin-prettier": "3.1.4",
    "eslint-plugin-react": "7.34.1",
    "eslint-plugin-react-hooks": "4.6.0",
    grunt: "^1.6.1",
    "grunt-contrib-clean": "^2.0.1",
    "grunt-contrib-concat": "^2.1.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^5.2.2",
    "grunt-exec": "^3.0.0",
    "grunt-replace": "^2.0.2",
    karma: "^6.4.2",
    "karma-chai": "^0.1.0",
    "karma-chrome-launcher": "^3.2.0",
    "karma-firefox-launcher": "^2.1.2",
    "karma-ie-launcher": "^1.0.0",
    "karma-mocha": "^2.0.1",
    "karma-requirejs": "^1.1.0",
    "karma-webpack": "^5.0.1",
    mocha: "^10.2.0",
    prettier: "1.18.2",
    webpack: "^5.91.0"
  };
  var dependencies = {
    axios: "^1.6.7",
    chai: "^4.2.0",
    "lodash-es": "^4.17.21",
    "socket.io-client": "^4.7.5"
  };
  var package_default = {
    name,
    version,
    description,
    main,
    files,
    respository,
    scripts,
    author,
    license,
    devDependencies,
    dependencies
  };

  // lib/core/core.js
  a11yEngine.checks = checks_default;
  a11yEngine.rules = rules_default;
  a11yEngine.commons = commons_default;
  a11yEngine.run = run;
  a11yEngine.abort = abort;
  a11yEngine.configure = configure;
  a11yEngine.version = package_default.version;
  a11yEngine.eventConsolidator = edsEventConsolidator;
  a11yEngine.edsBatchSize = constants_default.EDS_BATCH_SIZE;
})();


}( typeof window === 'object' ? window : this ));
